'test
Const bWriteNoInputToFile = False

Const bWriteNoInputResultsToDB_InsteadOfTxtFile = True
Const DB_LOGID = "FEBMB24"

Const FirstYearWithData = 2017
Const FirstperiodWithData = 12

Sub Calculate()
    IntCurPeriodNum = HS.Period.Number()
    StrEntity = HS.entity.member()
    StrPeriod = Hs.Period.Member()
    StrScenario = HS.Scenario.member()
    StrValue = HS.Value.member()
    IntYear = HS.Year.member()
    bIsTransCurr = HS.Value.IsTransCur()
    bIsBase = HS.entity.Isbase("", "")
    strParent = HS.Parent.Member()
    strApp=HS.ApplicationName

    TrueScenario = StrScenario

    If CInt(intYear) < FirstYearWithData Then Exit Sub

    RLogger_Act = HS.GetCell("Y#2039.P#Dec.E#ADMIN_ENTITY.V#EUR.S#FORECAST.A#Activate_RulesLogging.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    rLoggerCounter = 0

    If HS.entity.Isbase("MACGREGOR", "") = True Then
        StrBA = "MACGREGOR"
    Else
        StrBA = "OTHER"
    End If

        ToBeSoldEntity = False

    If StrScenario = "BUDGET" or Left(StrScenario,8) = "FORECAST" or (StrScenario = "BUDGET_FORECAST" and CInt(IntYear) > 2013) Then
        EstimationScenario = True
    Else
        EstimationScenario = False
    End If

    CurrTime = Now()
    StrCurrFcstYear = CStr(Year(CurrTime))
    Str1stFcstPeriod = LZ(Month(CurrTime))
    StrCurrFcstYearAndPeriod = StrCurrFcstYear & Str1stFcstPeriod
    If StrApp = "TCARGOPREL" And StrScenario = "ACTUAL" And StrEntity = "[None]" And CInt(IntYear) = CInt(StrCurrFcstYear) And CInt(Str1stFcstPeriod) = GetPeriodNumber(StrPeriod) Then
        HS.Exp "A#FCST_CurrFcstYearAndPeriod.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = " & StrCurrFcstYearAndPeriod
    End If

    StrCurrFcstYearAndPeriod = HS.GetCell("E#ADMIN_ENTITY.Y#2039.P#Dec.S#FORECAST.V#EUR.A#FCST_CurrFcstYearAndPeriod.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
    StrCurrFcstYear = left(StrCurrFcstYearAndPeriod,4)
    Str1stFcstPeriod = right(StrCurrFcstYearAndPeriod,2)
    If left(Str1stFcstPeriod,1) = "0" then
        Str1stFcstPeriod = mid(Str1stFcstPeriod,2,1)
    End If

    If Left(StrScenario,8) = "FORECAST" Then
        If StrCurrFcstYearAndPeriod = "" or len(StrCurrFcstYearAndPeriod) <> 6 Then
            Err.raise -1, "Account: FCST_CurrFcstYearAndPeriod does not have valid value in S#FORECAST.Y#2039.P#Dec.E#ADMIN_ENTITY. Please call the CPM admin for update (Value should be e.g. 201403, yyyypp).", ""
        End If
    End If

    EntUD = GetUD(StrEntity, "Entity", "")

    GL_Ent = IsActiveGL(EntUD,IntYear,IntCurPeriodNum,TrueScenario)

    If GL_Ent = True Then LegalEntForStrEntity = GetLegalEntity(StrEntity, EntUD)

    SuperGLCalcActive = False
    SuperGL_Ent = False
    TaxGroupEntity = ""

    If IntCurPeriodNum Mod 3 = 0 Then
        bDoTaxNotesCalcs = True
        If (CInt(IntYear) = 2017 and CInt(IntCurPeriodNum) = 12) or CInt(IntYear) > 2017 Then
            SuperGLCalcActive = True
            TaxGroupEntity = GetTaxGroupEntity(StrEntity,bIsBase,IntYear,IntCurPeriodNum,TrueScenario)
            If TaxGroupEntity <> "" Then
                SuperGL_Ent = GetSuperGLinfo(EntUD,IntYear,IntCurPeriodNum,StrEntity,TrueScenario)
                If SuperGL_Ent = True Then
                    bDoTaxNotesCalcs = True
                Else
                    bDoTaxNotesCalcs = False
                End If
            End If
        End If
    End If

    bUseActualRules = CheckbUseActualRules(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,StrScenario)

    If CInt(IntYear) >= 2019 Then
        If StrValue = "<Entity Currency>" or bIsTransCurr = True or StrValue = "[Elimination]" then
            Disable_ClosedEntitySkip = HS.GetCell("Y#2039.P#Dec.E#ADMIN_ENTITY.V#EUR.S#FORECAST.A#Disable_ClosedEntitySkip.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
            If Disable_ClosedEntitySkip = 0 Then
                SkipCalcs = SkipCalculationsForClosedEntity(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,StrPeriod,IntYear,StrScenario,StrEntity,StrBA,StrValue,bUseActualRules)
                If StrEntity = "MACGREGOR_STRACQ" And StrApp = "TCARGOPREL" Then SkipCalcs = False
                If SkipCalcs = True Then Exit Sub
            End If
        End If
    End If

    Call CheckStrPrevScen(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,StrScenario,StrPrevScenYEnd,StrRolPrevScenCurP,StrRolPrevScenYEnd,StrPrevScenBEGBAL,StrEntity,StrBA,StrValue,StrCurrFcstYearAndPeriod)

    CalcOverride = HS.GetCell("E#ADMIN_ENTITY.Y#2039.P#Dec.S#FORECAST.V#EUR.A#ACTIVATE_CALCULATION_OVERRIDE.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
    If CInt(CalcOverride) = 1 Then CalcOverrideActive = True
    If CalcOverrideActive = True Then CalcOverrideActiveSections = HS.GetCellText("E#ADMIN_ENTITY.Y#2039.P#Dec.S#FORECAST.V#EUR.A#ACTIVATE_CALCULATION_OVERRIDE.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

    If bIsTransCurr = True And Instr(StrScenario, "FORECAST") > 0 Then Call CalcConstantFXRatedifferenceAccs(StrEntity,StrScenario,Str1stFcstPeriod)

    If bIsBase = True and Instr(StrScenario,"STRATEGY") > 0 and StrScenario <> "STRATEGY" Then
        IntStrategyYear = Right(StrScenario, 4)

        If Instr(UCase(StrEntity),"STRATEGY") = 0 and Instr(UCase(StrEntity),"STRACQ") = 0 and StrEntity <> "[None]" And CInt(IntYear) <> CInt(IntStrategyYear) Then Exit Sub
    End If

    If Instr(StrScenario,"STRATEGY") > 0 and StrScenario <> "STRATEGY" Then
        If StrPeriod <> "Dec" Or (StrPeriod <> "Mar" And StrPeriod <> "Jun" And StrPeriod <> "Sep" And StrPeriod <> "Dec" And CInt(IntStrategyYear) = 2020) Then Exit Sub
    End If

    If bIsBase = True and Instr(StrScenario,"STRATEGY") = 0 and (Instr(UCase(StrEntity),"STRATEGY") > 0 or Instr(UCase(StrEntity),"STRACQ") > 0) Then
        DoSkip = False

        If UCase(StrEntity) <> "MACGREGOR_STRACQ" Or UCase(StrScenario) <> "ACTUAL" Or IntYear < 2021 Then DoSkip = True

        If DoSkip = True Then Exit Sub
    End If

    Call WriteDataBehindNoInput(StrScenario,StrPeriod,StrEntity,IntYear,bIsBase,StrValue,strApp)

    If StrValue = "[None]" And StrEntity = "[None]" Then
        Call WriteBaseMemberIDsIntoFile()

        bCOPY_DATA_AND_SOURCE_SCENARIO = CopyScenarioFlagON(StrEntity,StrScenario,bUseActualRules,StrPeriod)

        DO_COPY = left(bCOPY_DATA_AND_SOURCE_SCENARIO,InStr(bCOPY_DATA_AND_SOURCE_SCENARIO, "-")-1)
        SourceScenario = mid(bCOPY_DATA_AND_SOURCE_SCENARIO,InStr(bCOPY_DATA_AND_SOURCE_SCENARIO,"-")+1,len(bCOPY_DATA_AND_SOURCE_SCENARIO)-5)

        If DO_COPY = "True" Then Call CopyDataBetweenScenarios(StrScenario,StrPeriod,StrEntity,IntYear,bCOPY_DATA_AND_SOURCE_SCENARIO,bUseActualRules,bIsBase,Str1stFcstPeriod,StrCurrFcstYear,StrBA)

        If StrScenario = "BUDGET_ACTRATE" or StrScenario = "ACTUALFCST_PREVYRATE" or Instr(StrScenario,"STRATEGY") > 0  Then

        ElseIf DO_COPY = "True" and Ucase(SourceScenario) <> "ACTUAL" Then
            Exit Sub

        End If

        If StrScenario = "ACTUAL" Then Call SpecifyActualPeriodWithData(StrPeriod, IntYear)

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
            Call Copy_ACQandDIS_RatesForward(IntYear,StrPeriod)
            Call WritePeriodNumber(IntCurPeriodNum, StrScenario)
            Call OpeningRateCalc(StrScenario, StrPeriod, IntYear)

            Call CalculateRatesForScenarios(StrScenario, StrPeriod)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call RollValTolerancesForward(IntYear,StrScenario)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call ClearGeneralOverride()
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If StrScenario = "BUDGET_ACTRATE" Then Call LastCalcTime(StrScenario, IntYear)

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("6",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" And bIsBase = True Then

        bCOPY_DATA_AND_SOURCE_SCENARIO = CopyScenarioFlagON(StrEntity,StrScenario,bUseActualRules,StrPeriod)
        DO_COPY = left(bCOPY_DATA_AND_SOURCE_SCENARIO,InStr(bCOPY_DATA_AND_SOURCE_SCENARIO, "-")-1)
        SourceScenario = mid(bCOPY_DATA_AND_SOURCE_SCENARIO,InStr(bCOPY_DATA_AND_SOURCE_SCENARIO,"-")+1,len(bCOPY_DATA_AND_SOURCE_SCENARIO)-5)

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        If DO_COPY = "True" Then Call CopyDataBetweenScenarios(StrScenario,StrPeriod,StrEntity,IntYear,bCOPY_DATA_AND_SOURCE_SCENARIO,bUseActualRules,bIsBase,Str1stFcstPeriod,StrCurrFcstYear,StrBA)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If StrScenario = "BUDGET_ACTRATE" or StrScenario = "ACTUALFCST_PREVYRATE" or Instr(StrScenario,"STRATEGY") > 0 Then

        ElseIf DO_COPY = "True" and Ucase(SourceScenario) <> "ACTUAL" Then
            Exit Sub
        End If
    End If

    If (StrValue = "<Entity Currency>" And bIsBase = True) Or StrValue = "[Elimination]" Then

        If SkipCalcsForHistPeriodsForStoredFCST(IntYear,StrScenario,StrCurrFcstYear,Str1stFcstPeriod) = True Then Exit Sub
    End If

    If StrValue = "<Entity Currency>" And bIsBase = True Then

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call TBC_EntitiesCopy(StrEntity,StrScenario,StrPeriod,IntYear,IntCurPeriodNum)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer

        Call Copy_ACQandDIS_Balances(StrEntity, IntYear, StrPeriod, StrPrevScenBEGBAL,bUseActualRules,EstimationScenario,IntCurPeriodNum)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        If Ucase(StrScenario) = "ACTUAL" Then Call EntIsBaseCheckForReporting(bIsBase,IntYear)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        If Ucase(StrScenario) = "ACTUAL" Or Ucase(StrScenario) = "FORECAST" Then Call MoveDataFrom_LOAD_to_INP(StrEntity,IntYear,strApp,StrScenario)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call Copy_SAP_ControlInfo(StrEntity,StrScenario,IntYear)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer

            Call C2_Inp_Calculations(StrBA,EstimationScenario,bUseActualRules,StrEntity,StrScenario)

        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If EstimationScenario = True Then
            If bUseActualRules = False Then
                If RLogger_Act = 1 then rLoggerTimerStart = Timer
                Call EstimationCalculationsBase(StrBA, StrEntity, StrPeriod,StrScenario,StrPrevScenYEnd,IntYear,IntCurPeriodNum,StrCurrFcstYear,Str1stFcstPeriod,strParent,StrValue,bIsBase,RLogger_Act,strApp)
                If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
            End If
        End If

        If RLogger_Act = 1 then rLoggerTimerStart = Timer

        Call AllBaseEntAllScenarios(StrPrevScenYEnd, StrBA, StrScenario, bUseActualRules, IntYear,StrPrevScenBEGBAL,IntCurPeriodNum,GL_Ent,LegalEntForStrEntity,StrEntity,StrValue,bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,StrApp)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call InternalInventoryCalcs(StrBA, StrEntity, StrScenario, IntYear, StrPeriod, StrCurrFcstYear)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call ImpactStatusCalc(StrBA,StrEntity,StrPeriod,StrScenario,IntYear,IntCurPeriodNum,StrCurrFcstYear,Str1stFcstPeriod,bUseActualRules,TrueScenario)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("7",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If (bIsBase = True And StrValue = "<Entity Currency>") Or StrValue = "[Elimination]" Then

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call MonthlyNotes(StrPrevScenYEnd,IntCurPeriodNum, IntYear, bIsBase, StrEntity, LegalEntForStrEntity, GL_Ent)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer

            Call CashFlowBaseEntityandELIM(StrScenario,StrPrevScenYEnd,EstimationScenario,bUseActualRules,StrPeriod, IntYear, IntCurPeriodNum,ToBeSoldEntity,StrCurrFcstYear,Str1stFcstPeriod, StrEntity)

        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("8",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" And StrBA = "MACGREGOR" Then

        If EstimationScenario = False Then
            HS.Clear "A#GORT"
            HS.Exp "A#GORT = A#GPORTE"
        End If

        HS.Clear "A#GOBT"
        HS.Exp "A#GOBT = A#GPOBTE"

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("9",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" Or StrValue = "[Elimination]" Then

            Call CashFlowEntityCurrencyAndElim(StrPrevScenYEnd,ToBeSoldEntity,StrScenario,IntYear)

        If bIsBase = TRUE and StrValue = "<Entity Currency>" Then
            sEntCountryCode = GetUD(StrEntity, "Entity", "Countrycode")
            If sEntCountryCode = "" Then sEntCountryCode = "NO_COUNTRY"
            HS.Exp "A#RM28_C.C2#" & sEntCountryCode & ".C3#INP = A#RM28.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
            HS.Exp "A#A301_C.C2#" & sEntCountryCode & ".C3#INP = A#A301.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
        End If

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("10",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" Then

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        If bIsBase = False Then Call CopyDataBetweenScenarios(StrScenario,StrPeriod,StrEntity,IntYear,bCOPY_DATA_AND_SOURCE_SCENARIO,bUseActualRules,bIsBase,Str1stFcstPeriod,StrCurrFcstYear,StrBA)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call EstimationCalculationsAllLevels(StrPeriod,StrEntity,StrPrevScenYEnd,bIsBase,IntYear,StrScenario,Str1stFcstPeriod,StrCurrFcstYear, EstimationScenario, bUseActualRules, IntCurPeriodNum)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call KeyFigures(StrPrevScenYEnd,StrRolPrevScenYEnd,StrRolPrevScenCurP,StrScenario,IntCurPeriodNum,StrPeriod,IntYear,StrCurrFcstYear,Str1stFcstPeriod,bIsBase,bUseActualRules,StrBA,StrEntity)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call LastCalcTime(StrScenario, IntYear)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("11",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" Or bIsTransCurr = True Then
        If CInt(IntYear) >= 2018 And StrScenario = "ACTUAL" Then

            HS.Exp "A#A495vsL495.I#[ICP None].C1#[None].C4#[None] = A#A495.I#[ICP Top].C1#CUSTOM1_TOP.C4#CUSTOM4_TOP - A#L495.I#[ICP Top].C1#CUSTOM1_TOP.C4#CUSTOM4_TOP"
        End If

        HS.Exp "A#A495vsL495.C2#[None]=A#A495.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP-A#L495.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call Capex (StrPrevScenYEnd,IntYear,StrScenario)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call RollingCalculations(bUseActualRules,StrEntity,StrScenario,StrPeriod,StrRolPrevScenCurP,StrPrevScenYEnd,Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,strApp, StrBA)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("12",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If (UCase(StrScenario) = "ACTUAL" or UCase(StrScenario) = "ACTUALFCST_PREVYRATE") Then

        If RLogger_Act = 1 then rLoggerTimerStart = Timer
            Call NoteCalcs(StrScenario, StrPrevScenBEGBAL, StrPrevScenYEnd, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase, TaxGroupEntity, SuperGLCalcActive, bDoTaxNotesCalcs, bIsTransCurr,StrApp)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("13",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" And Ucase(StrScenario) = "ACTUAL" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer

        Call Calculate_secondYear_ACQ(IntYear)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If StrValue = "<Entity Currency>" And Ucase(StrScenario) = "ACTUAL" And bIsBase = True And StrEntity <> "[None]" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call ACQCalc(IntYear,StrPeriod,IntCurPeriodNum,StrEntity,GL_Ent,LegalEntForStrEntity,StrBA,StrCurrFcstYear,FirstYearWithData,strApp)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsTransCurr = True And Ucase(StrScenario) = "ACTUAL" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call ACQClear()
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsBase = True And StrEntity <> "[None]" And (Ucase(StrScenario) = "ACTUAL" Or EstimationScenario = True) And StrValue = "<Entity Currency>" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call PostACQCTACalc(IntYear,StrPeriod,StrEntity,StrPrevScenBEGBAL,strApp,StrPrevScenYEnd,FirstYearWithData,IntCurPeriodNum,LegalEntForStrEntity,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,GL_Ent,TrueScenario)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsBase = True And StrEntity <> "[None]" And bUseActualRules = True And StrValue = "<Entity Currency>" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call PostACQNCICalc(IntYear,StrPeriod,StrEntity,StrPrevScenBEGBAL,strApp,FirstYearWithData)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If StrValue = "<Entity Currency>" And Ucase(StrScenario) = "FORECAST" And bIsBase = True And StrEntity <> "[None]" And UCase(StrEntity) <> "ADMIN_ENTITY" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call ACQCalcForecast(StrCurrFcstYearAndPeriod,StrCurrFcstYear,Str1stFcstPeriod,bUseActualRules,IntYear,strApp,IntCurPeriodNum)
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If StrValue = "[Elimination]" Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        Call StoreValidationErrorCountersComingFromChildren()
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If StrValue = "<Entity Currency>" Then
        If IntYear > FirstYearWithData Then
            If RLogger_Act = 1 then rLoggerTimerStart = Timer
            Call Validations(StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,strApp,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,RLogger_Act,strParent,StrValue,StrPrevScenBEGBAL)
            If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If

        If CalcOverrideActive = True Then Call CalcOverrideCalcs("14",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" and bIsBase = True Then
        If RLogger_Act = 1 then rLoggerTimerStart = Timer
        If EstimationScenario = True Then Call ClearZeros("=",0,"Periodic")
        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    OverrideAll = HS.GetCell("A#ValGeneralOverride.E#[None].V#EUR.C3#ValByPass.C4#[None]")
    OverrideEntity = HS.GetCell("A#ValEntityOverride.C3#ValByPass.C4#[None]")

    If OverrideAll = 1 or OverrideEntity = 1 Then
        HS.Exp "A#ClearVal_Ph1 = -1 * A#ValErrCounter_Ph1"
        HS.Exp "A#ClearVal_Ph2 = -1 * A#ValErrCounter_Ph2"
    End If

    If StrValue = "<Entity Currency>" Then
        If CalcOverrideActive = True Then Call CalcOverrideCalcs("15",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" Or bIsTransCurr = True Then
        If CalcOverrideActive = True Then Call CalcOverrideCalcs("16",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If bIsBase = True And StrValue = "<Entity Currency>" Then
        If CalcOverrideActive = True Then Call CalcOverrideCalcs("17",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If (bIsBase = True And StrValue = "<Entity Currency>") Or StrValue = "[Elimination]" Then
        If CalcOverrideActive = True Then Call CalcOverrideCalcs("18",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

    If StrValue = "<Entity Currency>" Or StrValue = "[Elimination]" Or bIsTransCurr = True Then
        If CalcOverrideActive = True Then Call CalcOverrideCalcs("19",StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)
    End If

End Sub

Sub PostACQCTACalc(IntYear,StrPeriod,StrEntity,StrPrevScenBEGBAL,strApp,StrPrevScenYEnd,FirstYearWithData,IntCurPeriodNum,LegalEntForStrEntity,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,GL_Ent,TrueScenario)

    ENT_CURRENCY = Hs.Entity.DefCurrency(StrEntity)
    DeActivate = HS.GetCell("V#EUR.E#ADMIN_ENTITY.A#DeActivate_PostACQ_CTACalc.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None].P#Dec.Y#2039")
    iStopCode = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#ACQTOT")

    END_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#END_RATES")
    AVG_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#AVG_RATES")
    PRE_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#PRE_RATES")
    END_RATE_ENT_RE_TEMP = 0

    Set DataUnit=HS.OpenDataUnitSorted("A#ACQ_STOP.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]","Custom4","Ascending")
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If dData = 1 Then
            END_RATE_ENT_RE_TEMP = Hs.GetCell("A#ACQ_DOA_RATE_INP.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
        End If
    Next

    If END_RATE_ENT_RE_TEMP = 0 And END_RATE_ENT_TEMP <> 0 Then
        END_RATE_ENT_RE_TEMP = 1 / END_RATE_ENT_TEMP
    End If

    If END_RATE_ENT_TEMP <> 0 Then
        END_RATE_ENT = 1 / END_RATE_ENT_TEMP
    Else
        END_RATE_ENT = 1
    End If
    If AVG_RATE_ENT_TEMP <> 0 Then
        AVG_RATE_ENT = 1 / AVG_RATE_ENT_TEMP
    Else
        AVG_RATE_ENT = 1
    End If
    If PRE_RATE_ENT_TEMP <> 0 Then
        PRE_RATE_ENT = 1 / PRE_RATE_ENT_TEMP
    Else
        PRE_RATE_ENT = 1
    End If
    If END_RATE_ENT_RE_TEMP <> 0 Then
        END_RATE_ENT_RE = END_RATE_ENT_RE_TEMP
    Else
        END_RATE_ENT_RE = 1
    End If

    iREStartYear = 2020
    iRECalcOpeningBalances = 2019

    If iREStartYear < CInt(FirstYearWithData) Then
        iREStartYear = CInt(FirstYearWithData)
    End If
    If iRECalcOpeningBalances < CInt(FirstYearWithData) Then
        iRECalcOpeningBalances = CInt(FirstYearWithData)
    End If

    sSrcDimC1C3 = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sDestDimC1C3None = ".I#[ICP None].C1#[None].C3#INP.C4#[None]"

    sSrcDimC1 = ".I#[ICP Top].C1#CUSTOM1_TOP.C4#CUSTOM4_TOP"
    sDestDimC1None = ".I#[ICP None].C1#[None].C4#[None]"

    sSrcDim = ".I#[ICP Top].C4#CUSTOM4_TOP"
    sDestDimC3None = ".I#[ICP None].C3#INP.C4#[None]"

    If DeActivate = 0 And UCase(ENT_CURRENCY) <> "EUR" Then

        sRL = HS.ReviewStatusUsingPhaseID("",1)
        If (sRL = "Review Level 2" Or sRL = "Review Level 8") And UCase(StrPeriod) <> "JAN" Then

            Set MyCellTextUnit = HS.OpenCellTextUnit("A#L165_EUR.C2#POST_ACQ_CTA_ADJ.P#PRIOR", "[Default]", "Account", "Ascending")
            NumItems= MyCellTextUnit.GetNumItems
            For i = 0 to NumItems - 1
                A = MyCellTextUnit.Item(i).Account
                sI = MyCellTextUnit.Item(i).ICP
                sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                sC4 = MyCellTextUnit.Item(i).Custom("Custom4")
                CellText = MyCellTextUnit.Item(i).CellText

                If HS.ContainsCellText("A#L165_EUR"&".I#"&sI & ".C1#" & sC1 & ".C2#POST_ACQ_CTA_ADJ.C3#"&sC3&".C4#"&sC4) = False then
                    HS.SetCellTextWithLabel "A#"&A&".I#"&sI&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&"", "[Default]",CellText
                End If
            Next
        End If

        If Cint(IntYear) >= iREStartYear Then
            For Each sC2Member In Hs.Custom2.List("POST_ACQ_CTA","[Base]")
                If Instr(GetUD(sC2Member, "Custom2", ""),"/Calc/") <> 0 Then
                    Hs.Clear "C2#" & sC2Member
                End If
            Next
        End If

        Hs.Clear "A#L135_EUR"

        If Cint(IntYear) > 2021 Or (Cint(IntYear) = 2021 And UCase(StrPeriod) = "DEC") Then
            Hs.Clear "A#L178_EUR"
        End If

        If Cint(IntYear) = iRECalcOpeningBalances And UCase(StrPeriod) = "DEC" Then
            For Each sC2Member In Hs.Custom2.List("POST_ACQ_CTA","[Base]")
                If Instr(GetUD(sC2Member, "custom2", ""),"/Calc/") <> 0 Then
                    Hs.Clear "A#L165_EUR.C2#" & sC2Member
                End If
            Next
            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_OPE" & sDestDimC3None & " = A#L165.C2#EQUITY" & sSrcDim & ".C3#BEGBALtot"  & " / " & END_RATE_ENT
            Hs.Exp "A#L178_EUR.C2#[None]" & sDestDimC1C3None & " = A#L178.C2#CUSTOM2_TOP" & sSrcDimC1 & ".C3#BEGBALtot"  & " / " & AVG_RATE_ENT
        End If

        If Cint(IntYear) >= iREStartYear Then
            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_OPE" & sDestDimC1C3None & " = A#RE_EUR.C2#CUSTOM2_TOP" & sSrcDimC1 & "." & StrPrevScenBEGBAL

            If CInt(IntYear) <> iREStartYear Then
                Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_BEGBALADJ" & sDestDimC1C3None & " = A#L165.C2#CUSTOM2_TOP.C3#BEGBALadj_Total" & sSrcDimC1 & "." & StrPrevScenYEnd & " / " & PRE_RATE_ENT
            End If
            Hs.Exp "A#L178_EUR.C2#[None]" & sDestDimC1None & " = A#L178.C2#CUSTOM2_TOP" & sSrcDimC1 & " / " & AVG_RATE_ENT

            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_CHNG" & sDestDimC1None & " = A#L165.C2#EQ_CHNG" & sSrcDimC1 & " / " & END_RATE_ENT_RE

            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_FX_INP" & sDestDimC1None & " = A#L165.C2#EQ_FX_INP" & sSrcDimC1 & " / " & END_RATE_ENT_RE
            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_SBP" & sDestDimC1None & " = A#L165.C2#RET_SBP" & sSrcDimC1 & " / " & END_RATE_ENT_RE
            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_DPI.C1#[None].C4#[None] = A#L165.C2#RET_DPI.C1#CUSTOM1_TOP.C4#CUSTOM4_TOP / " & END_RATE_ENT_RE
            Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_DPE" & sDestDimC1None & " = A#L165.C2#RET_DPE" & sSrcDimC1 & " / " & END_RATE_ENT_RE

            Hs.Exp "A#L135_EUR.C2#CTA_AVG" & sDestDimC1None & " = A#L178.C2#CUSTOM2_TOP" & sSrcDimC1 & " / " & END_RATE_ENT & " - A#L178_EUR.C2#Custom2_TOP" & sSrcDimC1

            If Cint(IntYear) >= 2021 Then
                Hs.Exp "A#L135_EUR.C2#CTA_RE" & sDestDimC1None & " = A#L165.C2#CUSTOM2_TOP" & sSrcDimC1 & " / " & END_RATE_ENT & " - A#L165_EUR.C2#POST_ACQ_CTA_wo_DISP" & sSrcDimC1 & " + A#L165_EUR.C2#POST_ACQ_CTA_ADJ" & sSrcDimC1
            Else
                Hs.Exp "A#L135_EUR.C2#CTA_RE" & sDestDimC1None & " = A#L165.C2#CUSTOM2_TOP" & sSrcDimC1 & " / " & END_RATE_ENT & " - A#L165_EUR.C2#POST_ACQ_CTA_wo_DISP" & sSrcDimC1
            End If

            dInvalidBegalData = Hs.GetCell("A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#BegbalAdj.C4#CUSTOM4_TOP")
            If dInvalidBegalData <> 0 Then
                For Each sCustom2 In Array ("POST_ACQ_CTA_OPE","POST_ACQ_CTA_CHNG","POST_ACQ_CTA_FX_INP","POST_ACQ_CTA_SBP","POST_ACQ_CTA_DPI","POST_ACQ_CTA_DPE")
                    Hs.Clear "A#L165_EUR.C2#" & sCustom2 & ".C3#begbalAdj"
                Next
                Hs.Clear "A#L135_EUR.C2#CTA_RE.C3#begbalAdj"
            End If

            If iStopCode = 1 Then

                If Cint(IntYear) > 2024 Or (Cint(IntYear) = 2024 And CInt(IntCurPeriodNum) > 7) Then
                    Hs.Exp "A#L135_EUR.C2#CTA_ACQ" & sDestDimC1None & " = - 1 * (A#L135_EUR.C2#CTA_RE" & sSrcDimC1 & " + A#L135_EUR.C2#CTA_AVG" & sSrcDimC1 & ")"
                ElseIf Cint(IntYear) >= 2021 Then
                    Hs.Exp "A#L135_EUR.C2#CTA_ACQ" & sDestDimC1None & " = - 1 * (A#L135_EUR.C2#CTA_RE" & sSrcDimC1 & " + A#L135_EUR.C2#CTA_AVG" & sSrcDimC1 & " + A#L165_EUR.C2#POST_ACQ_CTA_ADJ" & sSrcDimC1 & ")"
                Else
                    Hs.Exp "A#L135_EUR.C2#CTA_ACQ" & sDestDimC1None & " = - 1 * (A#L135_EUR.C2#CTA_RE" & sSrcDimC1 & " + A#L135_EUR.C2#CTA_AVG" & sSrcDimC1 & ")"
                End If

                If Cint(IntYear) > 2024 Or (Cint(IntYear) = 2024 And CInt(IntCurPeriodNum) > 7) Then
                    Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_DISP" & sDestDimC1None & " = - 1 * (A#L135_EUR.C2#CTA_ACQ" & sSrcDimC1 & " + A#L165_EUR.C2#POST_ACQ_CTA_ADJ" & sSrcDimC1 & ")"
                Else
                    Hs.Exp "A#L165_EUR.C2#POST_ACQ_CTA_DISP" & sDestDimC1None & " = - 1 * A#L135_EUR.C2#CTA_ACQ" & sSrcDimC1
                End If
            ElseIf Cint(IntYear) >= 2021 Then
                Hs.Exp "A#L135_EUR.C2#CTA_ACQ" & sDestDimC1None & " = - 1 * A#L165_EUR.C2#POST_ACQ_CTA_ADJ" & sSrcDimC1
            End If

        End If
    End If

    ActiveMbr = True
    UD = GetUD(StrEntity, "Entity", "CloseStartDate")
    If UD = "" Then
        ActiveMbr = True
    Else
        UD_Year = Right(UD,4)
        If CInt(UD_Year) < CInt(IntYear) Then
            ActiveMbr = False
        Else
            ActiveMbr = True
        End If
    End If
    bDoCalc = False

    If UCase(TrueScenario) = "NORSU_ACTUAL" And (CInt(IntYear) > 2021 Or (CInt(IntYear) = 2021 And CInt(IntCurPeriodNum) > 11)) Then
        bDoCalc = True
    ElseIf CInt(IntYear) > 2022 Or (CInt(IntYear) = 2022 And CInt(IntCurPeriodNum) > 10) Then
        bDoCalc = True
    End If

    bIsICP = HS.Entity.IsICP(StrEntity)

    If DeActivate = 0  or DeActivate = 2 Then
        For Each sAcc In Hs.Account.List("DIV_ELIM_EUR","[Base]")
            Hs.Clear "A#" & sAcc
        Next
    End If

    If DeActivate = 0 And bDoCalc = True And ActiveMbr = True And bIsICP = True Then
        dOwnerData_RET_DPI = 0
        Set DataUnit=HS.OpenDataUnit("A#L165.C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            If dData <> 0 Then

                sICP_CURRENCY = Hs.Entity.DefCurrency(StrICP)
                dICP_AVG_RATE = 1
                If sICP_CURRENCY <> "EUR" Then
                    dICP_AVG_RATE = Hs.GetRate("V#" & sICP_CURRENCY & ".A#AVG_RATES") * AVG_RATE_ENT
                End If
                dICP_END_RATE = 1
                If sICP_CURRENCY <> "EUR" Then
                    dICP_END_RATE = Hs.GetRate("V#" & sICP_CURRENCY & ".A#END_RATES") * END_RATE_ENT
                End If

                dOwnerData = Hs.GetCell("E#" & StrICP & ".A#R842I.I#" & StrEntity & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.V#" & sICP_CURRENCY)
                If dICP_END_RATE <> 0 Then

                    dOwnerData_RET_DPI = dOwnerData_RET_DPI + Hs.GetCell("E#" & StrICP & ".A#L165.I#" & StrEntity & ".C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.V#" & sICP_CURRENCY) / dICP_END_RATE / 2
                End If
                If dICP_AVG_RATE <> 0 Then
                    Call HS.SetDataWithPOV("A#R842I_EUR_DIV.I#" & StrEntity & ".C1#[None].C2#[None].C3#ACQ.C4#[None]", -dOwnerData / dICP_AVG_RATE, True)
                End If

                If Cint(IntYear) >= 2024 And CInt(IntCurPeriodNum) > 7 Then
                    Hs.Exp "A#L165_EUR_DIV.I#" & StrICP & ".C1#[None].C2#RET_DPI.C3#ACQ.C4#[None] = -1 * A#L165.I#" & StrICP & ".C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP / " & END_RATE_ENT_RE
                Else
                    Hs.Exp "A#L165_EUR_DIV.I#" & StrICP & ".C1#[None].C2#RET_DPI.C3#ACQ.C4#[None] = -1 * A#L165.I#" & StrICP & ".C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP / " & END_RATE_ENT
                End If
            End If
        Next

        Hs.Exp "A#L178_EUR_DIV.I#[ICP None].C1#[None].C2#[None].C3#ACQ.C4#[None] = A#R842I_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"

        If iStopCode = 1 Then
            Hs.Exp "A#L165_EUR_DIV.I#[ICP None].C1#[None].C2#RET_CTA.C3#ACQ.C4#[None] = A#L165_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                    " - A#R842I_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                    " + A#L135_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL

            Hs.Exp "A#L135_EUR_DIV.I#[ICP None].C1#[None].C2#CTA_DIV.C3#ACQ.C4#[None] = A#L165_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                    " - A#R842I_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                    " + A#L135_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & _
                                                                                    " + A#L135_EUR_DIV_ADJ.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
            Hs.Exp "A#L135_EUR_DIV.I#[ICP None].C1#[None].C2#CTA_ACQ.C3#ACQ.C4#[None] = -1 * (A#L165_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                        " - A#R842I_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                        " + A#L135_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & _
                                                                                        " + A#L135_EUR_DIV_ADJ.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP)"
            If dOwnerData_RET_DPI <> 0 Then
                Call HS.SetDataWithPOV("A#L135_EUR_DIV.I#[ICP None].C1#[None].C2#CTA_DIV.C3#ACQ.C4#[None]", -dOwnerData_RET_DPI, True)
                Call HS.SetDataWithPOV("A#L135_EUR_DIV.I#[ICP None].C1#[None].C2#CTA_ACQ.C3#ACQ.C4#[None]", dOwnerData_RET_DPI, True)
            End If
        Else
            Hs.Exp "A#L135_EUR_DIV.I#[ICP None].C1#[None].C2#CTA_DIV.C3#ACQ.C4#[None] = A#L165_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPI.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                    " - A#R842I_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & _
                                                                                    " + A#L135_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & _
                                                                                    " + A#L135_EUR_DIV_ADJ.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
            If dOwnerData_RET_DPI <> 0 Then
                Call HS.SetDataWithPOV("A#L135_EUR_DIV.I#[ICP None].C1#[None].C2#CTA_DIV.C3#ACQ.C4#[None]", -dOwnerData_RET_DPI, True)
            End If
            Hs.Exp "A#L165_EUR_DIV.I#[ICP None].C1#[None].C2#RET_CTA.C3#ACQ.C4#[None] = -1 * A#L135_EUR_DIV_ADJ.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
        End If

        Hs.Exp "A#L165_EUR_DIV.I#[ICP None].C1#[None].C2#EQ_OPE.C3#ACQ.C4#[None] = -1 * A#L135_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL

        If bDoTaxNotesCalcs = True And IntCurPeriodNum Mod 3 = 0 And GL_Ent = True Then
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                sTaxGroupOrLegalEntity = TaxGroupEntity
            Else
                sTaxGroupOrLegalEntity = LegalEntForStrEntity
            End If

            dR842I = SumLegalBasesToGLEnt("A#R842I.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)
            dLTR_CURTAX = HS.GetCell("A#LTR_CURTAX.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP")
            sSign = ""
            dMultiplier = 1

            If IntYear < 2024 Then
                aDestAccounts = Array("N3B_3025_EUR_DIV","N3B_R901_EUR_DIV","N3B_3030_EUR_DIV","N3B_3610_EUR_DIV","N3B_3635_EUR_DIV","NT2_R90_EUR_DIV","NT2_470_ME_EUR_DIV","NT2_233_EUR_DIV","NT2_410_EUR_DIV")
            Else
                aDestAccounts = Array("NT2_R90_EUR_DIV","NT2_470_ME_EUR_DIV","NT2_233_EUR_DIV","NT2_410_EUR_DIV")
            End If
            For Each sAcc In aDestAccounts
                If sAcc = "N3B_3635_EUR_DIV" Or sAcc = "N3B_R901_EUR_DIV" Or sAcc = "NT2_R90_EUR_DIV" Or sAcc = "NT2_470_ME_EUR_DIV" Or sAcc = "N3B_3025_EUR_DIV" Then
                    sSign = "-"
                Else
                    sSign = ""
                End If
                If sAcc = "N3B_3610_EUR_DIV" Or sAcc = "NT2_410_EUR_DIV" Then

                    dMultiplier = 20 / 100
                ElseIf sAcc = "N3B_3635_EUR_DIV" Or sAcc = "NT2_470_ME_EUR_DIV" Then
                    dMultiplier = dLTR_CURTAX / 100
                Else
                    dMultiplier = 1
                End If
                If dR842I <> 0 And dMultiplier <> 0 Then
                    Hs.Exp "A#" & sAcc & ".I#[ICP None].C1#[None].C2#[None].C3#ACQ.C4#[None] = " & sSign & dMultiplier & " * " & dR842I & " / " & AVG_RATE_ENT
                End If
            Next
            Hs.Exp "A#NT2_420_EUR_DIV.I#[ICP None].C1#[None].C2#[None].C3#ACQ.C4#[None] = -A#NT2_410_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP - A#NT2_470_ME_EUR_DIV.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
        End If
    End If

End Sub

Sub ACQClear()
    For Each acc in Hs.Account.List("ACQ_C2_FINAL","[Base]")
        aAccParts = Split(acc,"_")

        If acc = "ACQELIMTOT_EUR_N3C_5082L_FINAL" Then
            Hs.Clear "A#" & acc & ".C2#TAX_AVGEND"
        ElseIf Left(aAccParts(2),3) = "N05" Or Left(aAccParts(2),3) = "N06" Or Left(aAccParts(2),3) = "JJM" Then
            Hs.Clear "A#" & acc & ".C2#D_ERD"
            Hs.Clear "A#" & acc & ".C2#A_ERD"
            Hs.Clear "A#" & acc & ".C2#A_AVGEND"
            Hs.Clear "A#" & acc & ".C2#D_AVGEND"
        End If
    Next
End Sub

Function getACQStopPeriod(FirstYearWithData)
    sClosPeriod = ""
    Set DataUnit=HS.OpenDataUnitSorted("A#ACQ_STOP.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]","Custom4","Ascending")
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If dData = 1 Then
            iClosPeriodNum = Round(Hs.GetCell("A#ACQ_MONTH.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]"))
            iClosYearNum = Round(Hs.GetCell("A#ACQ_YEAR.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]"))
            If iClosPeriodNum > 0 And iClosPeriodNum < 13 And iClosYearNum >= FirstYearWithData And iClosYearNum < 2040 And iClosYearNum > 2010 Then
                sClosPeriod = ".P#" & GetPeriodLabel(iClosPeriodNum) & ".Y#" & iClosYearNum
            End If
        End If
    Next
    getACQStopPeriod = sClosPeriod
    End Function

    Sub ACQCalcForecast(StrCurrFcstYearAndPeriod,StrCurrFcstYear,Str1stFcstPeriod,bUseActualRules,IntYear,strApp,IntCurPeriodNum)

    If CInt(IntYear) > 2019 And bUseActualRules = False Then
        aAllACQAccounts = HS.Account.List("ACQ_ACCOUNTS", "[Base]")
        For Each acc In aAllACQAccounts
            If Instr(GetUD(acc, "Account", ""),"/Calc/") > 0 Then
                Hs.Clear "A#" & acc
            End If
        Next
    End If

    DeActivate = HS.GetCell("V#EUR.E#ADMIN_ENTITY.A#DeActivate_ACQCalc_FCST.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None].Y#2039.P#DEC")

    If CInt(IntYear) > 2019 And DeActivate = 0 And bUseActualRules = False Then
        sSrcDimC2C3 = ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP"
        sDestDimC2C3None = ".I#[ICP None].C2#[None].C3#INP"

        END_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#END_RATES" & sClosPeriod)
        AVG_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#AVG_RATES" & sClosPeriod)
        PRE_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#PRE_RATES" & sClosPeriod)

        If END_RATE_ENT_TEMP <> 0 Then
            END_RATE_ENT = 1 / END_RATE_ENT_TEMP
        Else
            END_RATE_ENT = 1
        End If
        If AVG_RATE_ENT_TEMP <> 0 Then
            AVG_RATE_ENT = 1 / AVG_RATE_ENT_TEMP
        Else
            AVG_RATE_ENT = 1
        End If
        If PRE_RATE_ENT_TEMP <> 0 Then
            PRE_RATE_ENT = 1 / PRE_RATE_ENT_TEMP
        Else
            PRE_RATE_ENT = 1
        End If

        If CInt(Str1stFcstPeriod) = 1 Then
            iReportingYear = CInt(StrCurrFcstYear) - 1
            sActiveReportingPeriod = "Dec"
            iActiveReportingPeriodNo = 12
        Else
            iReportingYear = CInt(StrCurrFcstYear)
            sActiveReportingPeriodNo = CInt(Str1stFcstPeriod) - 1
            iActiveReportingPeriod = GetPeriodLabel(ActiveReportingPeriodNo)
        End If

        aSources =        Array("A115a","A115b","A115c","A115d","A125","A218")
        aDestinations = Array("RM53","RM51","RM51","RM51","RM55","RM32")

        If CInt(StrCurrFcstYear) = CInt(IntYear) And CInt(Str1stFcstPeriod) = CInt(IntCurPeriodNum) Then
            iStopCode = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#ACQTOT.S#ACTUAL.P#PRIOR")
            If iStopCode = 0 Then
                Set DataUnit=HS.OpenDataUnit("A{ACQELIMTOT_EUR_PPA_TOTAL.[Base]}.I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4{ACQ_TIMES_TECH.[Base]}.S#ACTUAL.P#PRIOR")
                NumItems = DataUnit.GetNumItems
                For j = 0 To NumItems - 1
                    Call DataUnit.GetItem(j, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                    aAccParts = Split(StrAccount,"_")
                    sBSAcc = aAccParts(UBound(aAccParts))
                    If dData <> 0 And sBSAcc <> "A115e" And sBSAcc <> "A122" Then
                        dMonthlyDepr = HS.GetCell("A#ACQ_PPAD_MON_AMT_LC_" & sBSAcc & ".I#[ICP Top].C1#" & StrC1 & ".C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4 & ".S#ACTUAL.P#PRIOR")

                        For k = Lbound(aSources) To Ubound(aSources)
                            If UCase(aSources(k)) = UCase(sBSAcc) Then
                                If ABS(dMonthlyDepr / END_RATE_ENT) > ABS(dData) Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4 & ".W#Periodic", -dData / AVG_RATE_ENT * END_RATE_ENT, True)
                                Else
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4 & ".W#Periodic", dMonthlyDepr / AVG_RATE_ENT, True)
                                    Call HS.SetDataWithPOV("A#" & StrAccount & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4, dData + dMonthlyDepr / AVG_RATE_ENT, True)
                                    Call HS.SetDataWithPOV("A#ACQ_PPAD_MON_AMT_LC_" & sBSAcc & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4, dMonthlyDepr, True)

                                End If
                            End If
                        Next
                    ElseIf dData <> 0 Then
                        Call HS.SetDataWithPOV("A#" & StrAccount & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4, dData, True)
                    End If
                Next
            End If
        End If

        If CInt(StrCurrFcstYear) < CInt(IntYear) Or (CInt(StrCurrFcstYear) = CInt(IntYear) And CInt(Str1stFcstPeriod) < CInt(IntCurPeriodNum)) Then
            Set DataUnit=HS.OpenDataUnit("A{ACQELIMTOT_EUR_PPA_TOTAL.[Base]}.I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4{ACQ_TIMES_TECH.[Base]}.P#PRIOR")
            NumItems = DataUnit.GetNumItems
            For j = 0 To NumItems - 1
                Call DataUnit.GetItem(j, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                aAccParts = Split(StrAccount,"_")
                sBSAcc = aAccParts(UBound(aAccParts))
                If dData <> 0 And sBSAcc <> "A115e" And sBSAcc <> "A122" Then
                    dMonthlyDepr = HS.GetCell("A#ACQ_PPAD_MON_AMT_LC_" & sBSAcc & ".I#[ICP Top].C1#" & StrC1 & ".C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4 & ".P#PRIOR")

                    For k = Lbound(aSources) To Ubound(aSources)
                        If UCase(aSources(k)) = UCase(sBSAcc) Then
                            If ABS(dMonthlyDepr / END_RATE_ENT) >= ABS(dData) Then
                                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4 & ".W#Periodic", -dData / AVG_RATE_ENT * END_RATE_ENT, True)
                            Else
                                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4 & ".W#Periodic", dMonthlyDepr / AVG_RATE_ENT, True)
                                Call HS.SetDataWithPOV("A#" & StrAccount & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4, dData + dMonthlyDepr / AVG_RATE_ENT, True)
                                Call HS.SetDataWithPOV("A#ACQ_PPAD_MON_AMT_LC_" & sBSAcc & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4, dMonthlyDepr, True)

                            End If
                        End If
                    Next
                ElseIf dData <> 0 Then
                    Call HS.SetDataWithPOV("A#" & StrAccount & ".C1#" & StrC1 & sDestDimC2C3None & ".C4#" & StrC4, dData, True)
                End If
            Next
        End If

        Set DataUnit=HS.OpenDataUnit("A{ACQELIMTOT_EUR_R95.[Base]}.I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT")
        NumItems = DataUnit.GetNumItems
        For j = 0 To NumItems - 1
            Call DataUnit.GetItem(j, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            aAccParts = Split(StrAccount,"_")
            sBSAcc = aAccParts(UBound(aAccParts))
            Hs.Exp "A#" & StrAccount & "_FINAL.W#Periodic.C2#[None].C3#ACQ.C4#[None] = A#" & StrAccount & ".W#Periodic.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT"
        Next

        If NumItems > 0 Then
            Hs.Exp "A#ACQELIMTOT_EUR_RM69_FINAL.I#[ICP None].C2#[None].C3#ACQ.C4#[None].W#Periodic = -1 * (A#ACQELIMTOT_EUR_RM51.I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT.W#Periodic" & _
                                                                                                    " + A#ACQELIMTOT_EUR_RM53.I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT.W#Periodic" & _
                                                                                                    " + A#ACQELIMTOT_EUR_RM55.I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT.W#Periodic)"
            Hs.Exp "A#ACQELIMTOT_EUR_RM68_FINAL = -A#ACQELIMTOT_EUR_RM69_FINAL"
        End If

    End If

End Sub

Sub PostACQNCICalc(IntYear,StrPeriod,StrEntity,StrPrevScenBEGBAL,strApp,FirstYearWithData)
    DeActivate = HS.GetCell("V#EUR.E#ADMIN_ENTITY.A#DeActivate_NCICalc.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    iPeriod = CInt(GetPeriodNumber(StrPeriod))
    If HS.IsZero(DeActivate) = TRUE Then
        DeActivate = HS.GetCell("A#DeActivate_NCICalc.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    End If

    If UCase(strApp) = "THANKKARIT" Then
        iNCIStartYear = 2021
        iNCIStartPeriod = 1
    Else
        iNCIStartYear = 2021
        iNCIStartPeriod = 11
    End If

    If iACQStartYear < CInt(FirstYearWithData) Then
        iACQStartYear = CInt(FirstYearWithData)
    End If

    UD = GetUD(StrEntity, "Entity", "CloseStartDate")
    If UD = "" Then
        ActiveMbr = True
    Else
        UD_Year = Right(UD,4)
        If CInt(UD_Year) < CInt(IntYear) Then
            ActiveMbr = False
        Else
            ActiveMbr = True
        End If
    End If

    If DeActivate <> 1 And (CInt(IntYear) > iNCIStartYear Or CInt(IntYear) = iNCIStartYear And iPeriod >= iNCIStartPeriod) And ActiveMbr = True Then

        sSrcDimC1C2C3 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
        sDestDimC1C2C3None = ".I#[ICP None].C1#[None].C2#[None].C3#INP"
        sSrcDimC1C2C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
        sDestDimC1C2C3C4None = ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"
        sDestDimC1C2C3C4NCI = ".I#[ICP None].C1#[None].C2#[None].C3#NCI.C4#[None]"
        sDestDimIcpC1C3C4NCI = ".I#" & StrEntity & ".C1#[None].C3#NCI.C4#[None]"
        sSrcDimC1C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
        sDestDimC1C3C4None = ".I#[ICP None].C1#[None].C3#INP.C4#[None]"
        sDestDimC1C3C4NCI = ".I#[ICP None].C1#[None].C3#NCI.C4#[None]"

        ENT_CURRENCY = Hs.Entity.DefCurrency(StrEntity)

        END_RATE_ENT = Hs.GetRate("V#EUR.A#END_RATES")
        AVG_RATE_ENT = Hs.GetRate("V#EUR.A#AVG_RATES")
        PRE_RATE_ENT = Hs.GetRate("V#EUR.A#PRE_RATES")

        bCompanySold = False
        bCompanyHasImpact = False

        For Each sTriggerAcc In Array("ACQ_PERCENT_TOTAL","ACQ_STOP")
            Set DataUnit=HS.OpenDataUnit("S#ACTUAL.A#" & sTriggerAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                If StrC4 <> "ACQ01" And dData <> 0 Then
                    iACQ_Year = Hs.GetCell("S#ACTUAL.A#ACQ_YEAR" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    iACQ_Period = Hs.GetCell("S#ACTUAL.A#ACQ_MONTH" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    sACQPeriod = "P#" & GetPeriodLabel(iACQ_Period)
                    If iACQ_Period < 1 And iACQ_Period > 12 Then
                        sACQPeriod = "ERROR"
                    End If

                    dChangeInOwnership = 0
                    If sTriggerAcc = "ACQ_STOP" And dData = 1 Then
                        dChangeInOwnership = 100 - Hs.GetCell("S#ACTUAL.A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#ACQTOT")
                        bCompanySold = True
                    Else
                        dChangeInOwnership = dData
                    End If

                    If iACQ_Year = CInt(IntYear) And sACQPeriod <> "ERROR" Then
                        Hs.Exp "A#NCI_R941_LC_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#R95" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & dChangeInOwnership & " / 100"
                        Hs.Exp "A#NCI_L205_AVGEND_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#L135_EUR.C2#CTA_AVG" & sSrcDimC1C3C4 & "." & sACQPeriod & " * " & dChangeInOwnership & " / 100"
                        If ENT_CURRENCY <> "EUR" Then
                            Hs.Exp "A#NCI_L205_CTA_RE_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L165_EUR.C2#POST_ACQ_CTA_DPI" & sSrcDimC1C3C4 & " - A#L165_EUR.C2#POST_ACQ_CTA_DPI" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100" & _
                                                                                                            "+(A#L165_EUR.C2#POST_ACQ_CTA_DPE" & sSrcDimC1C3C4 & " - A#L165_EUR.C2#POST_ACQ_CTA_DPE" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                        Else
                            Hs.Exp "A#NCI_L205_CTA_RE_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L165.C2#RET_DPI" & sSrcDimC1C3C4 & " - A#L165.C2#RET_DPI" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100" & _
                                                                                                            "+(A#L165.C2#RET_DPE" & sSrcDimC1C3C4 & " - A#L165.C2#RET_DPE" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                        End If
                        END_RATE_ENT_ACQ_PERIOD = Hs.GetRate("V#EUR.A#END_RATES" & "." & sACQPeriod)
                        Hs.Exp "A#NCI_OCI_PENSION_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L173" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & " - A#L173" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & ") * " & dChangeInOwnership & " / 100" & _
                                                                                                      " + (A#L174" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & " - A#L174" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & ") * " & dChangeInOwnership & " / 100"
                        Hs.Exp "A#NCI_OCI_HEDGE_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L175" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & " - A#L175" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & ") * " & dChangeInOwnership & " / 100" & _
                                                                                                    " + (A#L176" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & " - A#L176" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & ") * " & dChangeInOwnership & " / 100" & _
                                                                                                    " + (A#L177" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & " - A#L177" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & ") * " & dChangeInOwnership & " / 100"

                        Hs.Exp "A#NCI_L205_OPEFX_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -1 * (A#L135_EUR.C2#CTA_RE" & sSrcDimC1C3C4 & " - A#L135_EUR.C2#CTA_RE" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                        If ENT_CURRENCY <> "EUR" Then
                            Hs.Exp "A#NCI_L205_CTA_NI_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -1 * (A#L178" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & AVG_RATE_ENT & " - A#L178_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                            Hs.Exp "A#NCI_L205_ACQ_DISP_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L135_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L165_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L178_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L173" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & _
                                                                                                            " + A#L174" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & _
                                                                                                            " + A#L175" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & _
                                                                                                            " + A#L176" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & _
                                                                                                            " + A#L177" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & END_RATE_ENT_ACQ_PERIOD & _
                                                                                                            " - A#L165_EUR.C2#POST_ACQ_CTA_CHNG" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                            Hs.Exp "A#NCI_L165_RET_NCI_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L135_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " + A#L165_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " + A#L178_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " - A#L165_EUR.C2#POST_ACQ_CTA_CHNG" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                            If sTriggerAcc = "ACQ_STOP" And dData = 1 Then
                                Hs.Exp "A#NCI_L135_CTA_ACQ_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -1 * A#L135_EUR.C2#CTA_ACQ" & sSrcDimC1C3C4 & "." & sACQPeriod & " * " & dChangeInOwnership & " / 100"
                            Else
                                Hs.Exp "A#NCI_L135_CTA_ACQ_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#L135_EUR" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " * " & dChangeInOwnership & " / 100"
                            End If
                        Else
                            Hs.Exp "A#NCI_L205_ACQ_DISP_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L165" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L178" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L173" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L174" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L175" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L176" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " + A#L177" & sSrcDimC1C2C3C4 & "." & sACQPeriod & _
                                                                                                            " - A#L165.C2#EQ_CHNG" & sSrcDimC1C3C4 & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                            Hs.Exp "A#NCI_L165_RET_NCI_EUR_IMPACT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#L165" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " + A#L178" & sSrcDimC1C2C3C4 & "." & sACQPeriod & " - A#L165.C2#EQ_CHNG" & sSrcDimC1C3C4  & "." & sACQPeriod & ") * " & dChangeInOwnership & " / 100"
                        End If
                        bCompanyHasImpact = True

                    End If
                End If
            Next
        Next
        dCurrentNCI = 100 - Hs.GetCell("S#ACTUAL.A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#ACQTOT")
        If dCurrentNCI = 100 Or bCompanySold = True Then
            dLastNCIAtClosedCompany = dCurrentNCI
            dCurrentNCI = 0
        End If
        dPrevyNCI = 100 - Hs.GetCell("S#ACTUAL.A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#ACQTOT.Y#PRIOR.P#LAST")
        If dPrevyNCI = 100 Then
            dPrevyNCI = 0
        End If
        If dCurrentNCI > 0 Then

            Hs.Exp "A#NCI_HELP_HAS_NCI" & sDestDimC1C2C3C4None & " = 1 "
        End If
        iHasNCI = Hs.GetCell("A#NCI_HELP_HAS_NCI" & sSrcDimC1C2C3C4)
        If iHasNCI = 1 Or bCompanyHasImpact = True Then

            If HS.Entity.IsICP(StrEntity) = True Then
                Hs.Exp "A#NCI_R941_EUR.I#" & StrEntity &".C1#[None].C2#[None].C3#NCI.C4#[None] = -1 * (A#R95" & sSrcDimC1C2C3C4 & " * " & dCurrentNCI & " / 100 + A#NCI_R941_LC_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT) * " & AVG_RATE_ENT
            End If
            Hs.Exp "A#NCI_L178_EUR_NCIELIM" & sDestDimC1C2C3C4NCI & " = -1 * (A#R95" & sSrcDimC1C2C3C4 & " * " & dCurrentNCI & " / 100 + A#NCI_R941_LC_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT) * " & AVG_RATE_ENT

            For Each sAcc In Hs.Account.List("NCI_OCI_EUR_TOTAL","[Base]")
                Hs.Exp "A#" & sAcc & sDestDimC1C2C3C4NCI & " = -1 * A#" & Mid(sAcc,5,4) & sSrcDimC1C2C3C4 & " * " & END_RATE_ENT & " * " & dCurrentNCI & " / 100"
            Next
            For Each sAcc In Hs.Account.List("NCI_OCI_EUR_CHNG_TOTAL","[Base]")
                Hs.Exp "A#" & sAcc & sDestDimC1C2C3C4NCI & " = (A#" & Mid(sAcc,5,4) & sSrcDimC1C2C3C4 & " * " & END_RATE_ENT & " - A#" & Mid(sAcc,5,4) & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & ") * " & dCurrentNCI & " / 100 "
            Next

            If HS.Entity.IsICP(StrEntity) = True Then
                If ENT_CURRENCY <> "EUR" Then
                    Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_OPE" & sDestDimIcpC1C3C4NCI & " = A#L165_EUR.C2#POST_ACQ_CTA_OPE" & sSrcDimC1C3C4  & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L135_EUR" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L173" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L174" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L175" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L176" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L177" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100"
                Else
                    Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_OPE" & sDestDimIcpC1C3C4NCI & " = A#L165.C2#EQ_OPE" & sSrcDimC1C3C4  & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L173" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L174" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L175" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L176" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100" & _
                                                                                      " + A#L177" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & " * " & PRE_RATE_ENT & " * " & dPrevyNCI & " / 100"
                End If
                Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_CF_HEDGE" & sDestDimIcpC1C3C4NCI & " = A#NCI_L175_EUR_CHNG_NCIELIM" & sSrcDimC1C2C3C4 & _
                                                                                    " + A#NCI_L176_EUR_CHNG_NCIELIM" & sSrcDimC1C2C3C4 & _
                                                                                    " + A#NCI_L177_EUR_CHNG_NCIELIM" & sSrcDimC1C2C3C4 & _
                                                                                    " + A#NCI_OCI_HEDGE_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
                Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_PENSION" & sDestDimIcpC1C3C4NCI & " = A#NCI_L173_EUR_CHNG_NCIELIM" & sSrcDimC1C2C3C4 & _
                                                                                      " + A#NCI_L174_EUR_CHNG_NCIELIM" & sSrcDimC1C2C3C4 & _
                                                                                      " + A#NCI_OCI_PENSION_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
                If ENT_CURRENCY <> "EUR" Then
                    Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_OPEFX" & sDestDimIcpC1C3C4NCI & " = (A#L135_EUR.C2#CTA_RE" & sSrcDimC1C3C4 & " - A#L135_EUR" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL & ") * " & dPrevyNCI & " / 100" & " + A#NCI_L205_OPEFX_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
                    Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_AVGEND" & sDestDimIcpC1C3C4NCI & " = A#L135_EUR.C2#CTA_AVG" & sSrcDimC1C3C4 & " * " & dCurrentNCI & " / 100" & " + A#NCI_L205_AVGEND_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
                End If
                Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_CTA" & sDestDimIcpC1C3C4NCI & " =  A#NCI_L205_CTA_RE_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT + A#NCI_L205_CTA_NI_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
                If ENT_CURRENCY <> "EUR" Then
                    Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_DPE" & sDestDimIcpC1C3C4NCI & " = -1 * A#L165_EUR.C2#POST_ACQ_CTA_DPE" & sSrcDimC1C3C4
                Else
                    Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_DPE" & sDestDimIcpC1C3C4NCI & " = -1 * A#L165.C2#RET_DPE" & sSrcDimC1C3C4
                End If
                Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_R941" & sDestDimIcpC1C3C4NCI & " = (A#R95" & sSrcDimC1C2C3C4 & " * " & dCurrentNCI & " / 100 + A#NCI_R941_LC_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT) * " & AVG_RATE_ENT
                Hs.Exp "A#NCI_L205_EUR_NCIELIM.C2#NCI_ACQ_DISP" & sDestDimIcpC1C3C4NCI & " =  -1 * (A#NCI_L205_ACQ_DISP_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT)"
            End If

            If ENT_CURRENCY <> "EUR" Then
                Hs.Exp "A#NCI_L135_EUR_NCIELIM.C2#CTA_RE" & sDestDimC1C3C4NCI & " = -1 * (A#NCI_L205_EUR_NCIELIM.C2#NCI_OPEFX" & sSrcDimC1C3C4 & " + A#L135_EUR.C2#CTA_RE" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL & " * " & dPrevyNCI & " / 100"  & " + A#L135_EUR.C2#CTA_ACQ" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL & " * " & dPrevyNCI & " / 100)"
                Hs.Exp "A#NCI_L135_EUR_NCIELIM.C2#CTA_AVG" & sDestDimC1C3C4NCI & " = -1 * (A#NCI_L205_EUR_NCIELIM.C2#NCI_AVGEND" & sSrcDimC1C3C4 & " + A#L135_EUR.C2#CTA_AVG" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL & " * " & dPrevyNCI & " / 100)"
                Hs.Exp "A#NCI_L135_EUR_NCIELIM.C2#CTA_ACQ" & sDestDimC1C3C4NCI & " = A#NCI_L135_CTA_ACQ_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
            End If

            If ENT_CURRENCY <> "EUR" Then
                Hs.Exp "A#NCI_L165_EUR_NCIELIM.C2#EQ_OPE" & sDestDimC1C3C4NCI & " = -1 * A#L165_EUR.C2#POST_ACQ_CTA_OPE" & sSrcDimC1C3C4  & " * " & dPrevyNCI & " / 100"

                Hs.Exp "A#NCI_L165_EUR_NCIELIM.C2#EQ_CHNG" & sDestDimC1C3C4NCI & " = 1 * A#L165_EUR.C2#POST_ACQ_CTA_DPE" & sSrcDimC1C3C4
            Else
                Hs.Exp "A#NCI_L165_EUR_NCIELIM.C2#EQ_OPE" & sDestDimC1C3C4NCI & " = -1 * A#L165.C2#EQ_OPE" & sSrcDimC1C3C4  & " * " & dPrevyNCI & " / 100"

                Hs.Exp "A#NCI_L165_EUR_NCIELIM.C2#EQ_CHNG" & sDestDimC1C3C4NCI & " = 1 * A#L165.C2#RET_DPE" & sSrcDimC1C3C4
            End If
            Hs.Exp "A#NCI_L165_EUR_NCIELIM.C2#RET_NCI" & sDestDimC1C3C4NCI & " = -1 * (A#NCI_L135_EUR_NCIELIM.C2#CTA_ACQ" & sSrcDimC1C3C4 & " + A#NCI_L205_EUR_NCIELIM.C2#NCI_CTA" & sSrcDimC1C3C4 & " - A#NCI_L165_RET_NCI_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT)"

            Set DataUnit=HS.OpenDataUnit("S#ACTUAL.A#ACQ_TYPE.C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If dData  = 6 Then
                    sC2Earmark = StrC2
                    iACQ_Year = Hs.GetCell("S#ACTUAL.A#ACQ_YEAR" & sSrcDimC1C2C3 & ".C4#" & StrC4)

                    If StrC4 <> "ACQ01" And iACQ_Year = CInt(IntYear) And Left(sC2Earmark,9) = "DISPBUSIN" Then

                        Hs.Exp "A#NCI_DIV_2400_EUR_NCIELIM.C2#" & sC2Earmark & ".I#[ICP None].C1#[None].C3#ACQ_DISP_ACQ.C4#[None]" & " = -1 * A#NCI_L205_ACQ_DISP_EUR_IMPACT" & sSrcDimC1C2C3 & ".C4#ACQTOT"
                    End If
                End If
            Next

        End If

    End If

End Sub

Sub ACQCalc(IntYear,StrPeriod,IntCurPeriodNum,StrEntity,GL_Ent,LegalEntForStrEntity,StrBA,StrCurrFcstYear,FirstYearWithData,strApp)
    DeActivate = HS.GetCell("V#EUR.E#ADMIN_ENTITY.A#DeActivate_ACQCalc.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    If HS.IsZero(DeActivate) = TRUE Then
        DeActivate = HS.GetCell("A#DeActivate_ACQCalc.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    End If
    iStopCode = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#ACQTOT")
    iPeriod = CInt(GetPeriodNumber(StrPeriod))

    If UCase(strApp) = "DHANKKARIT" Then
        iACQStartYear = 2017
    Else
        iACQStartYear = 2019
    End If

    If iACQStartYear < CInt(FirstYearWithData) Then
        iACQStartYear = CInt(FirstYearWithData)
    End If

    UD = GetUD(StrEntity, "Entity", "CloseStartDate")
    If UD = "" Then
        ActiveMbr = True
    Else
        UD_Year = Right(UD,4)
        If CInt(UD_Year) < CInt(IntYear) Then
            ActiveMbr = False
        Else
            ActiveMbr = True
        End If
    End If

    If DeActivate <> 1 And CInt(IntYear) >= iACQStartYear Then
        aAllACQAccounts = HS.Account.List("ACQ_ACCOUNTS", "[Base]")
        For Each acc In aAllACQAccounts
            If Instr(GetUD(acc, "Account", ""),"/Calc/") > 0 And UCase(acc) <> "ACQ_COPIEDDATA" Then
                Hs.Clear "A#" & acc
            End If
        Next

        If Hs.Period.IsFirst = True Then

            iCopyACQ = HS.GetCell("A#DeActivate_ACQCopy.E#[None].I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
            iStopCodePrevY = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#ACQTOT.Y#Prior.P#Last")
            If HS.IsZero(iCopyACQ) = TRUE Then

                Set DataUnit=HS.OpenDataUnit("A#ACQ_CopiedData.I#[ICP None].C1#[None].C2#[None].C3#INP")
                NumItems = DataUnit.GetNumItems
                For i = 0 to NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                    If dData = 1 Then

                        dGWDisp = HS.GetCell("A#ACQ_GW_DISPOSAL_PERCENT01.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4)
                        Hs.Clear "C4#" & StrC4
                        If dGWDisp <> 0 Then
                            Hs.Exp "A#ACQ_GW_DISPOSAL_PERCENT01.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4 & " = " & dGWDisp
                        End If
                    End If
                Next

                Hs.Clear "A#ACQ_CopiedData"

                If ActiveMbr = True And HS.IsZero(iStopCodePrevY) = TRUE Then
                    Set DataUnit=HS.OpenDataUnit("C1#CUSTOM1_TOP.C4{ACQTOT.[Base]}.Y#Prior.P#Last")
                    NumItems = DataUnit.GetNumItems
                    For i = 0 to NumItems - 1
                        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                        If HS.IsZero(dData) = FALSE Then

                            If Instr(GetUD(StrAccount, "Account", ""),"/Calc/") = 0 And HS.Account.IsDescendant("ACQ_PPAI_YTD_LC_TOTAL", StrAccount) = False And HS.Account.IsDescendant("ACQ_GW_DISPOSAL_PERCENT_TOTAL", StrAccount) = False And HS.Account.IsDescendant("ACQ_DOA_RATE_DISPOSALS", StrAccount) = False And HS.Account.IsDescendant("ACQ_DOA_DENOM_RATE_DISPOSALS", StrAccount) = False And HS.Account.IsDescendant("ACQ_GW_FLAGS", StrAccount) = False Then

                                If CInt(IntYear) < 2022 Or StrAccount <> "ACQ_DTLCHG_MANUAL_YTD_LC_L295" Then
                                    Hs.Exp "A#" & StrAccount & ".I#" & sICP & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4 & " = A#" & StrAccount & ".I#" & sICP & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4 & ".Y#Prior.P#Last"

                                    If sCustom2 <> "[None]" Then
                                        Hs.Exp "A#ACQ_CopiedData.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4 & " = 1"
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
            End If
        End If

        sRL = HS.ReviewStatusUsingPhaseID("",1)

        If sRL = "Review Level 2" Or sRL = "Review Level 8" Then

            Set MyCellTextUnit = HS.OpenCellTextUnit("A{ACQ_A1.[Base]}", "[Default]", "Account", "Ascending")
            NumItems= MyCellTextUnit.GetNumItems

            If NumItems = 0 Then
                Set MyCellTextUnit = HS.OpenCellTextUnit("A{ACQ_A1.[Base]}.P#PRIOR", "[Default]", "Account", "Ascending")
                NumItems= MyCellTextUnit.GetNumItems
                For i = 0 to NumItems - 1
                    A = MyCellTextUnit.Item(i).Account
                    sI = MyCellTextUnit.Item(i).ICP
                    sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                    sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                    sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                    sC4 = MyCellTextUnit.Item(i).Custom("Custom4")
                    CellText = MyCellTextUnit.Item(i).CellText

                    HS.SetCellTextWithLabel "A#"&A&".I#"&sI&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&"", "[Default]",CellText
                Next
            End If
        End If
    End If

    sClosPeriod = getACQStopPeriod(FirstYearWithData)

    If Hs.GetCell("A#ACQ_TYPE.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQ_TIMES.I#[ICP Top]") <> 0 And DeActivate = 0 And CInt(IntYear) >= iACQStartYear Then
        sSrcDimC1C2C3 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP"
        sSrcDimC1C2C3Currencies = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES"
        sDestDimC1C2C3None = ".I#[ICP None].C1#[None].C2#[None].C3#INP"
        sSrcDimC1C3 = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP"
        sDestDimC1C3None = ".I#[ICP None].C1#[None].C3#INP"
        sSrcDimC1C2 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS"
        sDestDimC1C2None = ".I#[ICP None].C1#[None].C2#[None]"
        sSrcDimC2C3 = ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP"
        sDestDimC2C3None = ".I#[ICP None].C2#[None].C3#INP"
        sSrcDimC3 = ".I#[ICP Top].C3#CUSTOM3_TOP"
        sDestDimC3None = ".I#[ICP None].C3#INP"
        EntityUD = GetUD(StrEntity, "Entity", "")
        strBACustom1 = "PC99"
        Select Case StrBA

        Case "MACGREGOR"
            strBACustom1 = "COMO"

        Case "OTHER"
            strBACustom1 = "PC99"
        End Select
        bMigrationYear = False
        sICP = ""
        If HS.Entity.IsICP(StrEntity) = True Then
            sICP = StrEntity
        Else
            sICP = "MSEO"
        End If

        If GL_Ent = False Then LegalEntForStrEntity = GetLegalEntity(StrEntity, EntUD)

        strGLEnt = ""
        If GL_Ent = False Then
            For Each ent In Hs.Entity.List(LegalEntForStrEntity,"[Base]")
                EntUD = GetUD(ent, "Entity", "")

                If IsActiveGL(EntUD,IntYear,IntCurPeriodNum,HS.Scenario.member()) = True Then
                    strGLEnt = ent
                End If
            Next
        Else
            strGLEnt = strEntity
        End If

        If Len(LegalEntForStrEntity) < 2 Then
            LegalEntForStrEntity = GetLegalEntity(StrEntity, EntUD)
        End If

        END_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#END_RATES" & sClosPeriod)
        AVG_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#AVG_RATES" & sClosPeriod)
        PRE_RATE_ENT_TEMP = Hs.GetRate("V#EUR.A#PRE_RATES" & sClosPeriod)

        If END_RATE_ENT_TEMP <> 0 Then
            END_RATE_ENT = 1 / END_RATE_ENT_TEMP
        Else
            END_RATE_ENT = 1
        End If
        If AVG_RATE_ENT_TEMP <> 0 Then
            AVG_RATE_ENT = 1 / AVG_RATE_ENT_TEMP
        Else
            AVG_RATE_ENT = 1
        End If
        If PRE_RATE_ENT_TEMP <> 0 Then
            PRE_RATE_ENT = 1 / PRE_RATE_ENT_TEMP
        Else
            PRE_RATE_ENT = 1
        End If

        ENT_CURRENCY = Hs.Entity.DefCurrency(StrEntity)
        sC3EntCur = "C3_ACQ_" & ENT_CURRENCY

        iNumOfACQTimesInUse = 0

        Set DataUnit=HS.OpenDataUnitSorted("A#ACQ_TYPE.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]","Custom4","Ascending")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            If dData <> 0 Then

                If Right(StrC4,1) = "1" And StrC4 <> "ACQ01" Then
                    Hs.Exp "C4#" & Left(StrC4,4) & "0_CUM_CALC = C4#" & Left(StrC4,4) & "0_CUM"
                End If

                Set DataUnit2=HS.OpenDataUnitSorted("A#ACQ_TYPE.C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]","Custom4","Ascending")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount_2, StrICP_2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 <> 0 Then
                    sC2Earmark = StrC2_2
                    iACQType = dData2
                    End If
                Next

                iStopCodeCurACQ = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4)
                sDestDimC2C3Earmark = ".I#[ICP None].C3#INP.C2#" & sC2Earmark
                sDestDimC2Earmark = ".I#[ICP None].C2#" & sC2Earmark
                iACQ_Year = Hs.GetCell("A#ACQ_YEAR" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                iACQ_Period = Hs.GetCell("A#ACQ_MONTH" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                ACQ_DOA_RATE_INP = Hs.GetCell("A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                dACQ_IndirectOwnership = Hs.GetCell("A#ACQ_PERCENT_INDIRECT_01" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                sPrevACQ = ""
                If Mid(StrC4,4,1) = "0" Then
                    sPrevACQ = Left(StrC4,Len(StrC4) - 1) & CInt(Right(StrC4,1)) - 1
                ElseIf Right(StrC4,2) = "10" Then
                    sPrevACQ = Left(StrC4,Len(StrC4) - 2) & "0" & CInt(Right(StrC4,2)) - 1
                Else
                    sPrevACQ = Left(StrC4,Len(StrC4) - 2) & CInt(Right(StrC4,2)) - 1
                End If

                If CInt(iACQType) = 13 And CInt(intYear) = iACQ_Year + 1 Then
                    bMigrationYear = True
                End If

                iNumOfOwners = 0

                Set DataUnit2=HS.OpenDataUnit("A{ACQ_OWNER_TOTAL.[Base]}.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 = 1 Then

                        iNumOfOwners = CInt(Right(StrAccount2,1))

                        StrOwner_CURRENCY = Right(StrC3_2,3)
                        END_RATE_OWNER = Hs.GetRate("V#" & StrOwner_CURRENCY & ".A#END_RATES" & sClosPeriod) * END_RATE_ENT
                        Hs.Exp "A#ACQ_ENDRATE_OW" & iNumOfOwners & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & END_RATE_OWNER
                    End If
                Next

                Hs.Exp "A#ACQ_PERCENT_CUM" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM"

                Hs.Exp "A#ACQ_PERCENT_NCI" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = 100 - A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Hs.Exp "A#ACQ_ENDRATE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & END_RATE_ENT
                Hs.Exp "A#ACQ_AVGRATE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & AVG_RATE_ENT

                sCalcSrc1 = ""
                sCalcSrc2 = ""
                For j = 1 To iNumOfOwners
                    dRate = Hs.GetCell("A#ACQ_DOA_RATE_OW" & j &"_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    dPriceEUR = Hs.GetCell("A#ACQ_PRICE_OW" & j & "_EUR_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    dPriceOW = Hs.GetCell("A#ACQ_PRICE_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    dCondPriceEUR = Hs.GetCell("A#ACQ_COND_PRICE_OW" & j & "_EUR_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    dCondPriceOW = Hs.GetCell("A#ACQ_COND_PRICE_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If dRate = 0 And dPriceEUR <> 0 And dPriceOW <> 0 Then
                        Hs.Exp "A#ACQ_DOA_RATE_OW" & j & "_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PRICE_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / A#ACQ_PRICE_OW" & j & "_EUR_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    ElseIf dRate = 0 And dCondPriceEUR <> 0 And dCondPriceOW <> 0 Then
                        Hs.Exp "A#ACQ_DOA_RATE_OW" & j & "_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_COND_PRICE_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / A#ACQ_COND_PRICE_OW" & j & "_EUR_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Else
                        Hs.Exp "A#ACQ_DOA_RATE_OW" & j & "_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dRate
                    End If

                    If dRate <> 0 And dPriceOW <> 0 Then
                        Hs.Exp "A#ACQ_PRICE_OW" & j & "_EUR_A165I_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dPriceOW / dRate

                        If j = 1 And dACQ_IndirectOwnership <> 0 Then
                            Hs.Exp "A#ACQ_PRICE_OW" & j & "_EUR_A165I_INDIRECT_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dPriceOW * (100 - dACQ_IndirectOwnership) / 100 / dRate
                        End If
                    Else
                        Hs.Exp "A#ACQ_PRICE_OW" & j & "_EUR_A165I_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dPriceEUR

                        If j = 1 And dACQ_IndirectOwnership <> 0 Then
                            Hs.Exp "A#ACQ_PRICE_OW" & j & "_EUR_A165I_INDIRECT_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dPriceEUR * (100 - dACQ_IndirectOwnership) / 100
                        End If
                    End If

                    If dRate <> 0 And dCondPriceOW <> 0 Then
                        Hs.Exp "A#ACQ_COND_PRICE_OW" & j & "_EUR_L365E_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dCondPriceOW / dRate
                    Else
                        Hs.Exp "A#ACQ_COND_PRICE_OW" & j & "_EUR_L365E_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dCondPriceEUR
                    End If

                    If iACQTYPE = 10 And j = 1 And dACQ_IndirectOwnership <> 0 Then
                        Hs.Exp "A#ACQ_PRICE_OW1_A165I_INDIRECT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & "-A#ACQ_PRICE_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM * " & dACQ_IndirectOwnership & " / 100"

                        Hs.Exp "A#ACQ_PRICE_OW1_EUR_A165I_INDIRECT_CALC" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & "A#ACQ_PRICE_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & dRate
                    Else
                        Hs.Exp "A#ACQ_PRICE_OW1_A165I_INDIRECT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & "A#ACQ_PRICE_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * (100 - " & dACQ_IndirectOwnership & ") / 100"
                    End If

                    If j > 1 Then
                        sCalcSrc1 = sCalcSrc1 & " + "
                        sCalcSrc2 = sCalcSrc2 & " + "
                    End If
                    sCalcSrc1 = sCalcSrc1 & "A#ACQ_PRICE_OW" & j & "_EUR_A165I_CALC" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    sCalcSrc2 = sCalcSrc2 & "A#ACQ_COND_PRICE_OW" & j & "_EUR_L365E_CALC" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    If j = iNumOfOwners Then
                        Hs.Exp "A#ACQ_PRICE_LC_A165I" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (" & sCalcSrc1 & ") * A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4
                        Hs.Exp "A#ACQ_COND_PRICE_LC_L365E" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (" & sCalcSrc2 & ") * A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                    If j = 1 And dACQ_IndirectOwnership <> 0 Then
                        Hs.Exp "A#ACQ_PRICE_LC_A165I_INDIRECT_OWNERSHIP" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & "A#ACQ_PRICE_OW" & j & "_EUR_A165I_INDIRECT_CALC" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If

                Next

                Set DataUnit2=HS.OpenDataUnit("A{ACQEQUITY_LC_TOTAL.[Base]}.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4 & "_CUM.I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    aAccParts = Split(StrAccount2,"_")
                    sBSAcc = aAccParts(UBound(aAccParts))

                    sSourceAcc = StrAccount2
                    sDestAcc = "ACQELIM_PRE_" & sBSAcc
                    Hs.Exp "A#" & sDestAcc & sDestDimC1C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C3 & ".C4#" & StrC4 & "_CUM * A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"

                    sSourceAcc = sDestAcc
                    sDestAcc = "ACQELIM_LC_" & sBSAcc
                    If StrC4 = "ACQ01" Then
                        Hs.Exp "A#" & sDestAcc & sDestDimC1C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C3 & ".C4#" & StrC4
                    Else
                        Hs.Exp "A#" & sDestAcc & sDestDimC1C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C3 & ".C4#" & StrC4 & " - A#" & sSourceAcc & sSrcDimC1C3 & ".C4#" & sPrevACQ
                    End If

                    If Hs.GetCell("A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4) <> 0 Then

                        sSourceAcc = StrAccount2
                        sDestAcc = "NCI_LC_" & sBSAcc
                        If StrC4 = "ACQ01" Then
                            Hs.Exp "A#" & sDestAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                        Else
                            Hs.Exp "A#" & sDestAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C2C3 & ".C4#" & StrC4  & "_CUM * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100 - A#" & sSourceAcc & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & "_CUM * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & " / 100"
                        End If
                    End If

                        If Hs.GetCell("A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM") = 100 And Hs.GetCell("A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4) <> 0 And StrC4 <> "ACQ01" Then
                            sSourceAcc = sDestAcc
                            sDestAcc = "NCI_LC_ZERO_" & sBSAcc
                            Hs.Exp "A#" & sDestAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#" & sSourceAcc & sSrcDimC1C2C3 & ".C4#" & StrC4
                        End If

                Next

                Hs.Exp "A#ACQELIM_LC_L365E" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_COND_PRICE_LC_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Set DataUnit2=HS.OpenDataUnit("A#ACQ_POST_ACQ_RE_DOARATE.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 <> 0 Then

                        StrOwner_CURRENCY = Right(StrC3_2,3)
                        RE_RATE_OWNER = 0

                        If CInt(IntYear) > CInt(iACQ_Year) Then
                            RE_RATE_OWNER = Hs.GetCell("A#ACQ_RATE_FIXED_OW_RE" & sSrcDimC1C2 & ".C3#" & StrC3_2 & ".C4#" & StrC4 & ".Y#PRIOR.P#LAST")
                            If RE_RATE_OWNER = 0 Then
                                RE_RATE_OWNER = dData2
                            End If

                        ElseIf CInt(IntYear) = CInt(iACQ_Year) Then

                            If iACQType = 2 Or iACQType = 5 Or iACQType = 9 Then
                                RE_RATE_OWNER = Hs.GetRate("V#" & StrOwner_CURRENCY & ".A#AVG_RATES") * AVG_RATE_ENT

                            ElseIf iACQType = 6 Or iACQType = 10  Or iACQType = 13 Or iACQType = 16 Or iACQType = 4 Or iACQType = 8 Then
                                RE_RATE_OWNER = dData2

                            Else
                                RE_RATE_OWNER = Hs.GetRate("V#" & StrOwner_CURRENCY & ".A#END_RATES") * END_RATE_ENT
                            End If
                        End If

                        Hs.Exp "A#ACQ_RATE_FIXED_OW_RE" & sDestDimC1C2None & ".C3#" & StrC3_2 & ".C4#" & StrC4 & " = " & RE_RATE_OWNER

                        Hs.Exp "A#ACQ_LC_POST_ACQ_RE_L165" & sDestDimC1C2None & ".C3#" & StrC3_2 & ".C4#" & StrC4 & " = A#ACQ_POST_ACQ_RE_L165.I#[ICP Top].C1#CUSTOM1_TOP.C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & dData2 & " * " & ACQ_DOA_RATE_INP
                    End If
                Next

                Hs.Exp "A#ACQ_PRICE_LC_RECALC_A165I" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PRICE_LC_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_LC_POST_ACQ_RE_L165.C3#ACQ_CURRENCIES" & sSrcDimC1C2 & ".C4#" & StrC4
                Hs.Exp "A#ACQ_PRICE_LC_RECALC_A165I_WO_INDIRECT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PRICE_LC_RECALC_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_PRICE_LC_A165I_INDIRECT_OWNERSHIP" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Hs.Exp "A#ACQ_LC_EV" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PRICE_LC_RECALC_A165I_WO_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQELIM_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQELIM_LC_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4

                If ACQ_DOA_RATE_INP <> 0 Then
                    Hs.Exp "A#ACQ_DOA_EV" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_LC_EV" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#ACQ_EVPLUG_LC_L200" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_EVPLUG_EUR_L200" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4
                End If

                Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4 & "_CUM")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    aAccParts = Split(StrAccount2,"_")
                    sBSAcc = aAccParts(UBound(aAccParts))
                    sSourceAcc = StrAccount2
                    sDestAcc = "NCI_PPA_LC_CUM_" & sBSAcc

                    If Hs.GetCell("A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4) <> 0 Then
                        Hs.Exp "A#" & sDestAcc  & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                    End If

                    sSourceAcc = sDestAcc
                    sDestAcc = "NCI_PPA_LC_ACQTIME_" & sBSAcc
                    If StrC4 = "ACQ01" Then
                        Hs.Exp "A#" & sDestAcc  & sDestDimC2C3None &  ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4
                    Else
                        Hs.Exp "A#" & sDestAcc  & sDestDimC2C3None &  ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " - A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & sPrevACQ
                    End If
                Next

                bReal = False
                bNodata = False
                DT_DOA_PERCENTAGE = Hs.GetCellRealData("A#ACQ_DT_DOA_PERCENTAGE_INPUT" & sSrcDimC1C2C3 & ".C4#" & StrC4,bReal)
                DT_DOA_PERCENTAGE = Hs.GetCellNoData("A#ACQ_DT_DOA_PERCENTAGE_INPUT" & sSrcDimC1C2C3 & ".C4#" & StrC4,bNodata)

                If StrC4 = "ACQ01" And DT_DOA_PERCENTAGE <> 0 Then
                    Hs.Exp "A#ACQ_DT_DOA_PERCENTAGE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & DT_DOA_PERCENTAGE
                ElseIf StrC4 <> "ACQ01" And (DT_DOA_PERCENTAGE <> 0 Or bReal = True) And CInt(IntYear) > 2023 Then
                    Hs.Exp "A#ACQ_DT_DOA_PERCENTAGE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & DT_DOA_PERCENTAGE

                ElseIf StrC4 <> "ACQ01" And bNodata = False And (CInt(IntYear) > 2024 Or (CInt(IntYear) = 2024 And CInt(IntCurPeriodNum) > 5)) Then
                    Hs.Exp "A#ACQ_DT_DOA_PERCENTAGE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & DT_DOA_PERCENTAGE
                ElseIf StrC4 <> "ACQ01" And DT_DOA_PERCENTAGE <> 0 Then
                    Hs.Exp "A#ACQ_DT_DOA_PERCENTAGE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & DT_DOA_PERCENTAGE
                ElseIf StrC4 <> "ACQ01" Then
                    Hs.Exp "A#ACQ_DT_DOA_PERCENTAGE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DT_DOA_PERCENTAGE" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ
                End If

                Hs.Exp "A#ACQ_DTL_LC_CUM_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM * A#ACQ_DT_DOA_PERCENTAGE" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                Hs.Exp "A#ACQ_DTL_LC_ACQTIME_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * A#ACQ_DT_DOA_PERCENTAGE" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                Hs.Exp "A#NCI_DTL_LC_CUM_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_LC_CUM_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"

                If StrC4 = "ACQ01" Then

                    Hs.Exp "A#NCI_DTL_LC_ACQTIME_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_DTL_LC_CUM_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Else

                    Hs.Exp "A#NCI_DTL_LC_ACQTIME_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_DTL_LC_CUM_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_DTL_LC_CUM_L295" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ
                End If
                Hs.Exp "A#NCI_PPA_DTL_TOTAL" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_PPA_LC_CUM_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_DTL_LC_CUM_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#NCI_PPA_DTL_CHG_TOTAL" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_PPA_LC_ACQTIME_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Set DataUnit2=HS.OpenDataUnit("A#GW_C1_FLAG.I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 = 1 Then
                        strBACustom1 = StrC1_2
                    End If
                Next

                Set DataUnit2=HS.OpenDataUnit("A#ACQ_GW_DEN_DOARATE.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    StrGW_CURRENCY = Right(StrC3_2,3)
                    END_RATE_GW = Hs.GetRate("V#" & StrGW_CURRENCY & ".A#END_RATES") * END_RATE_ENT
                    Hs.Exp "A#ACQ_ENDRATE_FIXED_GW" & sDestDimC1C2None & ".C3#" & StrC3_2 & ".C4#" & StrC4 & " = " & END_RATE_GW

                    Hs.Exp "A#ACQ_GW_DEN.I#[ICP None].C2#[None]" & ".C3#" & StrC3_2 & ".C4#" & StrC4 & " = A#ACQ_LC_GW_DEN.I#[ICP Top].C2#[None].C3#" & StrC3_2 & ".C4#" & StrC4 & " * " & dData2 & " / " & ACQ_DOA_RATE_INP
                Next

                If strBACustom1 <> "" Then

                    Hs.Exp "A#ACQ_GW_LC.C1#" & strBACustom1 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_LC_EV" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    "+ A#ACQ_EVPLUG_LC_L200" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    "- A#ACQ_PPA_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    "+ A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    "+ A#NCI_PPA_DTL_CHG_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    "+( A#ACQ_EVPLUG_CTA_EUR_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ")* A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4 &_
                                                                                                    "+( A#ACQ_EVPLUG_CTA_EUR_A105" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ")* A#ACQ_DOA_RATE_INP" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Hs.Exp "A#ACQ_GW_LC_RE_ALLOC_L168" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_EUR_RE_ALLOC_L168" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * " & ACQ_DOA_RATE_INP

                    If iStopCodeCurACQ = 1 And StrC4 <> "ACQ01" Then

                        Hs.Exp "A#ACQ_GW_LC_CTA_ALLOC_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_GW_LC_RE_ALLOC_L168" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If

                    Hs.Exp "A#ACQ_GW_LC_NET_PRIODEN.C1#" & strBACustom1 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                            " - A#ACQ_GW_LC_RE_ALLOC_L168" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                            " - A#ACQ_GW_LC_CTA_ALLOC_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Hs.Exp "A#ACQ_GW_LC_NET.C1#" & strBACustom1 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC_NET_PRIODEN" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "- A#ACQ_LC_GW_DEN.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ACQ_CURRENCIES.C4#" & StrC4
                End If

                Set DataUnit2=HS.OpenDataUnitSorted("A{ACQ_GW_DISPOSAL_PERCENT_TOTAL.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]","Account","Ascending")

                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 <> 0 Then
                        sDispTime = Right(StrAccount2,2)
                        iGW_Flag = HS.GetCell("A#ACQ_GW_FLAG" & sDispTime & ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4)

                        If iGW_Flag = 1 Or iGW_Flag = 2 Then
                            If CInt(IntYear) = iACQ_Year Or (CInt(IntYear) = iACQ_Year + 1 And (iACQTYPE = 13 Or iACQTYPE = 11)) Then
                                If sDispTime = "01" Then
                                    Hs.Exp "A#ACQ_YTD_LC_GWDISP" & sDispTime & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC_NET" & sSrcDimC2C3 & ".C4#" & StrC4 & " * " & dData2 & "/ 100"
                                    Hs.Exp "A#ACQ_YTD_DENOM_GWDISP" & sDispTime & ".I#[ICP None].C2#[None].C4#" & StrC4 & " = A#ACQ_GW_DEN.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4 & " * " & dData2 & "/ 100"
                                Else
                                    Hs.Exp "A#ACQ_YTD_LC_GWDISP" & sDispTime & sDestDimC2C3None & ".C4#" & StrC4 & " = (A#ACQ_GW_LC_NET" & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_YTD_LC_GWDISP" & sDispTime & "_TECH" & sSrcDimC2C3 & ".C4#" & StrC4 & ") * " & dData2 & "/ 100"
                                    Hs.Exp "A#ACQ_YTD_DENOM_GWDISP" & sDispTime & ".I#[ICP None].C2#[None].C4#" & StrC4 & " = (A#ACQ_GW_DEN.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4 & " + A#ACQ_YTD_DENOM_GWDISP" & sDispTime & "_TECH.I#[ICP Top].C2#CUSTOM2_TOP.C4#" & StrC4 & ") * " & dData2 & "/ 100"
                                End If
                            Else
                                If sDispTime = "01" Then
                                    Hs.Exp "A#ACQ_YTD_LC_GWDISP" & sDispTime & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_CB_GWDISP_LC" & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * " & dData2 & "/ 100"
                                    Hs.Exp "A#ACQ_YTD_DENOM_GWDISP" & sDispTime & ".I#[ICP None].C2#[None].C4#" & StrC4 & " = A#ACQ_CB_GWDISP_DENOM.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4 & ".Y#PRIOR.P#Last * " & dData2 & "/ 100"
                                Else
                                    Hs.Exp "A#ACQ_YTD_LC_GWDISP" & sDispTime & sDestDimC2C3None & ".C4#" & StrC4 & " = (A#ACQ_CB_GWDISP_LC" & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_YTD_LC_GWDISP" & sDispTime & "_TECH" & sSrcDimC2C3 & ".C4#" & StrC4 & ") * " & dData2 & "/ 100"
                                    Hs.Exp "A#ACQ_YTD_DENOM_GWDISP" & sDispTime & ".I#[ICP None].C2#[None].C4#" & StrC4 & " = (A#ACQ_CB_GWDISP_DENOM.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_YTD_DENOM_GWDISP" & sDispTime & "_TECH.I#[ICP Top].C2#CUSTOM2_TOP.C4#" & StrC4 & ") * " & dData2 & "/ 100"
                                End If
                            End If
                        End If
                    End If
                Next

                Hs.Exp "A#ACQ_CUM_GWDISP_LC" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_CUM_GWDISP_LC" & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_YTD_LC_GWDISP_TOTAL" & sSrcDimC2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQ_CUM_GWDISP_DENOM.I#[ICP None].C2#[None].C4#" & StrC4 & " = A#ACQ_CUM_GWDISP_DENOM.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_YTD_DENOM_GWDISP_TOTAL.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4

                Hs.Exp "A#ACQ_CB_GWDISP_LC" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC_NET" & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_CUM_GWDISP_LC" & sSrcDimC2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQ_CB_GWDISP_DENOM.I#[ICP None].C2#[None].C4#" & StrC4 & " = A#ACQ_GW_DEN.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4 & " + A#ACQ_CUM_GWDISP_DENOM.I#[ICP Top].C2#NONE_ACQ_DIS.C4#" & StrC4

                Set DataUnit2=HS.OpenDataUnit("A{ACQ_YTD_LC_GWDISP_TOTAL.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    sDispTime = Right(StrAccount2,2)
                    iGW_Flag = HS.GetCell("A#ACQ_GW_FLAG" & sDispTime & ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4)
                    dFXRate = Hs.GetCell("A#ACQ_DOA_RATE_DISPOSAL" & sDispTime & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    dFXDOARate = ACQ_DOA_RATE_INP
                    If dFXRate <> 0 And dFXDOARate <> 0 Then
                        Call HS.SetDataWithPOV("A#ACQ_CUM_GWDISP_EOB_EUR_RE_L165" & sDestDimC1C2C3None & ".C4#" & StrC4, dData2 / dFXRate, True)
                        If iGW_Flag = 1 Then
                            Call HS.SetDataWithPOV("A#ACQ_GW_CTA_DISP_L165" & sDestDimC1C2C3None & ".C4#" & StrC4, dData2 / dFXDOARate - dData2 / dFXRate, True)
                        ElseIf iGW_Flag = 2 Then
                            Call HS.SetDataWithPOV("A#ACQ_GW_CTA_IMPRM_L135_DISP" & sDispTime & sDestDimC1C2C3None & ".C4#" & StrC4, dData2 / dFXDOARate - dData2 / dFXRate, True)
                        End If
                    End If
                Next

                Set DataUnit2=HS.OpenDataUnit("A{ACQ_YTD_DENOM_GWDISP_TOTAL.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    sDispTime = Right(StrAccount2,2)
                    iGW_Flag = HS.GetCell("A#ACQ_GW_FLAG" & sDispTime & ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4)
                    dFXRate = Hs.GetCell("A#ACQ_DOA_DENOM_RATE_DISPOSAL" & sDispTime & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#" & StrC3_2 & ".C4#" & StrC4)
                    dFXDOARate = Hs.GetCell("A#ACQ_GW_DEN_DOARATE.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#" & StrC3_2 & ".C4#" & StrC4)
                    If dFXRate <> 0 And dFXDOARate <> 0 Then
                        Call HS.SetDataWithPOV("A#ACQ_CUM_GWDISP_EOB_EUR_RE_L165" & sDestDimC1C2C3None & ".C4#" & StrC4, dData2 / dFXRate, True)
                        If iGW_Flag = 1 Then
                            Call HS.SetDataWithPOV("A#ACQ_GW_CTA_DISP_L165" & sDestDimC1C2C3None & ".C4#" & StrC4, dData2 / dFXDOARate - dData2 / dFXRate, True)
                        ElseIf iGW_Flag = 2 Then
                            Call HS.SetDataWithPOV("A#ACQ_GW_CTA_IMPRM_L135_DISP" & sDispTime & sDestDimC1C2C3None & ".C4#" & StrC4, dData2 / dFXDOARate - dData2 / dFXRate, True)
                        End If
                    End If
                Next

                Set DataUnit2=HS.OpenDataUnitSorted("A{ACQ_GW_DISPOSAL_PERCENT_TOTAL.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]","Account","Ascending")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 <> 0 Then
                        sDispTime = Right(StrAccount2,2)
                        iGW_Flag = HS.GetCell("A#ACQ_GW_FLAG" & sDispTime & ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#" & StrC4)
                        If iGW_Flag = 1 Then
                            If sDispTime = "01" Then
                                Hs.Exp "A#ACQ_CUMGW_CTA_EUR_L135_DISP" & sDispTime & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#ACQ_EVPLUG_CTA_EUR_A105" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_CUMGW_CTA_EUR_L135_CUM_CHANGE" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last) * " & dData2 & "/ 100"
                            Else
                                Hs.Exp "A#ACQ_CUMGW_CTA_EUR_L135_DISP" & sDispTime & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#ACQ_EVPLUG_CTA_EUR_A105" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    " + A#ACQ_GW_CTA_IMPRM_L135_DISP" & sDispTime & "_TECH" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    " + A#ACQ_CUMGW_CTA_EUR_L135_DISP" & sDispTime & "_TECH" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    " + A#ACQ_CUMGW_CTA_EUR_L135_CUM_CHANGE" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last)" & _
                                                                                                                    " * " & dData2 & "/ 100"
                            End If
                        End If
                    End If
                Next

                Hs.Exp "A#ACQ_CUMGW_CTA_EUR_L135_CUM_CHANGE" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_CUMGW_CTA_EUR_L135_CUM_CHANGE" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_CUMGW_CTA_EUR_L135_DISP_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_GW_CTA_IMPRM_L135_DISP_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQ_CUMGW_CTA_EUR_L135_NET" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_EVPLUG_CTA_EUR_A105" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_CUMGW_CTA_EUR_L135_CUM_CHANGE" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Hs.Exp "A#ACQ_TOT_GWDISP_EOB_EUR_RE_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_TOT_GWDISP_EOB_EUR_RE_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last" & _
                                                                                                    " + A#ACQ_CUM_GWDISP_EOB_EUR_RE_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    " - A#ACQ_CUMGW_CTA_EUR_L135_DISP_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    " + A#ACQ_GW_CTA_DISP_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4

                If ACQ_DOA_RATE_INP <> 0 Then
                    Set DataUnit2=HS.OpenDataUnit("A{ACQELIM_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        sSourceAcc = StrAccount2
                        sDestAcc = "ACQ_DOA_EUR_" & sBSAcc
                        Hs.Exp "A#" & sDestAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP

                        Hs.Exp "A#NCI_DOA_EUR_" & sBSAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#NCI_LC_" & sBSAcc & sSrcDimC1C2C3 &".C4#" & StrC4 & " + A#NCI_LC_ZERO_" & sBSAcc & sSrcDimC1C2C3 &".C4#" & StrC4 & ") / " & ACQ_DOA_RATE_INP
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & "_CUM")
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        sSourceAcc = StrAccount2
                        sDestAcc = "ACQ_PPA_DOA_EUR_" & sBSAcc
                        Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP

                        sSourceAcc = "NCI_PPA_LC_CUM_" & sBSAcc
                        sDestAcc = "NCI_PPA_DOA_EUR_CUM_" & sBSAcc
                        Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP

                        sSourceAcc = "NCI_PPA_LC_ACQTIME_" & sBSAcc
                        sDestAcc = "NCI_PPA_DOA_EUR_ACQTIME_" & sBSAcc
                        Hs.Exp "A#" & sDestAcc & ".I#[ICP None].C3#INP.C4#" & StrC4 & " = A#" & sSourceAcc & ".I#[ICP Top].C3#CUSTOM3_TOP.C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Next

                    Hs.Exp "A#ACQ_DTL_DOA_EUR_CUM_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_LC_CUM_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#NCI_DTL_DOA_EUR_CUM_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_DTL_LC_CUM_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#NCI_DTL_DOA_EUR_ACQTIME_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#ACQ_GW_DOA_EUR" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC" & sSrcDimC3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#ACQ_GW_DOA_EUR_RE_ALLOC_L168" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_GW_EUR_RE_ALLOC_L168" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_GW_DOA_EUR_NET" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC_NET" & sSrcDimC3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    Hs.Exp "A#ACQ_CB_GWDISP_DOA_EUR" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_CB_GWDISP_LC" & sSrcDimC3 &".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP

                End If

                Set DataUnit2=HS.OpenDataUnit("A#ACQ_GW_DEN_DOARATE.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 <> 0 Then
                        Hs.Exp "A#ACQ_GW_DOA_EUR_DEN.I#[ICP None].C3#" & StrC3_2 & ".C4#" & StrC4 & " = A#ACQ_GW_DEN.I#[ICP Top].C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & dData2
                        Hs.Exp "A#ACQ_CB_GWDISP_DENOM_DOA_EUR.I#[ICP None].C3#" & StrC3_2 & ".C4#" & StrC4 & " = A#ACQ_CB_GWDISP_DENOM.I#[ICP Top].C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & dData2
                    End If
                Next

                If END_RATE_ENT <> 0 Then
                    Set DataUnit2=HS.OpenDataUnit("A{ACQELIM_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        sSourceAcc = StrAccount2
                        sDestAcc = "ACQ_EOB_EUR_" & sBSAcc
                        Hs.Exp "A#" & sDestAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT

                        Hs.Exp "A#NCI_EOB_EUR_" & sBSAcc & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#NCI_LC_" & sBSAcc & sSrcDimC1C2C3 &".C4#" & StrC4 & " + A#NCI_LC_ZERO_" & sBSAcc & sSrcDimC1C2C3 &".C4#" & StrC4 & ") / " & END_RATE_ENT
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & "_CUM")
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        sSourceAcc = StrAccount2
                        sDestAcc = "ACQ_PPA_EOB_EUR_" & sBSAcc

                        Hs.Exp "A#" & sDestAcc & ".I#[ICP None].C2#[None].C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & " / " & END_RATE_ENT

                        sSourceAcc = "NCI_PPA_LC_CUM_" & sBSAcc
                        sDestAcc = "NCI_EOB_EUR_CUM_" & sBSAcc
                        Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & " / " & END_RATE_ENT

                        sSourceAcc = "NCI_PPA_LC_ACQTIME_" & sBSAcc
                        sDestAcc = "NCI_PPA_EOB_EUR_ACQTIME_" & sBSAcc

                        Hs.Exp "A#" & sDestAcc & ".I#[ICP None].C2#[None].C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & " / " & END_RATE_ENT
                    Next

                    Hs.Exp "A#ACQ_DTL_EOB_EUR_CUM_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_LC_CUM_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & END_RATE_ENT

                    Hs.Exp "A#ACQ_DTL_EOB_EUR_ACQTIME_L295" & ".I#[ICP None].C1#[None].C2#[None].C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & END_RATE_ENT
                    Hs.Exp "A#NCI_DTL_EOB_EUR_CUM_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_DTL_LC_CUM_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & END_RATE_ENT

                    Hs.Exp "A#NCI_DTL_EOB_EUR_ACQTIME_L295" & ".I#[ICP None].C1#[None].C2#[None].C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 &".C4#" & StrC4 & " / " & END_RATE_ENT
                    Hs.Exp "A#ACQ_GW_EOB_EUR" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC" & sSrcDimC3 &".C4#" & StrC4 & " / " & END_RATE_ENT
                    Hs.Exp "A#ACQ_GW_EOB_EUR_RE_ALLOC_L168" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_GW_EUR_RE_ALLOC_L168" & sSrcDimC3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_GW_EOB_EUR_NET" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_GW_LC_NET" & sSrcDimC3 &".C4#" & StrC4 & " / " & END_RATE_ENT
                    Hs.Exp "A#ACQ_CB_GWDISP_EOB_EUR" & sDestDimC3None & ".C4#" & StrC4 & " = A#ACQ_CB_GWDISP_LC" & sSrcDimC3 &".C4#" & StrC4 & " / " & END_RATE_ENT

                End If

                Set DataUnit2=HS.OpenDataUnit("A#ACQ_ENDRATE_FIXED_GW.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4 & ".I#[ICP Top]")
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If dData2 <> 0 Then
                        Hs.Exp "A#ACQ_GW_EOB_EUR_DEN.I#[ICP None].C3#" & StrC3_2 & ".C4#" & StrC4 & " = A#ACQ_GW_DEN.I#[ICP Top].C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & dData2
                        Hs.Exp "A#ACQ_CB_GWDISP_DENOM_EOB_EUR.I#[ICP None].C3#" & StrC3_2 & ".C4#" & StrC4 & " = A#ACQ_CB_GWDISP_DENOM.I#[ICP Top].C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & dData2
                    End If
                Next

                Set DataUnit2=HS.OpenDataUnit("A{ACQ_A4.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C4#" & StrC4)
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    aAccParts = Split(StrAccount2,"_")
                    sBSAcc = aAccParts(UBound(aAccParts))
                    sSourceAcc1 = StrAccount2
                    sSourceAcc2 = ""
                    sDestAcc = ""

                    If Left(StrAccount2,16) = "NCI_EOB_EUR_CUM_" Then
                        sSourceAcc2 = "NCI_PPA_DOA_EUR_CUM_" & sBSAcc
                        sDestAcc = "NCI_PPA_CTA_EUR_CUM_" & sBSAcc
                    Else
                        For Each sPart in aAccParts

                            If sPart = aAccParts(LBound(aAccParts)) Then
                                sSourceAcc2 = sPart
                                sDestAcc = sPart
                            Else

                                If sPart <> "EOB" Then
                                    sSourceAcc2 = sSourceAcc2 & "_" & sPart
                                    sDestAcc = sDestAcc & "_" & sPart
                                Else
                                    sSourceAcc2 = sSourceAcc2 & "_DOA"
                                    sDestAcc = sDestAcc & "_CTA"
                                End If
                            End If
                        Next
                    End If
                    If StrAccount2 = "ACQ_CB_GWDISP_DENOM_EOB_EUR" Or StrAccount2 = "ACQ_GW_EOB_EUR_DEN" Then
                        sDestC3 = StrC3_2
                        sSourceC3 = StrC3_2
                    Else
                        sDestC3 = "INP"
                        sSourceC3 = "INP_ACQ_CURRENCIES"
                    End If

                    Hs.Exp "A#" & sDestAcc & ".C2#" & StrC2_2 & ".C3#" & sDestC3 & ".C4#" & StrC4 & " = A#" & sSourceAcc1 & ".C2#" & StrC2_2 & ".C3#" & sSourceC3 & ".C4#" & StrC4 & " - A#" & sSourceAcc2 & ".C2#" & StrC2_2 & ".C3#" & sSourceC3 & ".C4#" & StrC4

                Next

                For j = 1 To iNumOfOwners
                    ACQ_PRICE_OW = Hs.GetCell("A#ACQ_PRICE_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    DOA_RATE_OW = Hs.GetCell("A#ACQ_DOA_RATE_OW" & j & "_CALC" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    EOB_RATE_OW = Hs.GetCell("A#ACQ_ENDRATE_OW" & j & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If ACQ_PRICE_OW <> 0 Then
                        If DOA_RATE_OW <> 0 Then
                            Hs.Exp "A#ACQ_DOA_EUR_OW" & j & "_A165I" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & ACQ_PRICE_OW / DOA_RATE_OW
                        End If
                        If EOB_RATE_OW <> 0 Then
                            Hs.Exp "A#ACQ_EOB_EUR_OW" & j & "_A165I" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & ACQ_PRICE_OW  / EOB_RATE_OW
                        End If
                        Hs.Exp "A#ACQ_CTA_EUR_OW" & j & "_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_EOB_EUR_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_DOA_EUR_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                    ACQ_COND_PRICE_OW = Hs.GetCell("A#ACQ_COND_PRICE_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If ACQ_COND_PRICE_OW <> 0 Then
                        If DOA_RATE_OW <> 0 Then
                            Hs.Exp "A#ACQ_COND_DOA_EUR_OW" & j & "_L365E" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & ACQ_COND_PRICE_OW / DOA_RATE_OW
                        End If
                        If EOB_RATE_OW <> 0 Then
                            Hs.Exp "A#ACQ_COND_EOB_EUR_OW" & j & "_L365E" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = "    & ACQ_COND_PRICE_OW / EOB_RATE_OW
                        End If
                        Hs.Exp "A#ACQ_COND_CTA_EUR_OW" & j & "_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_COND_EOB_EUR_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_COND_DOA_EUR_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                Next

                ACQ_PRICE_OW_INDIRECT = Hs.GetCell("A#ACQ_PRICE_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                DOA_RATE_OW = Hs.GetCell("A#ACQ_DOA_RATE_OW1_CALC" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                EOB_RATE_OW = Hs.GetCell("A#ACQ_ENDRATE_OW1" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                If dACQ_IndirectOwnership <> 0 Then
                    If ACQ_PRICE_OW_INDIRECT <> 0 And DOA_RATE_OW <> 0 Then
                        Hs.Exp "A#ACQ_DOA_EUR_OW1_A165I_INDIRECT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & ACQ_PRICE_OW_INDIRECT / DOA_RATE_OW
                    End If
                    If ACQ_PRICE_OW_INDIRECT <> 0 And EOB_RATE_OW <> 0 Then
                        Hs.Exp "A#ACQ_EOB_EUR_OW1_A165I_INDIRECT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & ACQ_PRICE_OW_INDIRECT  / EOB_RATE_OW
                    End If
                    Hs.Exp "A#ACQ_CTA_EUR_OW1_L135_INDIRECT" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_EOB_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_DOA_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4
                End If

                sCalcSrc1 = ""
                sCalcSrc2 = ""
                Set DataUnit2=HS.OpenDataUnit("A#ACQ_POST_ACQ_RE_L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4)
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    sOWNum = Mid(StrAccount2,16,1)
                    DEN_DOA_RATE_OW = Hs.GetCell("A#ACQ_POST_ACQ_RE_DOARATE" & sSrcDimC1C2 & ".C3#" & StrC3_2 & ".C4#" & StrC4)
                    If DEN_DOA_RATE_OW <> 0 Then
                        If sCalcSrc1 <> "" Then
                            sCalcSrc1 = sCalcSrc1 & " + "
                        End If
                        sCalcSrc1 = sCalcSrc1 & " A#" & StrAccount2 & sSrcDimC1C2 & ".C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & DEN_DOA_RATE_OW
                    End If
                    DEN_EOB_RATE_OW = Hs.GetCell("A#ACQ_RATE_FIXED_OW_RE" & sSrcDimC1C2 & ".C3#" & StrC3_2 & ".C4#" & StrC4)
                    If DEN_EOB_RATE_OW <> 0 Then
                        If sCalcSrc2 <> "" Then
                            sCalcSrc2 = sCalcSrc2 & " + "
                        End If
                        sCalcSrc2 = sCalcSrc2 & " A#" & StrAccount2 & sSrcDimC1C2 & ".C3#" & StrC3_2 & ".C4#" & StrC4 & " / " & DEN_EOB_RATE_OW
                    End If

                    If j = NumItems2 - 1 Then
                        If Len(sCalcSrc1) > 0 Then
                            Hs.Exp "A#ACQ_POST_ACQ_RE_DOA_EUR_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & sCalcSrc1
                        End If
                        If Len(sCalcSrc2) > 0 Then

                            Hs.Exp "A#ACQ_POST_ACQ_RE_EOB_EUR_L166" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & sCalcSrc2
                        End If
                        Hs.Exp "A#ACQ_POST_ACQ_RE_CTA_EUR_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_POST_ACQ_RE_EOB_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_POST_ACQ_RE_DOA_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                Next

                If END_RATE_ENT <> 0 And AVG_RATE_ENT <> 0 Then
                    dNCI_PERCENT = Hs.GetCell("A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If dNCI_PERCENT <> 0 Then
                        Hs.Exp "A#NCI_CUM_TR_LC_L205" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#ACQ_PPAD_CUM_TR_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ") * " & dNCI_PERCENT / 100
                    End If
                    Hs.Exp "A#ACQ_PPA_RE_CUM_TR_LC_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_CUM_TR_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_CUM_TR_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Hs.Exp "A#ACQ_PPA_CTA_CUM_TR_EUR_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#ACQ_PPA_RE_CUM_TR_LC_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP & ") - A#ACQ_PPA_RE_CUM_TR_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Hs.Exp "A#NCI_CUM_EOP_EUR_L205" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_CUM_TR_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT

                    iIncludeFirst = Hs.GetCell("A#ACQ_NBR_MONTHS_INCLUDE_FIRST" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    PeriodNo = GetPeriodNumber(StrPeriod)
                    If iIncludeFirst = 1 Then
                        iNumOfMonthsSinceACQ = (IntYear - iACQ_Year) * 12 + PeriodNo - iACQ_Period + 1
                    Else
                        iNumOfMonthsSinceACQ = (IntYear - iACQ_Year) * 12 + PeriodNo - iACQ_Period
                    End If
                    If iNumOfMonthsSinceACQ > 0 Then
                        Hs.Exp "A#ACQ_NBR_PASSEDMONTHS" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & iNumOfMonthsSinceACQ
                    End If

                    iNumOfDeprMonths = 0

                    If CInt(IntYear) = iACQ_Year + 1 And Hs.GetCell("A#ACQ_PPAD_MONTHS_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last") = 0 Then
                        iNumOfDeprMonths = iNumOfMonthsSinceACQ
                    ElseIf CInt(IntYear) > iACQ_Year Then
                        iNumOfDeprMonths = PeriodNo
                    ElseIf CInt(IntYear) = iACQ_Year Then
                        If iIncludeFirst = 1 Then
                            iNumOfDeprMonths = PeriodNo - iACQ_Period + 1
                        Else
                            iNumOfDeprMonths = PeriodNo - iACQ_Period
                        End If
                    Else
                        iNumOfDeprMonths = 0
                    End If

                    If iStopCode = 1 And iNumOfDeprMonths > 0 Then

                        Set DataUnit2=HS.OpenDataUnit("A#ACQ_STOP.I#[ICP Top].C1#CUSTOM1_TOP.C2#Custom2_TOP.C3#CUSTOM3_TOP")
                        NumItems2 = DataUnit2.GetNumItems
                        For j = 0 To NumItems2 - 1
                            Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                            iClosingMonth = Hs.GetCell("A#ACQ_MONTH" & sSrcDimC1C2C3 & ".C4#" & StrC4_2)
                            If IsNumeric(iClosingMonth) And dData2 <> 0 Then

                                iNumOfDeprMonths = iNumOfDeprMonths - PeriodNo + iClosingMonth
                            End If
                        Next
                    End If

                    If iNumOfDeprMonths > 0 Then
                        Hs.Exp "A#ACQ_NBR_MONTHS_CY" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & iNumOfDeprMonths
                    End If

                    aAccToProcess = Array("A115a","A115b","A115c","A115d","A115e","A122","A125","A218","A105")
                    For Each sAcc In aAccToProcess

                        sSourceAcc = "ACQ_PPAI_YTD_LC_" & sAcc
                        sSourceAcc2 = "ACQ_PPAI_CUM_LC_" & sAcc
                        sDestAcc = "ACQ_PPAI_CUM_LC_" & sAcc
                        Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " + " & "A#" & sSourceAcc2 & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last"
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_LC_TOTAL.[Base]}.I#[ICP Top].C2{NONE_ACQ_DIS.[Base]}.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))

                        sSourceAcc = StrAccount2
                        sSourceAcc2 = "ACQ_PPAD_CUM_TR_LC_" & sBSAcc
                        sDestAcc = "ACQ_PPA_BASIS_LC_" & sBSAcc
                        aAccToProcess = Array("A115a","A115b","A115c","A115d","A115e","A122","A125","A218")
                        If IsItemInList(sBSAcc,aAccToProcess) = True Then
                            Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#" & sSourceAcc2 & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4
                        End If

                        iDepMonths = 0
                        aAccToProcess = Array("A115a","A115b","A115c","A115d","A125","A218")
                        If IsItemInList(sBSAcc,aAccToProcess) = True Then
                            iDepMonths = Hs.GetCell("A#ACQ_PPAD_MONTHS_" & sBSAcc & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        End If
                        If iDepMonths > 0 Then
                            sSourceAcc = "ACQ_PPA_BASIS_LC_" & sBSAcc

                            sDestAcc = "ACQ_PPAD_MON_AMT_LC_" & sBSAcc
                            aAccToProcess = Array("A115a","A115b","A115c","A115d","A125","A218")

                            If IsItemInList(sBSAcc,aAccToProcess) = True Then
                                Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = -A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & iDepMonths
                            End If

                            aAccToProcess = Array("A115a","A115b","A115c","A115d","A125","A218")
                            If IsItemInList(sBSAcc,aAccToProcess) = True Then

                                dPPA_BASIS = Hs.GetCell("A#ACQ_PPA_BASIS_LC_" & sBSAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4)
                                dPPA_CUM_Depr_PrevY = Hs.GetCell("A#ACQ_PPAD_CUM_LC_" & sBSAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last")
                                dPPA_MONTH_Depr = Hs.GetCell("A#ACQ_PPAD_MON_AMT_LC_" & sBSAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4) * iNumOfDeprMonths
                                dPPA_CUM_Imparements = Hs.GetCell("A#ACQ_PPAI_CUM_LC_" & sBSAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4)
                                dPPA_CUM_Depr_Curry_FINAL = 0

                                If dPPA_BASIS > 0 And dPPA_BASIS + dPPA_CUM_Depr_PrevY + dPPA_MONTH_Depr + dPPA_CUM_Imparements >= 0 Then

                                    dPPA_CUM_Depr_Curry_FINAL = dPPA_MONTH_Depr

                                ElseIf dPPA_BASIS < 0 And dPPA_BASIS + dPPA_CUM_Depr_PrevY + dPPA_MONTH_Depr + dPPA_CUM_Imparements <= 0 Then

                                    dPPA_CUM_Depr_Curry_FINAL = dPPA_MONTH_Depr

                                ElseIf dPPA_BASIS > 0 And dPPA_BASIS + dPPA_CUM_Depr_PrevY + dPPA_MONTH_Depr + dPPA_CUM_Imparements < 0 Then
                                    dPPA_CUM_Depr_Curry_FINAL = (dPPA_BASIS + dPPA_CUM_Depr_PrevY + dPPA_CUM_Imparements) * -1

                                ElseIf dPPA_BASIS < 0 And dPPA_BASIS + dPPA_CUM_Depr_PrevY + dPPA_MONTH_Depr + dPPA_CUM_Imparements > 0 Then
                                    dPPA_CUM_Depr_Curry_FINAL = (dPPA_BASIS + dPPA_CUM_Depr_PrevY + dPPA_CUM_Imparements) * -1
                                End If
                                sDestAcc = "ACQ_PPAD_YTD_LC_" & sBSAcc
                                If dPPA_CUM_Depr_Curry_FINAL <> 0 Then

                                    Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = " & dPPA_CUM_Depr_Curry_FINAL
                                End If
                            End If

                            aAccToProcess = Array("A115a","A115b","A115c","A115d","A125","A218")
                            sSourceAcc = "ACQ_PPAD_YTD_LC_" & sBSAcc
                            sDestAcc = "ACQ_PPAD_CUM_LC_" & sBSAcc
                            If IsItemInList(sBSAcc,aAccToProcess) = True Then
                                If CInt(IntYear) > iACQ_Year Then
                                    sSourceAcc2 = "ACQ_PPAD_CUM_LC_" & sBSAcc
                                    Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " + " & "A#" & sSourceAcc2 & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last"

                                ElseIf CInt(IntYear) > 2023  And CInt(IntYear) = iACQ_Year Then
                                    Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4
                                ElseIf CInt(IntYear) <= 2023 And CInt(IntYear) = iACQ_Year Then
                                    sSourceAcc2 = "ACQ_PPAD_CUM_TR_LC_" & sBSAcc
                                    Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " + " & "A#" & sSourceAcc2 & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4
                                End If
                            End If

                        End If

                        sSourceAcc = "ACQ_PPA_BASIS_LC_" & sBSAcc
                        sSourceAcc2 = "ACQ_PPAD_CUM_LC_" & sBSAcc
                        sSourceAcc3 = "ACQ_PPAI_CUM_LC_" & sBSAcc
                        sDestAcc = "ACQ_PPACB_EOP_LC_" & sBSAcc
                        aAccToProcess = Array("A115a","A115b","A115c","A115d","A125","A218")
                        If IsItemInList(sBSAcc,aAccToProcess) = True Then
                            Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#" & sSourceAcc2 & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#" & sSourceAcc3 & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4
                        End If

                        sSourceAcc = "ACQ_PPA_BASIS_LC_" & sBSAcc
                        sSourceAcc2 = "ACQ_PPAI_CUM_LC_" & sBSAcc
                        sDestAcc = "ACQ_PPACB_EOP_LC_" & sBSAcc
                        aAccToProcess = Array("A115e","A122")
                        If IsItemInList(sBSAcc,aAccToProcess) = True Then
                            Hs.Exp "A#" & sDestAcc & ".C1#" & StrC1_2 & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#" & sSourceAcc2 & ".C1#" & StrC1_2 & sSrcDimC2C3 & ".C4#" & StrC4
                        End If

                    Next

                    If CInt(IntYear) = iACQ_Year Or (CInt(IntYear) = iACQ_Year + 1 And (iACQTYPE = 11)) Then

                        Hs.Exp "A#ACQ_DTL_TAXRATE_PY" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DT_DOA_PERCENTAGE" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    ElseIf CInt(IntYear) > iACQ_Year Then
                        Hs.Exp "A#ACQ_DTL_TAXRATE_REPORTING" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#LTR_DEFTAX.E#" & strGLEnt & sSrcDimC1C2C3 & ".C4#[None]" & ".Y#PRIOR.P#Last"
                        dDefTaxRate = 0

                        bReal = False
                        dDefTaxRate = Hs.GetCellRealData("A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last",bReal)

                        If bReal = False Then
                            dDefTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last")
                        End If
                        Hs.Exp "A#ACQ_DTL_TAXRATE_PY" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dDefTaxRate
                    End If

                    If CInt(IntYear) = iACQ_Year Or (CInt(IntYear) = iACQ_Year + 1 And (iACQTYPE = 13 Or iACQTYPE = 11)) Then
                        Hs.Exp "A#ACQ_DTLOB_EOP_LC_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    ElseIf CInt(IntYear) > iACQ_Year Then
                        Hs.Exp "A#ACQ_DTLOB_EOP_LC_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last"
                    End If

                    If Hs.GetCell("A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4) <> 0 And iACQTYPE <> 3 And iACQTYPE <> 4 And iACQTYPE <> 6 Then
                        Hs.Exp "A#ACQ_DTLCHG_TAXR_YTD_LC_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPACB_EOP_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * (A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ") / 100"
                    End If

                    dVA_FLAG = Hs.GetCell("A#ACQ_VA_FLAG" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    Hs.Exp "A#ACQ_DTLCHG_OTH_YTD_LC_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#ACQ_PPAD_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAI_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ") * A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100 * (1 - " & dVA_FLAG & ")"

                    Hs.Exp "A#ACQ_DTLCHG_TOTAL_CUM_LC_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Hs.Exp "A#ACQ_PPAD_IS_YTD_LC_RM51" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_YTD_LC_A115b" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAD_YTD_LC_A115c" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAD_YTD_LC_A115d" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A115b" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A115c" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A115d" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A115e" & sSrcDimC2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_PPAD_IS_YTD_LC_RM53" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_YTD_LC_A115a" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A115a" & sSrcDimC2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_PPAD_IS_YTD_LC_RM55" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_YTD_LC_A125" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A125" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A122" & sSrcDimC2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_PPAD_IS_YTD_LC_RM32" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_YTD_LC_A218" & sSrcDimC2C3 & ".C4#" & StrC4 & _
                                                                                            " + A#ACQ_PPAI_YTD_LC_A218" & sSrcDimC2C3 & ".C4#" & StrC4

                    If iACQTYPE = 6 Then

                        Hs.Exp "A#ACQ_PPAD_IS_YTD_LC_RM58" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAI_YTD_LC_A105" & sSrcDimC2C3 & ".C4#" & StrC4 & " - A#ACQ_PPA_RE_CUM_TR_LC_L165" & sSrcDimC2C3 & ".C4#" & StrC4
                    Else
                        Hs.Exp "A#ACQ_PPAD_IS_YTD_LC_RM58" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAI_YTD_LC_A105" & sSrcDimC2C3 & ".C4#" & StrC4
                    End If

                    If CInt(IntYear) < 2023 Then
                        Hs.Exp "A#ACQ_DTL_CHG_IS_YTD_LC_R935" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQ_DTLCHG_TOTAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    " + A#ACQ_DTLCHG_MANUAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                        Hs.Exp "A#ACQ_DTL_CHG_PY_YTD_LC_R936" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQ_DTLCHG_MANUAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Else
                        Hs.Exp "A#ACQ_DTL_CHG_IS_YTD_LC_R935" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQ_DTLCHG_TOTAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    " + A#ACQ_DTLCHG_MANUAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                    " -A#ACQ_DTLCHG_MANUAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If

                    Hs.Exp "A#ACQ_PPA_IS_YTD_LC_TOTAL_CUM" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_IS_YTD_LC_TOTAL_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_PPA_IS_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    If iACQTYPE <> 10 Then
                        Hs.Exp "A#NCI_IS_YTD_LC_R941" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQ_PPA_IS_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                    ElseIf iACQTYPE = 10 And CInt(IntYear) = iACQ_Year Then
                        StrACQPeriod = GetPeriodLabel(iACQ_Period)

                        Hs.Exp "A#NCI_IS_YTD_LC_R941" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = (A#ACQ_PPA_IS_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM - A#ACQ_PPA_IS_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM.P#" & StrACQPeriod & ") * A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                    ElseIf iACQTYPE = 10 And CInt(IntYear) > iACQ_Year Then
                        Hs.Exp "A#NCI_IS_YTD_LC_R941" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_IS_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM * A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100"
                    End If

                    If iACQTYPE = 10 And  CInt(IntYear) = iACQ_Year Then
                        Hs.Exp "A#NCI_RE_IMPACT_LC_L205" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -(A#ACQ_PPA_IS_YTD_LC_TOTAL_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM" & _
                                                                                                   " + A#ACQ_PPAD_CUM_TR_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM" & _
                                                                                                   " - A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM)" & _
                                                                                                   " * A#ACQ_PERCENT_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / 100" & _
                                                                                                   " + A#NCI_IS_YTD_LC_R941" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If

                    If (CInt(IntYear) = iACQ_Year And (iACQTYPE = 3 Or iACQTYPE = 12 Or iACQTYPE = 6 Or iACQType = 4 Or iACQTYPE = 16)) Or (iACQTYPE = 13 And CInt(IntYear) = iACQ_Year + 1) Then
                        Hs.Exp "A#ACQ_RECB_EOP_LC_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_RE_CUM_TR_LC_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_RE_IMPACT_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Else
                        Hs.Exp "A#ACQ_RECB_EOP_LC_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_RECB_EOP_LC_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last" & _
                                                                                                " + A#ACQ_PPA_IS_YTD_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last" & _
                                                                                                " + A#NCI_IS_YTD_LC_R941" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last" & _
                                                                                                " - A#NCI_RE_IMPACT_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    End If

                    If ((iACQTYPE = 3 Or iACQTYPE = 12 Or iACQTYPE = 6 Or iACQType = 4) And CInt(IntYear) = iACQ_Year) Or (iACQTYPE = 13 And CInt(IntYear) = iACQ_Year + 1) Then
                        Hs.Exp "A#NCI_RE_LC_205" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_CUM_TR_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4  & " - A#NCI_IS_YTD_LC_R941" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Else
                        Hs.Exp "A#NCI_RE_LC_205" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_RE_LC_205" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last - A#NCI_IS_YTD_LC_R941" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#NCI_RE_IMPACT_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    End If

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_IS_YTD_LC_R95.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        If dData2 <> 0 Then
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            sDestAcc = Replace(StrAccount2,"_LC_","_EUR_")
                            Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & StrAccount2 & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & AVG_RATE_ENT

                        End If
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAD_CUM_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        If dData2 <> 0 Then
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            sSourceAcc = "ACQ_PPAD_YTD_LC_" & sBSAcc
                            sDestAcc = "ACQ_PPAD_YTD_EUR_" & sBSAcc
                            Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT

                            sSourceAcc = "ACQ_PPAD_CUM_LC_" & sBSAcc
                            sDestAcc = "ACQ_PPAD_CUM_EUR_" & sBSAcc
                            Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT
                        End If
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAI_CUM_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        If dData2 <> 0 Then
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            sSourceAcc = "ACQ_PPAI_YTD_LC_" & sBSAcc
                            sDestAcc = "ACQ_PPAI_YTD_EUR_" & sBSAcc
                            Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT

                            sSourceAcc = "ACQ_PPAI_CUM_LC_" & sBSAcc
                            sDestAcc = "ACQ_PPAI_CUM_EUR_" & sBSAcc
                            Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT
                        End If
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPACB_EOP_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        If dData2 <> 0 Then
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            sSourceAcc = "ACQ_PPACB_EOP_LC_" & sBSAcc
                            sDestAcc = "ACQ_PPACB_EOP_EUR_" & sBSAcc
                            Hs.Exp "A#" & sDestAcc & sDestDimC2C3None & ".C4#" & StrC4 & " = A#" & sSourceAcc & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT
                        End If
                    Next

                    Hs.Exp "A#ACQ_DTLCHG_TOTAL_YTD_EUR_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCHG_TOTAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT
                    Hs.Exp "A#ACQ_DTLCB_EOP_EUR_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT
                    Hs.Exp "A#ACQ_DTLCHG_TOTAL_CUM_EUR_L295" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCHG_TOTAL_CUM_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT

                    If StrC4 <> "ACQ01" Then
                        Hs.Exp "A#ACQ_RECB_IMPACT_EOP_EUR_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_RE_IMPACT_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP
                    End If

                    If (CInt(IntYear) = iACQ_Year And (iACQTYPE = 3 Or iACQTYPE = 12 Or iACQTYPE = 6 Or iACQType = 4 Or iACQType = 16)) Or (iACQTYPE = 13 And CInt(IntYear) = iACQ_Year + 1) Then
                        Hs.Exp "A#ACQ_RECB_EOP_EUR_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_RE_CUM_TR_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Else
                        Hs.Exp "A#ACQ_RECB_EOP_EUR_L165" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_RECB_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last + A#ACQ_IS_YTD_EUR_R95" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last - A#ACQ_RECB_IMPACT_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    End If

                    Hs.Exp "A#ACQ_CTACB_RE_EOP_EUR_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_RECB_EOP_LC_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & " - A#ACQ_RECB_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_CTACB_AVG_EOP_EUR_L135" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_IS_YTD_LC_R95" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & " - A#ACQ_IS_YTD_EUR_R95" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQ_NCICB_NCI_EOP_EUR_L205" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCI_RE_LC_205" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "  / " & END_RATE_ENT

                End If

                Hs.Exp "A#ACQELIMTOT_EUR_RM51" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM51" & sSrcDimC2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_RM53" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM53" & sSrcDimC2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_RM55" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM55" & sSrcDimC2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_RM58" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM58" & sSrcDimC2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_RM32" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM32" & sSrcDimC2C3 & ".C4#" & StrC4

                If CInt(IntYear) < 2023 Then
                    Hs.Exp "A#ACQELIMTOT_EUR_R935.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_DTL_CHG_IS_YTD_EUR_R935" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_R936.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_DTL_CHG_PY_YTD_EUR_R936" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Else
                    Hs.Exp "A#ACQELIMTOT_EUR_R935.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_DTL_CHG_IS_YTD_EUR_R935" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DTL_CHG_PY_YTD_EUR_R936" & sSrcDimC1C2C3 & ".C4#" & StrC4
                End If
                Hs.Exp "A#ACQELIMTOT_EUR_R941.C1#[None].I#" & sICP & ".C2#" & sC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_IS_YTD_EUR_R941" & sSrcDimC1C2C3 & ".C4#" & StrC4

                sCalcSrc2 = ""
                sCalcSrc3 = ""
                sCalcSrc4 = ""
                sCalcSrc5 = ""
                sCalcSrc6 = ""
                For j = 1 To iNumOfOwners
                    sC3OwnerCur = "C3_ACQ_EUR"
                    Set DataUnit2=HS.OpenDataUnit("A#ACQ_OWNER" & j & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3{ACQ_CURRENCIES.[Base]}.C4#" & StrC4 & ".I#[ICP Top]")
                    NumItems2 = DataUnit2.GetNumItems
                    For k = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(k, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        If dData2 = 1 Then
                            sC3OwnerCur = StrC3_2
                        End If
                    Next

                    ACQ_OW = Hs.GetCell("A#ACQ_EOB_EUR_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If ACQ_OW <> 0 Then
                        If sCalcSrc5 <> "" Then
                            sCalcSrc5 = sCalcSrc5 & " + "
                        End If
                        dOwnerData = Hs.GetCell("A#ACQ_EOB_EUR_OW" & j & "_A165I.C1#" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_A165I.I#" & sICP & ".C1#[None].C2#[None].C3#" & sC3OwnerCur & ".C4#" & StrC4, dOwnerData, True)
                        sCalcSrc5 = sCalcSrc5 & " A#ACQ_DOA_EUR_OW" & j & "_A165I" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                    ACQ_COND_OW = Hs.GetCell("A#ACQ_COND_EOB_EUR_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If ACQ_COND_OW <> 0 Then
                        If sCalcSrc6 <> "" Then
                            sCalcSrc6 = sCalcSrc6 & " + "
                        End If
                        dOwnerData = Hs.GetCell("A#ACQ_COND_EOB_EUR_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_L365E.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3OwnerCur & ".C4#" & StrC4, -dOwnerData, True)
                        sCalcSrc6 = sCalcSrc6 & " A#ACQ_COND_DOA_EUR_OW" & j & "_L365E" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                    CTA_OW = Hs.GetCell("A#ACQ_CTA_EUR_OW" & j & "_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4)

                    If CTA_OW <> 0 Then
                        If sCalcSrc3 <> "" Then
                            sCalcSrc3 = sCalcSrc3 & " + "
                        End If
                        sCalcSrc3 = sCalcSrc3 & " A#ACQ_CTA_EUR_OW" & j & "_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If
                    CTA_COND_OW = Hs.GetCell("A#ACQ_COND_CTA_EUR_OW" & j & "_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                    If CTA_COND_OW <> 0 Then
                        If sCalcSrc4 <> "" Then
                            sCalcSrc4 = sCalcSrc4 & " + "
                        End If
                        sCalcSrc4 = sCalcSrc4 & " A#ACQ_COND_CTA_EUR_OW" & j & "_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    End If

                    If j = iNumOfOwners Then
                        If Len(sCalcSrc3) > 0 Then
                            Hs.Exp "A#ACQELIMTOT_EUR_CTA_A165I" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = -(" & sCalcSrc3 & ")"
                        End If
                        If Len(sCalcSrc4) > 0 Then

                            Hs.Exp "A#ACQELIMTOT_EUR_CTA_L365E" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = -(" & sCalcSrc4 & ")"
                        End If

                        If ((iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1) Or (iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year))) And sC2Earmark <> "[None]" Then
                            iMultiply = 1
                            If iACQType = 6 Then
                                iMultiply = -1
                            End If
                            If Len(sCalcSrc5) > 0 Then
                                Hs.Exp "A#ACQELIMTOT_EUR_A165I_CF.I#" & sICP & ".C1#[None].C2#" & sC2Earmark & ".C3#INP.C4#" & StrC4 & " = -(" & sCalcSrc5 & ") * " & iMultiply
                            End If
                            If Len(sCalcSrc6) > 0 Then
                                Hs.Exp "A#ACQELIMTOT_EUR_CL365E.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = (" & sCalcSrc6 & ") * " & iMultiply
                            End If
                        End If
                    End If
                Next

                aEndings = Array("A115a","A115b","A115c","A115d","A125","A218")
                For Each sEnd In aEndings
                    If iACQType <> 10 Then
                        Hs.Exp "A#ACQELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPA_EOB_EUR_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " - A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAD_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & ") * A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "/100"
                        Hs.Exp "A#NCIELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAD_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & ") * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "/100"
                    Else
                        Hs.Exp "A#ACQELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPA_EOB_EUR_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " - A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAD_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM + A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM / " & END_RATE_ENT & ") * (A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & ") /100"
                        Hs.Exp "A#NCIELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAD_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM + A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM / " & END_RATE_ENT & ") * (A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & ") /100"
                    End If
                Next

                aEndings = Array("A115e","A122")
                For Each sEnd In aEndings
                    If iACQType <> 10 Then
                        Hs.Exp "A#ACQELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPA_EOB_EUR_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " - A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & ") * A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "/100"
                        Hs.Exp "A#NCIELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & ") * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "/100"
                    Else
                        Hs.Exp "A#ACQELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_PPA_EOB_EUR_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " - A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM / " & END_RATE_ENT & ") * (A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & ") /100"
                        Hs.Exp "A#NCIELIMTOT_EUR_" & sEnd & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_PPA_EOB_EUR_ACQTIME_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & " + (A#ACQ_PPAI_CUM_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & "_CUM / " & END_RATE_ENT & ") * (A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & ") /100"
                    End If
                Next

                Set DataUnit2=HS.OpenDataUnit("A#ACQ_CB_GWDISP_EOB_EUR_TOTAL.I#[ICP Top].C4#" & StrC4)
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If UCase(StrC3_2) = "INP" Then
                        sDestC3 = sC3EntCur
                    Else
                        sDestC3 = StrC3_2
                    End If
                    If StrC1_2 = "[None]" Or StrC1_2 = "PC99" Then
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_A106.C1#" & StrC1_2 & sDestDimC2Earmark & ".C3#" & sDestC3 & ".C4#" & StrC4, dData2, True)
                    Else
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_A105.C1#" & StrC1_2 & sDestDimC2Earmark & ".C3#" & sDestC3 & ".C4#" & StrC4, dData2, True)
                    End If
                Next

                Set DataUnit2=HS.OpenDataUnit("A#ACQ_PPAI_CUM_EUR_A105.I#[ICP Top].C4#" & StrC4)
                NumItems2 = DataUnit2.GetNumItems
                For j = 0 To NumItems2 - 1
                    Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                    If StrC1_2 = "[None]" Or StrC1_2 = "PC99" Then
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_A106.C1#" & StrC1_2 & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4, dData2, True)
                    Else
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_A105.C1#" & StrC1_2 & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4, dData2, True)
                    End If
                Next

                Hs.Exp "A#ACQELIMTOT_EUR_L105" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_EOB_EUR_L105" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#NCIELIMTOT_EUR_L105" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_EOB_EUR_L105" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_L115" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_EOB_EUR_L115" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#NCIELIMTOT_EUR_L115" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_EOB_EUR_L115" & sSrcDimC1C2C3 & ".C4#" & StrC4

                If iACQType = 10 And CInt(IntYear) = CInt(iACQ_Year) Then
                    Hs.Exp "A#ACQELIMTOT_EUR_L165_RET_MIN" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_POST_ACQ_RE_EOB_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_L165_RET_NCI" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_RECB_IMPACT_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Else
                    Hs.Exp "A#ACQELIMTOT_EUR_L165" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_POST_ACQ_RE_EOB_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4
                End If

                Hs.Exp "A#ACQELIMTOT_EUR_L165_GWDISP" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = -A#ACQ_TOT_GWDISP_EOB_EUR_RE_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Hs.Exp "A#ACQELIMTOT_EUR_L165_PPA" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = (A#ACQ_RECB_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_RECB_IMPACT_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ") * -1"
                 Hs.Exp "A#ACQELIMTOT_EUR_L166" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#ACQ_EOB_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#NCIELIMTOT_EUR_L166" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCI_EOB_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_L168" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_GW_EOB_EUR_RE_ALLOC_L168" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_L200.C1#[None]" & sDestDimC2Earmark & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = - A#ACQ_EVPLUG_EUR_L200" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_L205.C1#[None].I#" & sICP & ".C2#[None].C3#" & sC3EntCur & ".C4#" & StrC4 & " = -A#ACQ_EOB_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Hs.Exp "A#ACQELIMTOT_EUR_CTA_A115" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_PPA_CTA_EUR_A115" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_PPA_CTA_EUR_ACQTIME_A115" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_A122" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_PPA_CTA_EUR_A122" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_PPA_CTA_EUR_ACQTIME_A122" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_A125" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_PPA_CTA_EUR_A125" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_PPA_CTA_EUR_ACQTIME_A125" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_A218" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_PPA_CTA_EUR_A218" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCI_PPA_CTA_EUR_ACQTIME_A218" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_A105" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CB_GWDISP_CTA_EUR" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_CB_GWDISP_DENOM_CTA_EUR.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ACQ_CURRENCIES.C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L105" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CTA_EUR_L105" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L115" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CTA_EUR_L115" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L166" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CTA_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L165" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_POST_ACQ_RE_CTA_EUR_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L165_PPA" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CTACB_RE_EOP_EUR_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L168" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_GW_CTA_EUR_RE_ALLOC_L168" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_A105_ACCUM" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CUMGW_CTA_EUR_L135_NET" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L295" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = -A#ACQ_DTL_CTA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#NCI_DTL_CTA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_AVGEND" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CTACB_AVG_EOP_EUR_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L205_INDIRECT" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_CTA_EUR_OW1_L135_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_CTA_L135" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = A#ACQ_EVPLUG_CTA_EUR_L135" & sSrcDimC1C2C3 & ".C4#" & StrC4

                If iACQType <> 10 Then
                    Hs.Exp "A#ACQELIMTOT_EUR_L295.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = -(A#ACQ_DTL_EOB_EUR_ACQTIME_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4 & " + A#ACQ_DTLCHG_TOTAL_CUM_EUR_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ") * A#ACQ_PERCENT_CUM" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "/100"
                    Hs.Exp "A#NCIELIMTOT_EUR_L295.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = -A#NCI_DTL_EOB_EUR_ACQTIME_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4 & " - A#ACQ_DTLCHG_TOTAL_CUM_EUR_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "/100"
                Else
                    Hs.Exp "A#NCIELIMTOT_EUR_L295.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = -A#NCI_DTL_EOB_EUR_ACQTIME_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4 & " - A#ACQ_DTLCHG_TOTAL_CUM_EUR_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & "_CUM * (A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQ_PERCENT_NCI" & sSrcDimC1C2C3 & ".C4#" & sPrevACQ & ") /100"
                    Hs.Exp "A#ACQELIMTOT_EUR_L295.C1#[None]" & sDestDimC2Earmark & ".C3#" & sC3EntCur & ".C4#" & StrC4 & " = -A#NCIELIMTOT_EUR_L295" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4
                End If
                Hs.Exp "A#NCIELIMTOT_EUR_L205.C1#[None].I#" & sICP & ".C2#[None].C3#" & sC3EntCur & ".C4#" & StrC4 & " = A#NCIELIMTOT_EUR_PPA_TOTAL" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            " + A#NCIELIMTOT_EUR_EQUITY_TOTAL" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            " + A#NCIELIMTOT_EUR_L295" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4

                Hs.Exp "A#ACQELIMTOT_EUR_L178.C1#[None]" & sDestDimC2Earmark & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = - A#ACQELIMTOT_EUR_R95" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4

                If iStopCodeCurACQ = 1 Then
                    Hs.Exp "A#ACQELIMTOT_EUR_CTA_STOPCODE" & sDestDimC1C2None & ".C3#C3_ACQ_EUR.C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_A165I.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  + A#ACQELIMTOT_EUR_PPA_TOTAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  + A#ACQELIMTOT_EUR_A105.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  + A#ACQELIMTOT_EUR_A106.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  + A#ACQELIMTOT_EUR_EQUITY_TOTAL" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  - A#ACQELIMTOT_EUR_L135_BEF_STOP" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  + A#ACQELIMTOT_EUR_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                            "  + A#ACQELIMTOT_EUR_L365E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                End If

                If (iACQType = 10 Or iACQType = 4 Or iACQType = 6) And CInt(IntYear) = CInt(iACQ_Year) Then
                    Hs.Exp "A#ACQELIMTOT_EUR_L205_NCI_ACQ_DISP.C1#[None].I#" & sICP & ".C2#[None].C3#INP.C4#" & StrC4 & " = -A#ACQ_DOA_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_L205_NCI_CTA.C1#[None].I#" & sICP & ".C2#[None].C3#INP.C4#" & StrC4 & " = -A#ACQ_EOB_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DOA_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4
                End If

                Hs.Exp "A#NCIELIMTOT_EUR_L205_NCI_R941.C1#[None].I#" & sICP & ".C2#[None].C3#INP.C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_R941.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4

                If ((iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1) Or (iACQType = 4 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 10 And CInt(IntYear) = CInt(iACQ_Year))) Then
                    Hs.Exp "A#NCIELIMTOT_EUR_L205_NCI_ACQ_DISP.C1#[None].I#" & sICP & ".C2#[None].C3#INP.C4#" & StrC4 & " = A#NCI_DOA_EUR_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                            "+ A#NCI_PPA_DOA_EUR_ACQTIME_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                            "- A#NCI_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                            "+ A#ACQ_RECB_IMPACT_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                            "+ A#NCI_CUM_EOP_EUR_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    Hs.Exp "A#NCIELIMTOT_EUR_L205_NCI_CTA.C1#[None].I#" & sICP & ".C2#[None].C3#INP.C4#" & StrC4 & " = A#NCI_EOB_EUR_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    "+ A#NCI_PPA_EOB_EUR_ACQTIME_TOTAL" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & _
                                                                                                                    "- A#NCI_DTL_EOB_EUR_ACQTIME_L295" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & _
                                                                                                                    "+ A#NCI_RE_IMPACT_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT   & _
                                                                                                                    "- A#NCI_DOA_EUR_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    "- A#NCI_PPA_DOA_EUR_ACQTIME_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    "+ A#NCI_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                    "- A#ACQ_RECB_IMPACT_EOP_EUR_L165" & sSrcDimC1C2C3 & ".C4#" & StrC4
                End If
                Hs.Exp "A#NCIELIMTOT_EUR_L205_NCI_AVGEND.C1#[None].I#" & sICP & ".C2#[None].C3#INP.C4#" & StrC4 & " = - A#NCI_IS_YTD_LC_R941" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & " + A#ACQELIMTOT_EUR_R941.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4

                If ((iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1) Or (iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year))) And sC2Earmark <> "[None]" Then

                    aEndings = Array("A115","A122","A125","A218")
                    For Each sEnd In aEndings
                        sNotA122 = ""
                        If sEnd <> "A122" Then
                            sNotA122 = "A#ACQ_PPAD_YTD_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + "
                        End If
                        Hs.Exp "A#ACQELIMTOT_EUR_C" & sEnd & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPA_EOB_EUR_" & sEnd & ".I#[ICP Top].C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES" & ".C4#" & StrC4 & _
                                                                                                    " + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & _
                                                                                                    " + A#ACQ_PPACB_EOP_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * (1 /" & END_RATE_ENT & " - 1 / " & PRE_RATE_ENT & ")" & _
                                                                                                    " - (" & sNotA122 & " A#ACQ_PPAI_YTD_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & ") * (1 /" & AVG_RATE_ENT & " - 1 / " & END_RATE_ENT & ")"
                    Next

                    Hs.Exp "A#ACQELIMTOT_EUR_CA105" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A105.I#[ICP Top].C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CA165I.C1#[None].C2#[None].C3#INP.C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_A165I.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4

                    Hs.Exp "A#ACQELIMTOT_EUR_CL105.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_L105.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & " - A#NCIELIMTOT_EUR_L105.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CL115.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_L115.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & " - A#NCIELIMTOT_EUR_L115.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CL166.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_L166.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & " - A#NCIELIMTOT_EUR_L166.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CL365E.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_L365E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CL295.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_EOB_EUR_ACQTIME_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                        " + A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & END_RATE_ENT & _
                                                                                                        " + A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * (1 /" & END_RATE_ENT & " - 1 / " & PRE_RATE_ENT & ")" & _
                                                                                                        " - A#ACQ_DTLCHG_TOTAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * (1 /" & AVG_RATE_ENT & " - 1 / " & END_RATE_ENT & ")"
                ElseIf (iACQType = 8 And CInt(IntYear) = CInt(iACQ_Year)) Then
                    aEndings = Array("A115","A122","A125","A218")
                    For Each sEnd In aEndings
                        sNotA122 = ""
                        If sEnd <> "A122" Then
                            sNotA122 = "A#ACQ_PPAD_YTD_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + "
                        End If
                        Hs.Exp "A#ACQELIMTOT_EUR_C" & sEnd & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPACB_EOP_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * (1 /" & END_RATE_ENT & " - 1 / " & PRE_RATE_ENT & ")" & _
                                                                                                    " - (" & sNotA122 & "A#ACQ_PPAI_YTD_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & ") * (1 /" & AVG_RATE_ENT & " - 1 / " & END_RATE_ENT & ")"
                    Next
                    Hs.Exp "A#ACQELIMTOT_EUR_CL365E.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_L365E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CL184.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_L365E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_CL295.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * (1 /" & END_RATE_ENT & " - 1 / " & PRE_RATE_ENT & ")" & _
                                                                                                        " -A#ACQ_DTLCHG_TOTAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * (1 /" & AVG_RATE_ENT & " - 1 / " & END_RATE_ENT & ")"

                Else
                    aEndings = Array("A115","A122","A125","A218")
                    For Each sEnd In aEndings
                        sNotA122 = ""
                        If sEnd <> "A122" Then
                            sNotA122 = "A#ACQ_PPAD_YTD_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + "
                        End If
                        Hs.Exp "A#ACQELIMTOT_EUR_C" & sEnd & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQ_PPACB_EOP_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * (1 /" & END_RATE_ENT & " - 1 / " & PRE_RATE_ENT & ")" & _
                                                                                                    " - (" & sNotA122 & "A#ACQ_PPAI_YTD_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & ") * (1 /" & AVG_RATE_ENT & " - 1 / " & END_RATE_ENT & ")"
                    Next

                    Hs.Exp "A#ACQELIMTOT_EUR_CL295.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#Last * (1 /" & END_RATE_ENT & " - 1 / " & PRE_RATE_ENT & ")" & _
                                                                                                        " -A#ACQ_DTLCHG_TOTAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " * (1 /" & AVG_RATE_ENT & " - 1 / " & END_RATE_ENT & ")"
                End If

                Hs.Exp "A#ACQELIMTOT_EUR_CL165.C1#[None]" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_CF_ASSETS" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQELIMTOT_EUR_CF_LIABS" & sSrcDimC1C2C3 & ".C4#" & StrC4

                If ((iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1) Or (iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year))) And sC2Earmark <> "[None]" Then
                    iMultiply = 1
                    If iACQType = 6 Then
                        iMultiply = -1
                    End If
                    aEndings = Array("A115","A122","A125","A218")
                    For Each sEnd In aEndings
                        Hs.Exp "A#ACQELIMTOT_EUR_" & sEnd & "_CF" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = " & iMultiply & " * (A#ACQ_PPA_DOA_EUR_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " + A#ACQ_PPAD_CUM_TR_LC_" & sEnd & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP & ")"
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A#ACQ_CB_GWDISP_DOA_EUR_TOTAL.I#[ICP Top].C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_A105_CF.C1#" & StrC1_2 & sDestDimC2C3Earmark & ".C4#" & StrC4, iMultiply * dData2, True)
                    Next

                    Hs.Exp "A#ACQELIMTOT_EUR_L105_CF.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = " & iMultiply & " * -(A#ACQ_DOA_EUR_L105" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#NCI_DOA_EUR_L105" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ")"
                    Hs.Exp "A#ACQELIMTOT_EUR_L115_CF.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = " & iMultiply & " * -(A#ACQ_DOA_EUR_L115" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#NCI_DOA_EUR_L115" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ")"
                    Hs.Exp "A#ACQELIMTOT_EUR_L166_CF.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = " & iMultiply & " * -(A#ACQ_DOA_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#NCI_DOA_EUR_L166" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ")"
                    Hs.Exp "A#ACQELIMTOT_EUR_L295_CF.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = " & iMultiply & " * (A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP & ")"

                    Hs.Exp "A#ACQELIMTOT_EUR_L205_CF.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = " & iMultiply & " * (A#NCI_PPA_DOA_EUR_ACQTIME_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                                " - A#NCI_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                                " + A#NCI_DOA_EUR_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4 & _
                                                                                                                                " + (A#NCI_CUM_TR_LC_L205" & sSrcDimC1C2C3 & ".C4#" & StrC4  & " / " & ACQ_DOA_RATE_INP & ")" & _
                                                                                                                                " - A#ACQ_DOA_EUR_OW1_A165I_INDIRECT" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ")"

                    Hs.Exp "A#ACQELIMTOT_EUR_L200_CF.C1#[None]" & sDestDimC2C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_CF2_ASSETS.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                    " - A#ACQELIMTOT_EUR_CF2_LIABS.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4

                End If

                If UCASE(StrPeriod) = "MAR" Or UCASE(StrPeriod) = "JUN" Or UCASE(StrPeriod) = "SEP" Or UCASE(StrPeriod) = "DEC" Then
                    aSources =        Array("A115a","A115b","A115c","A115d","A115e","A122", "A125")
                    aDestinations = Array("N0504","N0508","N0508","N0507","N0512","N0601","N06022")

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_DOA_EUR_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        For k = Lbound(aSources) To Ubound(aSources)

                            If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                If iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year) Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_CACQ" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)
                                ElseIf iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1 Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_CACQ" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)
                                ElseIf iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year) Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_CSLD" & sDestDimC1C3None & ".C4#" & StrC4, dData2 * -1, True)
                                End If
                            End If
                        Next
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_EOB_EUR_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        For k = Lbound(aSources) To Ubound(aSources)
                            If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                If (iACQType = 3 Or iACQType = 12 Or iACQType = 4) And CInt(IntYear) = CInt(iACQ_Year) Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_INT" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)
                                ElseIf iACQType = 13 And CInt(IntYear) = CInt(iACQ_Year) + 1 Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_INT" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)
                                End If
                            End If
                        Next
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_CTA_EUR_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        For k = Lbound(aSources) to Ubound(aSources)
                            If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                If iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year) Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)

                                ElseIf iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1 Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)
                                ElseIf iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year) Then
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dData2, True)
                                End If
                            End If
                        Next
                    Next

                    If iACQType = 16 And CInt(IntYear) = CInt(iACQ_Year) Then
                        Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                        NumItems2 = DataUnit2.GetNumItems
                        For j = 0 To NumItems2 - 1
                            Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            For k = Lbound(aSources) To Ubound(aSources)
                                If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                    dNoteData = dData2 / AVG_RATE_ENT
                                    dNoteDataFX = dData2 / END_RATE_ENT - dData2 / AVG_RATE_ENT
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_DECR" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#A_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dNoteDataFX, True)
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_DECR" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dNoteDataFX, True)
                                End If
                            Next
                        Next
                    End If

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAD_YTD_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        For k = Lbound(aSources) To Ubound(aSources)
                            If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                dNoteData = dData2 / AVG_RATE_ENT
                                dNoteDataFX = dData2 / END_RATE_ENT - dData2 / AVG_RATE_ENT
                                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_DEPRE" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_FXME" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteDataFX, True)
                            End If
                        Next
                    Next

                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAI_YTD_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        For k = Lbound(aSources) To Ubound(aSources)
                            If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                dNoteData = dData2 / AVG_RATE_ENT
                                dNoteDataFX = dData2 / END_RATE_ENT - dData2 / AVG_RATE_ENT
                                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_IMPT" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_FXME" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteDataFX, True)
                            End If
                        Next
                    Next

                    If ((iACQTYPE <> 6 And iACQTYPE <> 16) And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQTYPE = 13 And CInt(IntYear) = CInt(iACQ_Year) + 1) Then
                        Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAD_CUM_TR_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                        NumItems2 = DataUnit2.GetNumItems
                        For j = 0 To NumItems2 - 1
                            Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            For k = Lbound(aSources) To Ubound(aSources)
                                If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                    dNoteData = dData2 / END_RATE_ENT
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_INT" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                End If
                            Next
                        Next
                    End If

                    If iACQTYPE = 6 And CInt(IntYear) = CInt(iACQ_Year) And ACQ_DOA_RATE_INP <> 0 Then
                        Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAD_CUM_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4 & "_CUM")
                        NumItems2 = DataUnit2.GetNumItems
                        For j = 0 To NumItems2 - 1
                            Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            For k = Lbound(aSources) To Ubound(aSources)
                                If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                    dNoteData = dData2 / ACQ_DOA_RATE_INP
                                    dNoteDataFX = dData2 / END_RATE_ENT - dData2 / ACQ_DOA_RATE_INP
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_CSLD" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_FXME" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteDataFX, True)
                                End If
                            Next
                        Next
                    End If

                    If CInt(IntYear) > 2024 Or (CInt(IntYear) = 2024 And CInt(IntCurPeriodNum) = 12) Then
                        If iACQTYPE = 6 And CInt(IntYear) = CInt(iACQ_Year) And ACQ_DOA_RATE_INP <> 0 Then
                            Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAI_CUM_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & sPrevACQ & "_CUM")
                            NumItems2 = DataUnit2.GetNumItems
                            For j = 0 To NumItems2 - 1
                                Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                                aAccParts = Split(StrAccount2,"_")
                                sBSAcc = aAccParts(UBound(aAccParts))
                                For k = Lbound(aSources) To Ubound(aSources)
                                    If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                        dNoteData = dData2 / ACQ_DOA_RATE_INP
                                        dNoteDataFX = dData2 / END_RATE_ENT - dData2 / ACQ_DOA_RATE_INP
                                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_CSLD" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_FXME" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteDataFX, True)
                                    End If
                                Next
                            Next
                        End If
                    End If

                    If iACQTYPE = 6 And CInt(IntYear) = CInt(iACQ_Year) And ACQ_DOA_RATE_INP <> 0 Then
                        Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPAD_CUM_TR_LC_TOTAL.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & sPrevACQ & "_CUM")
                        NumItems2 = DataUnit2.GetNumItems
                        For j = 0 To NumItems2 - 1
                            Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                            aAccParts = Split(StrAccount2,"_")
                            sBSAcc = aAccParts(UBound(aAccParts))
                            For k = Lbound(aSources) To Ubound(aSources)
                                If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                    dNoteData = dData2 / ACQ_DOA_RATE_INP
                                    dNoteDataFX = dData2 / END_RATE_ENT - dData2 / ACQ_DOA_RATE_INP
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_CSLD" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteData, True)
                                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C2#D_FXME" & sDestDimC1C3None & ".C4#" & StrC4, -dNoteDataFX, True)
                                End If
                            Next
                        Next
                    End If

                    Hs.Exp "A#ACQELIMTOT_EUR_N1628" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_L365E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#" & StrC4

                    If (iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year)) Or ((iACQType = 11) And CInt(IntYear) = CInt(iACQ_Year) + 1) Then
                        Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_SOLD_ACQ" & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4

                        Hs.Exp "A#ACQELIMTOT_EUR_NT1_410.C2#DT_CHNG" & sDestDimC1C3None & ".C4#" & StrC4 & " = -A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4
                        dFX = Hs.GetCell("A#ACQ_DTL_CTA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dFX, True)

                    ElseIf iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year) Then
                        Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_SOLD_ACQ" & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP

                        Hs.Exp "A#ACQELIMTOT_EUR_NT1_415.C2#DT_CHNG" & sDestDimC1C3None & ".C4#" & StrC4 & " = -1 * (A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & ACQ_DOA_RATE_INP & ")"
                        dFX = Hs.GetCell("A#ACQ_DTL_CTA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        dFXSource = Hs.GetCell("A#ACQ_DTLCB_EOP_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        dFX = dFX + (dFXSource * END_RATE_ENT - dFXSource * ACQ_DOA_RATE_INP ) / END_RATE_ENT
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dFX, True)

                    ElseIf ((iACQType = 3 Or iACQType = 12 Or iACQType = 4) And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 13 And CInt(IntYear) = CInt(iACQ_Year) + 1) Then
                        Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_INT" & sDestDimC1C3None & ".C4#" & StrC4 & " = (A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " + A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ") / " & AVG_RATE_ENT

                        dFXSource = Hs.GetCell("A#ACQ_DTLCHG_CUM_TR_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)

                        dFX = dFXSource / END_RATE_ENT - dFXSource / AVG_RATE_ENT
                        dFXSource = Hs.GetCell("A#ACQ_DTL_LC_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        dFX = dFX + dFXSource / END_RATE_ENT - dFXSource / AVG_RATE_ENT
                        Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dFX, True)
                    End If
                    Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_CHGIS" & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCHG_OTH_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & AVG_RATE_ENT
                    dFXSource = Hs.GetCell("A#ACQ_DTLCHG_OTH_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)

                    dFX = (dFXSource / END_RATE_ENT - dFXSource / AVG_RATE_ENT) * 1
                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dFX, True)

                    Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_CHGIS_RATE" & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCHG_TAXR_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & AVG_RATE_ENT
                    dFXSource = Hs.GetCell("A#ACQ_DTLCHG_TAXR_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)

                    dFX = dFXSource / END_RATE_ENT - dFXSource / AVG_RATE_ENT
                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dFX, True)

                    Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_CHGIS_PREV" & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQ_DTLCHG_MANUAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " / " & AVG_RATE_ENT
                    dFXSource = Hs.GetCell("A#ACQ_DTLCHG_MANUAL_YTD_LC_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4)

                    dFX = dFXSource / END_RATE_ENT - dFXSource / AVG_RATE_ENT
                    Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3C_5082L.C2#TAX_FXME" & sDestDimC1C3None & ".C4#" & StrC4, dFX, True)

                    Hs.Exp "A#ACQELIMTOT_EUR_N3B_5020L" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -(A#ACQ_PPAD_IS_YTD_EUR_RM51.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4 & _
                                                                                                " + A#ACQ_PPAD_IS_YTD_EUR_RM53.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4 & _
                                                                                                " + A#ACQ_PPAD_IS_YTD_EUR_RM55.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4 & _
                                                                                                " + A#ACQ_PPAD_IS_YTD_EUR_RM58.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4 & _
                                                                                                " + A#ACQ_PPAD_IS_YTD_EUR_RM32.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4 & ")"

                    If END_RATE_ENT <> 0 Then
                        dPPA_Left = Hs.GetCell("A#ACQ_PPACB_EOP_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4) / END_RATE_ENT
                        dPPA_12M = -1 * Hs.GetCell("A#ACQ_PPAD_MON_AMT_LC_TOTAL" & sSrcDimC1C2C3 & ".C4#" & StrC4) / END_RATE_ENT * 12
                        dDTL_CurTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        If dDTL_CurTaxRate = 0 Then
                            dDTL_CurTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        End If
                        If dPPA_Left <> 0 And dDTL_CurTaxRate <> 0 Then
                            If dPPA_Left < dPPA_12M Then
                                Hs.Exp "A#ACQELIMTOT_EUR_N3C_5210" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dPPA_Left * dDTL_CurTaxRate / 100
                            Else
                                Hs.Exp "A#ACQELIMTOT_EUR_N3C_5210" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = " & dPPA_12M * dDTL_CurTaxRate / 100
                            End If
                        End If
                    End If
                    Hs.Exp "A#ACQELIMTOT_EUR_N3C_5220" & sDestDimC1C2C3None & ".C4#" & StrC4 & " =  - A#ACQELIMTOT_EUR_L295" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & " - A#NCIELIMTOT_EUR_L295" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & " - A#ACQELIMTOT_EUR_N3C_5210" & sSrcDimC1C2C3 & ".C4#" & StrC4

                    If (UCASE(strApp) <> "CARGOHFM" And CInt(IntYear) >= 2022) Or CInt(IntYear) > 2022 Then
                        dVA_FLAG_Prevy = Hs.GetCell("A#ACQ_VA_FLAG" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#LAST")
                        dVA_FLAG_Curry = Hs.GetCell("A#ACQ_VA_FLAG" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        For Each sC2 In Array("DT_OB","DT_CB")
                            sSrcPeriod = ""
                            sTaxRate = 0
                            If sC2 = "DT_OB" Then
                                dVA_FLAG = dVA_FLAG_Prevy
                                sSrcPeriod = ".Y#PRIOR.P#LAST"
                                sTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#LAST")
                                If sTaxRate = 0 Then
                                    sTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4 & ".Y#PRIOR.P#LAST")
                                End If
                            Else
                                dVA_FLAG = dVA_FLAG_Curry
                                sTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                                If sTaxRate = 0 Then
                                    sTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                                End If
                            End If

                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_22.C2#" & sC2 & sDestDimC1C3None & ".C4#" & StrC4 & " = -1 * (A#ACQELIMTOT_EUR_A115" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#NCIELIMTOT_EUR_A115" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & ") * (1 - " & dVA_FLAG & ") * " & sTaxRate / 100
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_23.C2#" & sC2 & sDestDimC1C3None & ".C4#" & StrC4 & " = -1 * (A#ACQELIMTOT_EUR_A122" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod &_
                                                                                                             " + A#NCIELIMTOT_EUR_A122" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod &_
                                                                                                             " + A#ACQELIMTOT_EUR_A125" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod &_
                                                                                                             " + A#NCIELIMTOT_EUR_A125" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod &") * (1 - " & dVA_FLAG & ") * " & sTaxRate / 100
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_28.C2#" & sC2 & sDestDimC1C3None & ".C4#" & StrC4 & " = -1 * (A#ACQELIMTOT_EUR_A218" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#NCIELIMTOT_EUR_A218" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & ") * (1 - " & dVA_FLAG & ") * " & sTaxRate / 100
                        Next

                        For Each sEnd In Array("CB","OB")
                            sSrcPeriod = ""
                            If sEnd = "OB" Then
                                sSrcPeriod = ".Y#PRIOR.P#LAST"
                            End If
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_21.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A105" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#ACQELIMTOT_EUR_A106" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_21.C2#TAX_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A105" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#ACQELIMTOT_EUR_A106" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod

                            If CInt(IntYear) < 2024 Then
                                Hs.Exp "A#ACQELIMTOT_EUR_NT1_22.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A115" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                                Hs.Exp "A#ACQELIMTOT_EUR_NT1_23.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A122" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#ACQELIMTOT_EUR_A125" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                                Hs.Exp "A#ACQELIMTOT_EUR_NT1_28.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A218" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            Else
                                Hs.Exp "A#ACQELIMTOT_EUR_NT1_22.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A115" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#NCIELIMTOT_EUR_A115" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                                Hs.Exp "A#ACQELIMTOT_EUR_NT1_23.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A122" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#ACQELIMTOT_EUR_A125" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod &_
                                                                                                                        "+ A#NCIELIMTOT_EUR_A122" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#NCIELIMTOT_EUR_A125" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                                Hs.Exp "A#ACQELIMTOT_EUR_NT1_28.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_A218" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod & " + A#NCIELIMTOT_EUR_A218" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            End If
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_25.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_A165I" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_25.C2#TAX_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_A165I" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_49.C2#IFRS_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_L365E" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_49.C2#TAX_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_L365E" & sSrcDimC1C2C3Currencies & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_22.C2#VA_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_NT1_22.C2#IFRS_CB" & sSrcDimC1C3 & ".C4#" & StrC4 & sSrcPeriod & " * A#ACQ_VA_FLAG.C2#CUSTOM2_TOP" & sSrcDimC1C3 & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_23.C2#VA_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_NT1_23.C2#IFRS_CB" & sSrcDimC1C3 & ".C4#" & StrC4 & sSrcPeriod & " * A#ACQ_VA_FLAG.C2#CUSTOM2_TOP" & sSrcDimC1C3 & ".C4#" & StrC4 & sSrcPeriod
                            Hs.Exp "A#ACQELIMTOT_EUR_NT1_28.C2#VA_" & sEnd & sDestDimC1C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_NT1_28.C2#IFRS_CB" & sSrcDimC1C3 & ".C4#" & StrC4 & sSrcPeriod & " * A#ACQ_VA_FLAG.C2#CUSTOM2_TOP" & sSrcDimC1C3 & ".C4#" & StrC4 & sSrcPeriod
                        Next

                        For Each sAcc In Array("ACQELIMTOT_EUR_NT1_22","ACQELIMTOT_EUR_NT1_23","ACQELIMTOT_EUR_NT1_28")
                            Hs.Exp "A#" & sAcc & ".C2#TempDiff_CHNG = A#" & sAcc & ".C2#TempDiff_CB - A#" & sAcc & ".C2#TempDiff_OB * " & PRE_RATE_ENT & " / " & END_RATE_ENT
                            Hs.Exp "A#" & sAcc & ".C2#DT_CHNG = -1 * (A#" & sAcc & ".C2#DT_CB - A#" & sAcc & ".C2#DT_OB)"
                            Hs.Exp "A#" & sAcc & ".C2#VA_CHNG = A#" & sAcc & ".C2#VA_CB - A#" & sAcc & ".C2#VA_OB * " & PRE_RATE_ENT & " / " & END_RATE_ENT
                        Next

                        sTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_EOP" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        If sTaxRate = 0 Then
                            sTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_PY" & sSrcDimC1C2C3 & ".C4#" & StrC4)
                        End If

                        If sTaxRate <> 0 And AVG_RATE_ENT <> 0 Then
                            Hs.Exp "A#ACQELIMTOT_EUR_NT2_480_ME.C2#[None]" & sDestDimC1C3None & ".C4#" & StrC4 & " = -1 * (A#ACQELIMTOT_EUR_NT1_20.C2#VA_CHNG" & sSrcDimC1C3 & ".C4#" & StrC4 & ") * " & sTaxRate & " / 100 * " & END_RATE_ENT & " / " & AVG_RATE_ENT
                        End If
                    End If

                    Hs.Exp "A#ACQELIMTOT_EUR_N0102" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM51.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_N0103" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM53.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4
                    Hs.Exp "A#ACQELIMTOT_EUR_N0104" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM55.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4
                    If iACQType <> 6 Then
                        Hs.Exp "A#ACQELIMTOT_EUR_N0105" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQ_PPAD_IS_YTD_EUR_RM58.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4
                    End If

                    Hs.Exp "A#ACQELIMTOT_EUR_N2116" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQ_PPAD_IS_YTD_EUR_RM58.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4
                    If iACQType = 6 Then
                        Hs.Exp "A#ACQELIMTOT_EUR_N2130" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_RM58.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                    End If
                End If

                Hs.Exp "A#ACQELIMTOT_EUR_ASSETS" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_A165I.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                        "  + A#ACQELIMTOT_EUR_PPA_TOTAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                        "  + A#ACQELIMTOT_EUR_A105.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                        "  + A#ACQELIMTOT_EUR_A106.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_LIABILITIES" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#ACQELIMTOT_EUR_EQUITY_TOTAL" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                " +A#ACQELIMTOT_EUR_L135" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                " -A#ACQELIMTOT_EUR_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                " -A#ACQELIMTOT_EUR_L365E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                " +A#ACQELIMTOT_EUR_L205.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                Hs.Exp "A#ACQELIMTOT_EUR_DIFF" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#ACQELIMTOT_EUR_ASSETS" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#ACQELIMTOT_EUR_LIABILITIES" & sSrcDimC1C2C3 & ".C4#" & StrC4

                Hs.Exp "A#NCIELIMTOT_EUR_ASSETS" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCIELIMTOT_EUR_PPA_TOTAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                Hs.Exp "A#NCIELIMTOT_EUR_LIABILITIES" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = -A#NCIELIMTOT_EUR_EQUITY_TOTAL" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                " -A#NCIELIMTOT_EUR_L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4 & _
                                                                                                " +A#NCIELIMTOT_EUR_L205.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#" & StrC4
                Hs.Exp "A#NCIELIMTOT_EUR_DIFF" & sDestDimC1C2C3None & ".C4#" & StrC4 & " = A#NCIELIMTOT_EUR_ASSETS" & sSrcDimC1C2C3 & ".C4#" & StrC4 & " - A#NCIELIMTOT_EUR_LIABILITIES" & sSrcDimC1C2C3 & ".C4#" & StrC4

                If ((iACQType = 1 And CInt(IntYear) = CInt(iACQ_Year)) Or (iACQType = 11 And CInt(IntYear) = CInt(iACQ_Year) + 1)) And Left(sC2Earmark,4) = "ACQ_" Then
                    Set DataUnit2=HS.OpenDataUnit("A{ACQ_PPA_DOA_EUR_TOTAL.[Base]}.I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#" & StrC4)
                    NumItems2 = DataUnit2.GetNumItems
                    aSources = Array("A115a","A115b","A115c","A115d","A115e","A122","A125","A218")
                    aDestinations = Array("ACQ_5300","ACQ_5200","ACQ_5400","ACQ_5100","ACQ_5150","ACQ_6100","ACQ_6200","ACQ_6400")
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)
                        aAccParts = Split(StrAccount2,"_")
                        sBSAcc = aAccParts(UBound(aAccParts))
                        For k = Lbound(aSources) To Ubound(aSources)

                            If UCase(aSources(k)) = UCase(sBSAcc) And dData2 <> 0 Then
                                Hs.Exp "A#ACQELIMTOT_EUR_" & aDestinations(k) & ".C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = A#ACQ_PPA_DOA_EUR_" & aSources(k) & sSrcDimC1C2C3 & ".C4#" & StrC4
                            End If
                        Next
                    Next

                    Hs.Exp "A#ACQELIMTOT_EUR_ACQ_6500.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = A#ACQ_DTL_DOA_EUR_ACQTIME_L295" & sSrcDimC1C2C3 & ".C4#" & StrC4

                ElseIf iACQType = 6 And CInt(IntYear) = CInt(iACQ_Year) And Left(sC2Earmark,10) = "DISPBUSIN_" And ACQ_DOA_RATE_INP <> 0 Then

                    If CInt(IntYear) >= 2021 Then
                        Hs.Exp "A#ACQELIMTOT_EUR_DIV_2400.C1#[None]" & sDestDimC2C3Earmark & ".C4#" & StrC4 & " = -1 * A#ACQELIMTOT_EUR_L205_CF.C2#NONE_ACQ_DIS" & sSrcDimC1C3 & ".C4#" & StrC4

                    End If

                End If

            End If
            iNumOfACQTimesInUse = iNumOfACQTimesInUse + 1
        Next

        If iNumOfACQTimesInUse <> 0 Then
            Hs.Exp "A#ACQ_LastACQTime_In_Use" & sDestDimC1C2C3None & ".C4#[None] = " & iNumOfACQTimesInUse
        End If

        If iStopCode > 0 Then
            Set DataUnit=HS.OpenDataUnit("A{ACQ_C1.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQ_TIMES")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If HS.Account.IsDescendant("ACQELIMTOT_EUR_R95", StrAccount) = False And StrAccount <> "ACQELIMTOT_EUR_L165_RET_MIN" And StrAccount <> "ACQELIMTOT_EUR_L165_RET_NCI" Then
                    Hs.Exp "A#" & StrAccount & ".C4#ACQ_CLEAR = -A#" & StrAccount & ".C4#ACQ_TIMES"
                End If
            Next

            Hs.Exp "A#ACQELIMTOT_EUR_N3C_5210.C4#ACQ_CLEAR = -A#ACQELIMTOT_EUR_N3C_5210.C4#ACQ_TIMES"
            Hs.Exp "A#ACQELIMTOT_EUR_N3C_5220.C4#ACQ_CLEAR = -A#ACQELIMTOT_EUR_N3C_5220.C4#ACQ_TIMES"

            dR95 = Hs.GetCell("A#ACQELIMTOT_EUR_R95" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#ACQ_TIMES")
            Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_L178.I#[ICP None].C1#[None].C2#" & sC2Earmark & ".C3#" & sC3EntCur & ".C4#ACQ_CLEAR", -dR95, True)
            Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_L165_PPA" & sDestDimC1C2None & ".C3#" & sC3EntCur & ".C4#ACQ_CLEAR", dR95, True)

            dL165_RET_MIN = Hs.GetCell("A#ACQELIMTOT_EUR_L165_RET_MIN" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#ACQ_TIMES")
            Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_L165.I#[ICP None].C1#[None].C2#[None].C3#" & sC3EntCur & ".C4#ACQ_CLEAR", -dL165_RET_MIN, True)

            dL165_RET_NCI = Hs.GetCell("A#ACQELIMTOT_EUR_L165_RET_NCI" & sSrcDimC1C2 & ".C3#ACQ_CURRENCIES.C4#ACQ_TIMES")
            Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_L165.I#[ICP None].C1#[None].C2#[None].C3#" & sC3EntCur & ".C4#ACQ_CLEAR", -dL165_RET_NCI, True)

        End If

        Set DataUnit=HS.OpenDataUnit("A{ACQ_C1_2.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT.I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            sDestC2 = Right(StrAccount,Len(StrAccount) - Len("ACQELIMTOT_EUR_L205_"))
            sDestC3 = Left(StrAccount,3)
            Hs.Exp "A#ACQELIMTOT_EUR_L205_FINAL.C2#" & sDestC2 & ".C3#" & sDestC3 & ".C4#[None] = A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT"
        Next

        bL165IsCalculated = False
        Set DataUnit=HS.OpenDataUnit("A{ACQ_C1.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT.I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            bDoCalc = True
            If Instr(UCase(StrAccount),"_ASSETS") <> 0 Or Instr(UCase(StrAccount),"_DIFF") <> 0 Or Instr(UCase(StrAccount),"_LIABILITIES") <> 0 Then
                bDoCalc = False
            End If

            If UCase(StrAccount) = "ACQELIMTOT_EUR_L165_PPA" Or UCase(StrAccount) = "ACQELIMTOT_EUR_L165_GWDISP" Then
                StrAccount = "ACQELIMTOT_EUR_L165"
            End If

            If UCase(StrAccount) = "ACQELIMTOT_EUR_L165_RET_MIN" Then
                Hs.Exp "A#ACQELIMTOT_EUR_L165_FINAL.C2#RET_MIN.C3#ACQ.C4#[None] = -1* A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"

            ElseIf UCase(StrAccount) = "ACQELIMTOT_EUR_L165_RET_CTA" Then
                Hs.Exp "A#ACQELIMTOT_EUR_L165_FINAL.C2#RET_CTA.C3#ACQ.C4#[None] = -1* A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"
            ElseIf UCase(StrAccount) = "ACQELIMTOT_EUR_L165_RET_NCI" Then
                Hs.Exp "A#ACQELIMTOT_EUR_L165_FINAL.C2#RET_NCI.C3#ACQ.C4#[None] = -1* A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"

            ElseIf Instr(UCase(StrAccount),"_CTA_") = 0 And bDoCalc = True And (bL165IsCalculated = False Or StrAccount <> "ACQELIMTOT_EUR_L165") Then

                If Left(StrAccount,3) = "NCI" Then
                    sDestAcc = "ACQ" & Right(StrAccount,Len(StrAccount)-3) & "_FINAL"
                Else
                    sDestAcc = StrAccount & "_FINAL"
                End If
                sDestC2Top = HS.Account.C2Top(sDestAcc)
                sDestC3 = Left(StrAccount,3)
                bDestIsBS = False
                If Instr(GetUD(sDestAcc, "Account", ""),"/ACQElim_C1BS/") > 0 Then
                    bDestIsBS = True
                End If
                aAccParts = Split(StrAccount,"_")
                sBSAcc = aAccParts(UBound(aAccParts))

                If IsItemInList(sBSAcc,Array("A165I","L105","L115","L165","L166","L167","L168","L178","L200","L295","L365E")) Then

                    iMultiply = -1
                Else
                    iMultiply = 1
                End If

                If StrAccount = "ACQELIMTOT_EUR_L165" Then
                    StrAccount = "ACQELIMTOT_EUR_L165_TOTAL"
                    bL165IsCalculated = True
                End If

                If sDestC2Top = "EQUITY_ACQ_DIS" Then

                    If bMigrationYear = False And END_RATE_ENT <> 0 And PRE_RATE_ENT <> 0 Then
                        If sBSAcc <> "L165" Then
                            Hs.Exp "A#" & sDestAcc & ".C2#EQ_OPE = A#" & sDestAcc & ".C2#EQUITY.Y#PRIOR.P#Last"
                        Else
                            Hs.Exp "A#" & sDestAcc & ".C2#EQ_OPE = A#" & sDestAcc & ".C2#EQUITY.Y#PRIOR.P#Last + A#ACQELIMTOT_EUR_L178_FINAL.C2#CUSTOM2_TOP.Y#PRIOR.P#Last"
                        End If

                        If sBSAcc <> "L165" Then
                            Hs.Exp "A#" & sDestAcc & ".C2#EQ_FX_INP = -(A#" & sDestAcc & ".C2#EQ_OPE * " & END_RATE_ENT & " - A#" & sDestAcc & ".C2#EQ_OPE * " & PRE_RATE_ENT & " ) / " & END_RATE_ENT
                        End If
                    End If
                End If

                If sDestC2Top = "NCI_ACQ_DIS" Then
                    If bMigrationYear = False And END_RATE_ENT <> 0 And PRE_RATE_ENT <> 0 Then
                        Hs.Exp "A#" & sDestAcc & ".C2#NCI_OPE = A#" & sDestAcc & ".C2#C2_NCI.Y#PRIOR.P#Last"
                        Hs.Exp "A#" & sDestAcc & ".C2#NCI_OPEFX = -(A#" & sDestAcc & ".C2#NCI_OPE * " & END_RATE_ENT & " - A#" & sDestAcc & ".C2#NCI_OPE * " & PRE_RATE_ENT & " ) / " & END_RATE_ENT
                    End If
                End If

                If bDestIsBS = True Then
                    For Each sC1member In Hs.Custom1.List("C1_ACQElim","[Children]")
                        sC1Dest = ""
                        If Right(sC1Member,9) = "_ACQTOTAL" Then
                            sC1Dest = Left(sC1Member,Len(sC1Member)-9)
                        Else
                            sC1Dest = sC1Member
                        End If

                        If sDestC2Top = "EQUITY_ACQ_DIS" Then
                            Hs.Exp "A#" & sDestAcc & ".C1#" & sC1Dest & ".C2#EQ_CHNG.C3#" & sDestC3 & ".C4#[None] = " & iMultiply & " * A#" & StrAccount & ".C1#" & sC1Member & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT" & _
                                                                                                                                    " - A#" & sDestAcc & ".C1#" & sC1Member & ".C2#EQ_OPE.C3#C3#" & sDestC3 & ".C4#[None]" & _
                                                                                                                                    " - A#" & sDestAcc & ".C1#" & sC1Member & ".C2#EQ_FX_INP.C3#" & sDestC3 & ".C4#[None]"
                        Else
                            Hs.Exp "A#" & sDestAcc & ".C1#" & sC1Dest & ".C2#[None].C3#" & sDestC3 & ".C4#[None] = " & iMultiply & " * A#" & StrAccount & ".C1#" & sC1Member & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"
                        End If
                    Next
                Else

                    If sDestC2Top = "EQUITY_ACQ_DIS" Then
                        Hs.Exp "A#" & sDestAcc & ".C2#EQ_CHNG.C3#" & sDestC3 & ".C4#[None] = " & iMultiply & " * A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT" & _
                                                                                                            "  - A#" & sDestAcc & ".C2#EQ_OPE.C3#" & sDestC3 & ".C4#[None]" & _
                                                                                                            "  - A#" & sDestAcc & ".C2#EQ_FX_INP.C3#" & sDestC3 & ".C4#[None]"
                    ElseIf sDestC2Top = "NCI_ACQ_DIS" Then
                        Hs.Exp "A#" & sDestAcc & ".C2#NCI_CHNG.C3#" & sDestC3 & ".C4#[None] = " & iMultiply & " * A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT" & _
                                                                                                            "  - A#" & sDestAcc & ".C2#C2_NCI.C3#" & sDestC3 & ".C4#[None]"

                    ElseIf sDestC2Top = "IO_SUB_ACQ_DIS" Then
                        Hs.Exp "A#" & sDestAcc & ".C2#Gross_Ext.C3#" & sDestC3 & ".C4#[None] = " & iMultiply & " * A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"
                    Else
                        Hs.Exp "A#" & sDestAcc & ".C2#[None].C3#" & sDestC3 & ".C4#[None] = " & iMultiply & " * A#" & StrAccount & ".C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"
                    End If
                End If
            End If
        Next

        aC1Members = CombineLists(Hs.Custom1.List("C1_ACQElim","[Children]"),Array("[None]"))
        For Each sC1Member In aC1Members
            Set DataUnit2=HS.OpenDataUnit("A{ACQ_C3.[Base]}.C1#" & sC1Member & ".C4#ACQTOT")
            NumItems2 = DataUnit2.GetNumItems
            For j = 0 To NumItems2 - 1
                Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)

                sDestAcc = StrAccount2 & "_FINAL"
                bDestIsBS = False
                If Instr(GetUD(sDestAcc, "Account", ""),"/ACQElim_C1BS/") > 0 Then
                    bDestIsBS = True
                End If

                aAccParts = Split(StrAccount2,"_")
                sCFAcc = aAccParts(UBound(aAccParts))
                sC2Dest = ""
                If IsItemInList(sCFAcc,Array("CL165")) Then
                    sC2Dest = "EQ_CHNG"
                Else
                    sC2Dest = "[None]"
                End If

                If bDestIsBS = True Then
                    sC1Dest = ""
                    If Right(StrC1_2,9) = "_ACQTOTAL" Then
                        sC1Dest = Left(StrC1_2,Len(StrC1_2)-9)
                    Else
                        sC1Dest = StrC1_2
                    End If
                    Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & sC1Dest & ".C2#" & sC2Dest & ".C3#ACQ.C4#[None]", dData2, True)
                Else
                    Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1_2 & ".C2#" & sC2Dest & ".C3#ACQ.C4#[None]", dData2, True)
                End If
            Next
        Next

        aC1Members = CombineLists(Hs.Custom1.List("C1_ACQElim","[Children]"),Array("[None]"))
        For Each sC1Member In aC1Members
            Set DataUnit2=HS.OpenDataUnit("A{ACQ_C5.[Base]}.C1#" & sC1Member & ".C4#ACQTOT")
            NumItems2 = DataUnit2.GetNumItems
            For j = 0 To NumItems2 - 1
                Call DataUnit2.GetItem(j, StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2)

                aAccParts = Split(StrAccount2,"_")
                sBSAcc = aAccParts(UBound(aAccParts)-1)

                If sBSAcc = "A115" Then
                    sDestAcc = Left(StrAccount2,Len(StrAccount2) - 3) & "a_FINAL"
                Else
                    sDestAcc = Left(StrAccount2,Len(StrAccount2) - 3) & "_FINAL"

                End If
                bDestIsBS = False
                If Instr(GetUD(sDestAcc, "Account", ""),"/ACQElim_C1BS/") > 0 Then
                    bDestIsBS = True
                End If

                If bDestIsBS = True Then
                    sC1Dest = ""
                    If Right(StrC1_2,9) = "_ACQTOTAL" Then
                        sC1Dest = Left(StrC1_2,Len(StrC1_2)-9)
                    Else
                        sC1Dest = StrC1_2
                    End If
                    Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#" & StrICP2 & ".C1#" & sC1Dest & ".C2#" & StrC2_2 & ".C3#ACQ_DISP_ACQ.C4#[None]", dData2, True)
                Else
                    Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#" & StrICP2 & ".C1#" & StrC1_2 & ".C2#" & StrC2_2 & ".C3#ACQ_DISP_ACQ.C4#[None]", dData2, True)
                End If
            Next
        Next

        Set DataUnit=HS.OpenDataUnit("A{ACQ_C4.[Base]}.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT.I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            sDestAcc = StrAccount & "_FINAL"
            If dData <> 0 Then
                Hs.Exp "A#" & sDestAcc & ".C3#ACQ_DISP_ACQ.C4#[None] = A#" & StrAccount & " .C3#CUSTOM3_TOP.C4#ACQTOT"

            End If
        Next

        Hs.Exp "A#ACQELIMTOT_EUR_L135_FINAL.I#[ICP None].C1#[None].C2#CTA_ACQ.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_L135_BEF_STOP_AND_AVGEND.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"
        Hs.Exp "A#ACQELIMTOT_EUR_L135_FINAL.I#[ICP None].C1#[None].C2#CTA_AVG.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_CTA_AVGEND.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"
        Hs.Exp "A#ACQELIMTOT_EUR_L135_FINAL.I#[ICP None].C1#[None].C2#CTA_RE.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_CTA_STOPCODE.I#[ICP Top].C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#ACQ_CURRENCIES.C4#ACQTOT"

        If AVG_RATE_ENT <> 0 Then
            Hs.Exp "A#ACQELIMTOT_EUR_RM69_FINAL.I#[ICP None].C2#[None].C3#ACQ.C4#[None] = -1 * (A#ACQ_PPAD_IS_YTD_EUR_RM51.I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT" & _
                                                                                        " + A#ACQ_PPAD_IS_YTD_EUR_RM53.I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT" & _
                                                                                        " + A#ACQ_PPAD_IS_YTD_EUR_RM55.I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT" & _
                                                                                        " + A#ACQ_PPAD_IS_YTD_EUR_RM58.I#[ICP Top].C2#NONE_ACQ_DIS.C3#CUSTOM3_TOP.C4#ACQTOT)"
            Hs.Exp "A#ACQELIMTOT_EUR_RM68_FINAL = -A#ACQELIMTOT_EUR_RM69_FINAL"
        End If

        Hs.Exp "A#ACQELIMTOT_EUR_DIFF_FINAL.I#[ICP None].C1#[None].C2#[None].C4#[None] = A#ACQELIMTOT_EUR_ASSETS_TOTAL_FINAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None] - A#ACQELIMTOT_EUR_LIABILITIES_TOTAL_FINAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None]"

        Set DataUnit=HS.OpenDataUnit("A{ACQ_C2.[Base]}.C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#ACQTOT.I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            sDestAcc = StrAccount & "_FINAL"
            Hs.Exp "A#" & sDestAcc & ".C2#" & StrC2 & ".C3#ACQ.C4#[None] = A#" & StrAccount & ".C2#" & StrC2 & ".C3#CUSTOM3_TOP.C4#ACQTOT"
        Next

        Set DataUnit=HS.OpenDataUnit("A{ACQ_C2_OPE.[Base]}.C1#CUSTOM1_TOP.C2{CUSTOM2_TOP.[Base]}.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top].Y#PRIOR.P#LAST")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            strC2OPE = ""
            strC2FX = ""
            If StrC2 = "A_SALE" Then
                strC2OPE = "A_ACQ"
                strC2FX = "A_FXME"
            ElseIf StrC2 = "D_SALE" Then
                strC2OPE = "D_ACD"
                strC2FX = "D_FXME"
            ElseIf StrAccount = "ACQELIMTOT_EUR_N3C_5082L_OPE" Then
                strC2OPE = "TAX_OPE"
                strC2FX = "TAX_FXME"
            End If
            sDestAcc = Left(StrAccount, Len(StrAccount)-Len("_OPE")) & "_FINAL"
            Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#[None].C2#" & strC2OPE & ".C3#ACQ.C4#[None]", dData, True)
            dOpeFX = -(dData * END_RATE_ENT - dData * PRE_RATE_ENT ) / END_RATE_ENT
            Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#[None].C2#" & strC2FX & ".C3#ACQ.C4#[None]", dOpeFX, True)
        Next

        If UCASE(StrPeriod) = "DEC" Then
            Set DataUnit=HS.OpenDataUnit("A{ACQ_C2_FINAL.[Base]}.C1#CUSTOM1_TOP.C2#A.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                sDestAcc = Left(StrAccount, Len(StrAccount)-Len("_FINAL")) & "_OPE"
                Hs.Exp "A#" & sDestAcc & ".C2#A_SALE = A#" & StrAccount & ".C2#A"
            Next
            Set DataUnit=HS.OpenDataUnit("A{ACQ_C2_FINAL.[Base]}.C1#CUSTOM1_TOP.C2#D.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                sDestAcc = Left(StrAccount, Len(StrAccount)-Len("_FINAL")) & "_OPE"
                Hs.Exp "A#" & sDestAcc & ".C2#D_SALE = A#" & StrAccount & ".C2#D"
            Next
            Hs.Exp "A#ACQELIMTOT_EUR_N3C_5082L_OPE.C2#[None] = A#ACQELIMTOT_EUR_N3C_5082L_FINAL.C2#TAX"
        End If

        If UCASE(StrPeriod) = "MAR" Or UCASE(StrPeriod) = "JUN" Or UCASE(StrPeriod) = "SEP" Or UCASE(StrPeriod) = "DEC" Then

            Hs.Exp "A#ACQELIMTOT_EUR_N3A_2010_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3C_5082L_FINAL.C1#CUSTOM1_TOP.C2#TAX_CHGIS"
            Hs.Exp "A#ACQELIMTOT_EUR_N3A_2020_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3C_5082L_FINAL.C1#CUSTOM1_TOP.C2#TAX_CHGIS_RATE"
            Hs.Exp "A#ACQELIMTOT_EUR_N3A_2030_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3C_5082L_FINAL.C1#CUSTOM1_TOP.C2#TAX_CHGIS_PREV"
            Hs.Exp "A#ACQELIMTOT_EUR_N3B_R901_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_RM70_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"
            Hs.Exp "A#ACQELIMTOT_EUR_N3B_5100L_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_N3B_5020L_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"
            Hs.Exp "A#ACQELIMTOT_EUR_N3B_3610_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3B_R901_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP * 0.2"

            If CInt(IntYear) < 2022 Then
                Set DataUnit=HS.OpenDataUnit("A#ACQELIMTOT_EUR_RM70.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.I#[ICP Top]")
            Else
                Set DataUnit=HS.OpenDataUnit("A#ACQELIMTOT_EUR_RM70.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4{ACQ_TIMES.[Base]}.I#[ICP Top]")
            End If
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                dTaxRate = Hs.GetCell("A#ACQ_DTL_TAXRATE_PY.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4 & ".I#[ICP Top]")
                Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3B_3615_FINAL.I#[ICP None].C1#[None].C2#[None].C3#ACQ.C4#[None]", -dData * dTaxRate / 100, True)
            Next
            dGroupTaxes = Hs.GetCell("A#ACQELIMTOT_EUR_N3B_3610_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")
            Call HS.SetDataWithPOV("A#ACQELIMTOT_EUR_N3B_3615_FINAL.I#[ICP None].C1#[None].C2#[None].C3#ACQ.C4#[None]", -dGroupTaxes, True)

            If CInt(IntYear) < 2023 Then
                Hs.Exp "A#ACQELIMTOT_EUR_N3B_3665_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3A_2030_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"
                Hs.Exp "A#ACQELIMTOT_EUR_N3B_3660_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3A_2020_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"
            Else
                Hs.Exp "A#ACQELIMTOT_EUR_N3B_3665_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_N3A_2030_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"
                Hs.Exp "A#ACQELIMTOT_EUR_N3B_3660_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_N3A_2020_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"
            End If
            Hs.Exp "A#ACQELIMTOT_EUR_N3B_NC3166_FINAL.C1#[None].C2#[None].C3#ACQ = A#ACQELIMTOT_EUR_N3B_R93_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP - A#ACQELIMTOT_EUR_N3A_9300_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"

            If (UCASE(strApp) <> "CARGOHFM" And CInt(IntYear) >= 2022) Or CInt(IntYear) > 2022 Then

                Hs.Exp "A#ACQELIMTOT_EUR_NT1_110_FINAL.C1#[None].C2#DT_CHNG.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_NT1_20_FINAL.C1#CUSTOM1_TOP.C2#DT_OB.C3#CUSTOM3_TOP.C4#Custom4_TOP - A#ACQELIMTOT_EUR_NT1_49_FINAL.C1#CUSTOM1_TOP.C2#DT_OB.C3#CUSTOM3_TOP.C4#Custom4_TOP"

                Hs.Exp "A#ACQELIMTOT_EUR_NT1_810_FINAL.C1#[None].C2#DT_CHNG.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_CHGIS.C3#CUSTOM3_TOP.C4#ACQTOT + A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_CHGIS_PREV.C3#CUSTOM3_TOP.C4#ACQTOT"

                Hs.Exp "A#ACQELIMTOT_EUR_NT1_830_FINAL.C1#[None].C2#DT_CHNG.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_CHGIS_RATE.C3#CUSTOM3_TOP.C4#ACQTOT"

                Hs.Exp "A#ACQELIMTOT_EUR_NT1_420_FINAL.C1#[None].C2#DT_CHNG.C3#ACQ.C4#[None] = -A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_INT.C3#CUSTOM3_TOP.C4#ACQTOT"

                Hs.Exp "A#ACQELIMTOT_EUR_NT1_510_FINAL.C1#[None].C2#DT_CHNG.C3#ACQ.C4#[None] = A#ACQELIMTOT_EUR_N3C_5082L_FINAL.C1#CUSTOM1_TOP.C2#TAX_FXME.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"

                Hs.Exp "A#ACQELIMTOT_EUR_NT2_R90_FINAL.C1#[None].C2#[None].C3#ACQ.C4#[None] = 1 * (A#ACQELIMTOT_EUR_RM67.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT + A#ACQELIMTOT_EUR_RM32.C1#CUSTOM1_TOP.C2#NONE_ACQ_DIS.C3#INP_ACQ_CURRENCIES.C4#ACQTOT)"
                Hs.Exp "A#ACQELIMTOT_EUR_NT2_22_FINAL.C1#[None].C2#[None].C3#ACQ.C4#[None] = -1 * (A#ACQ_PPAD_YTD_LC_A115" & sSrcDimC1C2C3 & ".C4#ACQTOT + A#ACQ_PPAI_YTD_LC_A115" & sSrcDimC1C2C3 & ".C4#ACQTOT) / " & AVG_RATE_ENT
                Hs.Exp "A#ACQELIMTOT_EUR_NT2_23_FINAL.C1#[None].C2#[None].C3#ACQ.C4#[None] = -1 * (A#ACQ_PPAI_YTD_LC_A122" & sSrcDimC1C2C3 & ".C4#ACQTOT" & _
                                                                                        "  + A#ACQ_PPAD_YTD_LC_A125" & sSrcDimC1C2C3 & ".C4#ACQTOT + A#ACQ_PPAI_YTD_LC_A125" & sSrcDimC1C2C3 & ".C4#ACQTOT) / " & AVG_RATE_ENT
                Hs.Exp "A#ACQELIMTOT_EUR_NT2_28_FINAL.C1#[None].C2#[None].C3#ACQ.C4#[None] = -1 * (A#ACQ_PPAD_YTD_LC_A218" & sSrcDimC1C2C3 & ".C4#ACQTOT + A#ACQ_PPAI_YTD_LC_A218" & sSrcDimC1C2C3 & ".C4#ACQTOT) / " & AVG_RATE_ENT

                Hs.Exp "A#ACQELIMTOT_EUR_NT2_410_FINAL.C1#[None].C2#[None] = -A#ACQELIMTOT_EUR_N3B_R901_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP * 0.2"
                Hs.Exp "A#ACQELIMTOT_EUR_NT2_420_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_N3B_3615_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"

                Hs.Exp "A#ACQELIMTOT_EUR_NT2_490_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_N3A_2020_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"

                Hs.Exp "A#ACQELIMTOT_EUR_NT2_1000_FINAL.C1#[None].C2#[None] = A#ACQELIMTOT_EUR_R935_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP + A#ACQELIMTOT_EUR_R936_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP" & _
                                                                        " - (A#ACQELIMTOT_EUR_NT2_410_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP + A#ACQELIMTOT_EUR_NT2_420_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP + A#ACQELIMTOT_EUR_NT2_480_ME_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP + A#ACQELIMTOT_EUR_NT2_490_FINAL.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP)"

                Hs.Exp "A#ACQELIMTOT_EUR_NT3_70_FINAL.C1#[None].C2#[None].C3#ACQ.C4#[None] = -1 * A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_CHGIS.C3#CUSTOM3_TOP.C4#ACQTOT - A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_CHGIS_RATE.C3#CUSTOM3_TOP.C4#ACQTOT"
                Hs.Exp "A#ACQELIMTOT_EUR_NT3_80_FINAL.C1#[None].C2#[None].C3#ACQ.C4#[None] = -1 * A#ACQELIMTOT_EUR_N3C_5082L.C1#CUSTOM1_TOP.C2#TAX_CHGIS_PREV.C3#CUSTOM3_TOP.C4#ACQTOT"

                Hs.Exp "A#ACQELIMTOT_EUR_NT4_50_FINAL.C1#[None].C2#TaxAG40 = A#ACQELIMTOT_EUR_NT1_20_FINAL.C1#CUSTOM1_TOP.C2#TempDiff_CB + A#ACQELIMTOT_EUR_NT1_20_FINAL.C1#CUSTOM1_TOP.C2#VA_CB" & _
                                                                        " - (A#ACQELIMTOT_EUR_NT1_49_FINAL.C1#CUSTOM1_TOP.C2#TempDiff_CB + A#ACQELIMTOT_EUR_NT1_49_FINAL.C1#CUSTOM1_TOP.C2#VA_CB)"
                Hs.Exp "A#ACQELIMTOT_EUR_NT4_60_FINAL.C1#[None].C2#TaxAG40 = A#ACQELIMTOT_EUR_NT1_20_FINAL.C1#CUSTOM1_TOP.C2#VA_CB - A#ACQELIMTOT_EUR_NT1_49_FINAL.C1#CUSTOM1_TOP.C2#VA_CB"

            End If
        End If
    End If

End Sub

Sub ACQ_Calculate_ACQ_C3_FINAL(StrAccount2, StrICP2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData2, iACQTYPE, END_RATE_ENT, ACQ_DOA_RATE_INP)

    If Left(StrAccount2,3) = "NCI" Then
        sDestAcc = "ACQ" & Right(StrAccount2,Len(StrAccount2)-3) & "_FINAL"
    ElseIf UCase(Right(StrAccount2,10)) = "CA115_HELP" Then
        sDestAcc = Left(StrAccount2,Len(StrAccount2)-5) & "_FINAL"
    ElseIf UCase(Right(StrAccount2,10)) = "CL295_HELP" Then
        sDestAcc = Left(StrAccount2,Len(StrAccount2)-5) & "_FINAL"
    Else
        sDestAcc = StrAccount2 & "_FINAL"
    End If

    sDestC3 = Left(StrAccount2,3)
    bDestIsBS = False
    If Instr(GetUD(sDestAcc, "Account", ""),"/ACQElim_C1BS/") > 0 Then
        bDestIsBS = True
    End If
    aAccParts = Split(StrAccount2,"_")
    sCFAcc = aAccParts(UBound(aAccParts))
    sBSAcc = Right(sCFAcc,Len(sCFAcc)-1)
    sDestAcc2 = Replace(sDestAcc,sCFAcc,sBSAcc)

    If IsItemInList(sCFAcc,Array("CA165I","CL105","CL115","CL165","CL166","CL295","CL365E")) Then
        iMultiply = -1
    Else
        iMultiply = 1
    End If

    If iACQTYPE = 6 Then
        iMultiply2 = -1
    Else
        iMultiply2 = 1
    End If

    sC2Dest = ""

    If IsItemInList(sCFAcc,Array("CL165")) Then
        sC2Dest = "EQ_CHNG"
    Else
        sC2Dest = "[None]"
    End If

    If bDestIsBS = True Then
        sC1Dest = ""
        If Right(StrC1_2,9) = "_ACQTOTAL" Then
            sC1Dest = Left(StrC1_2,Len(StrC1_2)-9)
        Else
            sC1Dest = StrC1_2
        End If

        If UCase(Right(StrAccount2,5)) = "_HELP" Or UCase(StrAccount) = "ACQELIMTOT_EUR_CL295" Then
            Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & sC1Dest & ".C2#" & sC2Dest & ".C3#" & sDestC3 & ".C4#[None]", iMultiply * iMultiply2 * dData2, True)
        Else
            Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & sC1Dest & ".C2#" & sC2Dest & ".C3#" & sDestC3 & ".C4#[None]", iMultiply * iMultiply2 * dData2 * ACQ_DOA_RATE_INP / END_RATE_ENT, True)
            Call HS.SetDataWithPOV("A#" & sDestAcc2 & ".I#" & StrICP2 & ".C1#" & sC1Dest & ".C2#" & StrC2_2 & ".C3#ACQ_DISP_ACQ.C4#[None]", iMultiply * dData2, True)
        End If
    Else

        If UCase(Right(StrAccount2,5)) = "_HELP" Or UCase(StrAccount) = "ACQELIMTOT_EUR_CL295" Then
            Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1_2 & ".C2#" & sC2Dest & ".C3#" & sDestC3 & ".C4#[None]", iMultiply * iMultiply2 * dData2, True)
        Else
            Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1_2 & ".C2#" & sC2Dest & ".C3#" & sDestC3 & ".C4#[None]", iMultiply * iMultiply2 * dData2 * ACQ_DOA_RATE_INP / END_RATE_ENT, True)
            Call HS.SetDataWithPOV("A#" & sDestAcc2 & ".I#" & StrICP2 & ".C1#" & StrC1_2 & ".C2#" & StrC2_2 & ".C3#ACQ_DISP_ACQ.C4#[None]", iMultiply * dData2, True)
        End If
    End If

End Sub

Sub AllBaseEntAllScenarios(StrPrevScenYEnd, StrBA, StrScenario, bUseActualRules, IntYear,StrPrevScenBEGBAL,IntCurPeriodNum,GL_Ent,LegalEntForStrEntity,StrEntity,StrValue,bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,StrApp)

    HS.Exp "A#RM68=-A#RM69"

    HS.Exp "A#R83.C1#[None]=A#RM63.C1#CUSTOM1_TOP"

    Select Case StrBA
        Case "OTHER"    HS.EXP "A#AR01.C1#[None] = A#A305E.C1#Custom1_Top"

        Case "MACGREGOR"    HS.EXP "A#AR01 = A#A305E"
    End Select

    HS.Exp "A#AR21 = A#AR20 - A#AR01"

    sSrcDIM = ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
    sDestDIM = ".C2#[None].C3#INP.C4#[None].I#[ICP None]"

    If IntCurPeriodNum = 1 And StrValue = "<Entity Currency>" And CInt(IntYear) > 2022 And UCase(StrScenario) = "ACTUAL" And bIsBase = True Then
        HS.Exp "A#TAX_CATEGORY = A#TAX_CATEGORY." & StrPrevScenYEnd
        HS.Exp "A#TAX_VA = A#TAX_VA." & StrPrevScenYEnd
    End If
    If IntCurPeriodNum = 3 Or IntCurPeriodNum = 6 Or IntCurPeriodNum = 9 Or IntCurPeriodNum = 12 Then
        If StrValue = "<Entity Currency>" And CInt(IntYear) > 2022 And UCase(StrScenario) = "ACTUAL" And bIsBase = True Then
            Call TaxNotesNT1_NT4(StrPrevScenBEGBAL, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,StrApp)
        End If
    End If

    HS.Exp "A#L178.I#[ICP None].C1#[None].C2#[None] = A#R95.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP"

    HS.Exp "A#CA700 = A#CA175E + A#CA335E + A#CA345I + A#CA410 + A#CA415 + A#CA455E + A#CA455I + A#CA475 + A#CA177E + A#CA178 + A#CA337E + A#CA338"
    HS.Exp "A#CL100" & sDestDIM & " = A#CL800" & sSrcDIM & " - A#CA700" & sSrcDIM

    For Each sAccount In Array("L105", "L115", "L155")
        HS.Clear "A#" & sAccount & ".C2#EQ_OPE"
        If sAccount <> "L155" Or (IntYear < 2019 Or ((StrScenario = "BUDGET" Or Left(StrScenario, 9) = "FORECAST_") And IntYear < 2020)) Then
            Hs.Exp "A#" & sAccount & ".C2#EQ_OPE.C3#INP.C4#[None] = A#" & sAccount & ".C2#EQUITY." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP"
        End If
    Next

    If IntYear >= 2021 Then
        HS.Clear "A#L205.C2#NCI_OPE.C3#INP"
        Hs.Exp "A#L205.C2#NCI_OPE.C3#INP.C4#[None] = A#L205.C2#C2_NCI." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP"
    End If

    HS.Clear "A#L165.C2#EQ_OPE"
    Hs.Exp "A#L165.C1#[None].C2#EQ_OPE.I#[ICP None].C3#INP.C4#[None] = A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#EQUITY." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP + A#L160.C1#[None].C2#CUSTOM2_TOP." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP + A#L178.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP"

    If bUseActualRules = True Then
        FirstDataYear = FirstYearWithData

        If CInt(IntYear) > FirstDataYear Then

            If Instr(StrScenario,"STRATEGY") > 0 and StrScenario <> "STRATEGY" Then StrategyOpeningBalanceYear = CInt(Right(StrScenario,4)) Else StrategyOpeningBalanceYear = ""

            If CInt(IntYear) <> StrategyOpeningBalanceYear Then

                Hs.Clear "A#MOBE.C3#INP"
                Call SetValuesWithDataUnit("A#MOBE.C2#[None].C3#INP.C4#[None]", Array("A#MOBE.C2#CUSTOM2_TOP." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP", "A#MORE.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", "-A#RM01E.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", "A#MOBEC.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", "A#MOBE_EXCHANGE.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", "A#MORBADJE.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"))
            End If

                Call InternalOBCalc(StrPrevScenYEnd, IntYear, StrScenario, "MOBI")

            Call VolumesCalculations(StrScenario, IntYear, StrEntity)
        End If
    End If

End Sub

Sub VolumesCalculations(StrScenario, IntYear, sEntity)
    sSrcPOV = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sDestPOV = ".I#[ICP None].C2#[None].C3#INP.C4#[None]"

    Call SetValuesWithDataCheck("A#MTOTOBCY4" & sDestPOV, Array("A#MOBE" & sSrcPOV, "-A#MTOTOBCY" & sSrcPOV, "-A#MTOTOBCY1" & sSrcPOV, "-A#MTOTOBCY2" & sSrcPOV, "-A#MTOTOBCY3" & sSrcPOV))

    Call SetValuesWithDataCheck("A#MINTOBCY4" & sDestPOV, Array("A#MOBI" & sSrcPOV, "-A#MINTOBCY" & sSrcPOV, "-A#MINTOBCY1" & sSrcPOV, "-A#MINTOBCY2" & sSrcPOV, "-A#MINTOBCY3" & sSrcPOV))

    SuffixArray = array("","1","2","3","4")
    For each suffix in SuffixArray

        HS.Exp "A#MTOTALOBCY" & suffix & " = A#MTOTOBCY" & suffix & " + A#MINTOBCY" & suffix

        HS.Exp "A#GPOBTTOTCY" & suffix & " = A#GPOBTECY" & suffix & " + A#GPOBTICY" & suffix
    Next

    If IntYear >= 2017 Then

            HS.Exp "A#STOTOBCY4" & sDestPOV & " = A#SSS_ORDERBOOK" & sSrcPOV & " - A#STOTOBCY" & sSrcPOV & " - A#STOTOBCY1" & sSrcPOV & " - A#STOTOBCY2" & sSrcPOV & " - A#STOTOBCY3" & sSrcPOV

        HS.Exp "A#GPOBTECYSSS4" & sDestPOV & " = A#GPOBTESSS" & sSrcPOV & " - A#GPOBTECYSSS" & sSrcPOV & " - A#GPOBTECYSSS1" & sSrcPOV & " - A#GPOBTECYSSS2" & sSrcPOV & " - A#GPOBTECYSSS3" & sSrcPOV

        For Each sC1Member In Array("SER07_MG")
            sSrcPOV = ".C1#" & sC1Member & ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
            HS.Exp "A#SSS_ORDERBOOK_C.C1#" & sC1Member & sDestPOV & " = A#SSS_ORDERBOOK" & sSrcPOV & " - A#MOBE" & sSrcPOV
        Next

        For Each sEnding In Array("", "1", "2", "3", "4")
            Call GPOBTECalc("GPOBTECYTOT" & sEnding, "GPOBTECY" & sEnding, "GPOBTECYSSS" & sEnding)
            Call GMOBTECalc("GMOBTECYTOT" & sEnding, "GPOBTECYTOT" & sEnding, "MTOTOBCY" & sEnding, "STOTOBCY" & sEnding)
        Next

        Call GMOBTECalc("GMOBTETOT", "GPOBTETOT", "MOBE", "SSS_ORDERBOOK")
    End If
End Sub

Sub InternalOBCalc(StrPrevScenYEnd, IntYear, StrScenario, sDestAcc)
    bOldCalc = FALSE
    If CInt(IntYear) <= 2020 Or (StrScenario = "BUDGET" And CInt(IntYear) = 2021) Or Left(StrScenario, 8) = "STRATEGY" Then
        bOldCalc = TRUE
    End If

    Hs.Clear "A#" & sDestAcc & ".C3#INP"
    If sDestAcc = "MOBI" Then
        aSrcPOVs = Array("A#MOBI.C2#CUSTOM2_TOP." & StrPrevScenYEnd & ".C3#BEGBALtot", "A#MORI.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP", "-A#RM01I.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP", "A#MOBIC.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP", "A#MOBI_EXCHANGE.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP", "A#MORBADJI.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP")

    End If

    If bOldCalc = TRUE Then
        Call SetValuesWithDataUnit("A#" & sDestAcc & ".C2#[None].C3#INP", aSrcPOVs)
    Else
        For Each sSrcPOV In aSrcPOVs
            sSrcDIM = sSrcPOV
            If Left(sSrcPOV, 1) = "-" Then
                sSign = "-"
                sSrcDIM = Right(sSrcPOV, Len(sSrcPOV)-1)
            End If

            Set DataUnit = HS.OpenDataUnit(sSrcDIM)
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, sAcc, sICP, sC1, sC2, sC3, sC4, dData)
                If HS.IsZero(dData) = FALSE Then
                    If Left(sICP, 3) = "ICP" Then
                        sBA = "ICP_" & Right(sICP, Len(sICP)-4)
                    ElseIf     sICP = "NMAP_ICP" Then

                        sBA = "ICP_CARGO"
                    ElseIf sICP = "CSGD" Then
                        sBA = "ICP_CARGO"

                    Else
                        sBA = "ICP_MACGREGOR"

                    End If

                    dValue = HS.GetCell("A#" & sDestAcc & ".C1#" & sC1 & ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP" & ".I#" & sBA)
                    If sAcc = "RM01I" Then
                        HS.Exp "A#" & sDestAcc & ".C1#" & sC1 & ".C2#[None].C3#INP.C4#[None].I#" & sBA & " = " & dValue - (dData)
                    Else
                        HS.Exp "A#" & sDestAcc & ".C1#" & sC1 & ".C2#[None].C3#INP.C4#[None].I#" & sBA & " = " & dValue + dData
                    End If
                End If
            Next
        Next
    End If
End Sub

Sub GPOBTECalc(sDestAccount, sSrcAccount, sSrcAccountSSS)
    sSrcPOV = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"

    Set DataUnit = HS.OpenDataUnit("A#" & sSrcAccount & sSrcPOV)
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If HS.IsZero(dData) = FALSE Then

            If Left(StrC1, 5) <> "SER07" Then
                HS.Exp "A#" & sDestAccount & ".C1#" & StrC1 & ".C2#[None].C3#Inp.C4#[None].I#[ICP None] = A#" & sSrcAccount & ".C1#" & StrC1 & sSrcPOV
            End If
        End If
    Next

    Set DataUnit = HS.OpenDataUnit("A#" & sSrcAccountSSS & sSrcPOV)
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If HS.IsZero(dData) = FALSE Then
            HS.Exp "A#" & sDestAccount & ".C1#" & StrC1 & ".C2#[None].C3#Inp.C4#[None].I#[ICP None] = A#" & sSrcAccountSSS & ".C1#" & StrC1 & sSrcPOV
        End If
    Next
End Sub

Sub GMOBTECalc(sDestAccount, sTOTAccount, sDIVAccount, sDIVAccountSSS)
    sSrcPOV = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"

    Set DataUnit = HS.OpenDataUnit("A#" & sDIVAccount & sSrcPOV)
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If HS.IsZero(dData) = FALSE Then

            If Left(StrC1, 5) <> "SER07" Then
                HS.Exp "A#" & sDestAccount & ".C1#" & StrC1 & ".C2#[None].C3#Inp.C4#[None].I#[ICP None] = (A#" & sTOTAccount & ".C1#" & StrC1 & sSrcPOV & " / A#" & sDIVAccount & ".C1#" & StrC1 & sSrcPOV & ")"
            End If
        End If
    Next

    Set DataUnit = HS.OpenDataUnit("A#" & sDIVAccountSSS & sSrcPOV)
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If HS.IsZero(dData) = FALSE Then
            HS.Exp "A#" & sDestAccount & ".C1#" & StrC1 & ".C2#[None].C3#Inp.C4#[None].I#[ICP None] = (A#" & sTOTAccount & ".C1#" & StrC1 & sSrcPOV & " / A#" & sDIVAccountSSS & ".C1#" & StrC1 & sSrcPOV & ")"
        End If
    Next
End Sub

Sub EstimationCalculationsBase(StrBA, StrEntity, StrPeriod, StrScenario,StrPrevScenYEnd,IntYear,IntCurPeriodNum,StrCurrFcstYear,Str1stFcstPeriod,strParent,StrValue,bIsBase,RLogger_Act,strApp)

    rLoggerCounter = 0

    If StrBA = "MACGREGOR" Then
        If RLogger_Act = 3 then rLoggerTimerStart = Timer

        HS.Clear "A#GORT"

        Set DataUnit = HS.OpenDataUnit("A#MORE.W#Periodic")
        NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If dData <> 0 Then
                    If StrPeriod = "Jan" Then
                        HS.Exp "A#GORT.I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4&" = A#GMORT_M_EST.I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4&" * "&dData
                    Else
                        PRIOR_YTD = HS.GetCell("A#GORT.I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4)
                        HS.Exp "A#GORT.I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4&" = A#GMORT_M_EST.I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4&".W#Periodic * "&dData& " + "&PRIOR_YTD
                    End If
                End If
            Next
        If RLogger_Act = 3 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If StrScenario = "FORECAST" and UCase(StrPeriod) = "DEC" and CInt(IntYear) >= CInt(StrCurrFcstYear) Then

        If InStr(EntityUD, "/TBC/") = 0 And InStr(EntityUD, "/CloseStartDate") = 0 Then

            RM55_FCST_DEC_CUR = HS.GetCell("A#RM55.I#[ICP Top].W#YTD.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP")

            FM200_ACT_SEP_PRE = HS.GetCell("A#FM200.I#[ICP Top].W#YTD.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.S#ACTUAL.Y#CUR-1.P#SEP")
            FM200_FCST_DEC_CUR = HS.GetCell("A#FM200.I#[ICP Top].W#YTD.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP")

            If FM200_ACT_SEP_PRE > 0 And RM55_FCST_DEC_CUR > 0 And FM200_FCST_DEC_CUR <= 0 Then
                HS.Exp "A#FLAG_BUD_RECOST.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = 1"
            End If
        End If
    End If

End Sub

Sub EstimationCalculationsAllLevels(StrPeriod, StrEntity, StrPrevScenYEnd, bIsBase, IntYear, StrScenario, Str1stFcstPeriod, StrCurrFcstYear, EstimationScenario, bUseActualRules, IntCurPeriodNum)

If EstimationScenario = True And bUseActualRules = False Then

    HS.Clear "A#MOBE.C3#INP"

    FirstFcstYear = CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)
    If CInt(FirstFcstYear) = CInt(IntYear) And StrPeriod = "Jan" Then
        IntFirstFcstMonth = GetFirstFCSTMonth(StrScenario,CInt(Str1stFcstPeriod))
        If IntFirstFcstMonth = 13 Then
            FirstFcstPeriod = "Jan"
        Else
            FirstFcstPeriod = GetPeriodLabel(IntFirstFcstMonth)
        End If
    End If

    sSrcDIM = ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
    sSrcAcc = "A#MORE" & sSrcDIM & ".W#Periodic - A#RM01E" & sSrcDIM & ".W#Periodic + A#MOBEC" & sSrcDIM & " + A#MORBADJE" & sSrcDIM

    If CInt(FirstFcstYear) = CInt(IntYear) And StrPeriod = "Jan" And FirstFcstPeriod = "Jan" Then
        YearPeriodPOVs = GetLastYearAndPeriodWithActData(IntYear,StrScenario,Str1stFcstPeriod,StrCurrFcstYear,LastActYearScenPOV,LastActPeriodPOV,LastActYear)
        LastActMobeScen = mid(LastActYearScenPOV,3,Instr(LastActYearScenPOV,".")-3)

        If CInt(IntYear) <= 2018 Then
            sSrcMOBE = "A#MOBE" & sSrcDIM & ".P#Prior.S#" & LastActMobeScen
        Else
            sSrcMOBE = "A#MOBE.C2#CUSTOM2_TOP.C3#BEGBALTot.P#Prior.S#" & LastActMobeScen
        End If

        PriorScen = LastActMobeScen
        HS.Exp "A#EXTKF02.C3#INP.W#YTD = A#EXTKF02.C3#BEGBALTot.W#YTD.P#Prior.S#" & PriorScen

    Else
        sSrcMOBE = "A#MOBE.C2#CUSTOM2_TOP.C3#BEGBALTot.P#Prior"

        HS.Exp "A#EXTKF02.C3#INP.W#YTD = A#EXTKF02.C3#BEGBALTot.W#YTD.P#Prior"

    End If

    HS.Exp "A#MOBE.C2#[None].C3#INP.W#YTD = " & sSrcMOBE & " + " & sSrcAcc

    If bIsBase = False Then

        If HS.entity.IsDescendant("MACGREGOR", "") = True or StrEntity = "MACGREGOR" Then

            HS.Exp "A#GMORT_M_EST = A#GORT.W#Periodic / A#MORE.W#Periodic"
        End If
    End If
End If

        Call EstimationKeyfigures(bUseActualRules,StrScenario,IntYear,StrPeriod,StrCurrFcstYear,Str1stFcstPeriod,EstimationScenario,IntCurPeriodNum)

End Sub

Sub EstimationKeyfigures(ByVal bUseActualRules, ByVal StrScenario, ByVal IntYear, ByVal StrPeriod, ByVal StrCurrFcstYear, ByVal Str1stFcstPeriod, ByVal EstimationScenario, ByVal IntCurPeriodNum)
    If EstimationScenario = True Then
        DoCalc = False

        If Ucase(StrScenario) = "FORECAST" Then
            If (Int(IntYear) = Int(StrCurrFcstYear)) and (Int(IntCurPeriodNum) = Int(Str1stFcstPeriod)) Then
                DoCalc = True
            End If
        ElseIf Left(Ucase(StrScenario),8) = "FORECAST" Then
            FirstFcstMonth = right(StrScenario,3)
            IntFirstFcstMonth = GetPeriodNumber(FirstFcstMonth)

            If Int(Str1stFcstPeriod) = 1 Then
                If Ucase(StrScenario) = "FORECAST_DEC" Then

                    IntFirstFcstMonth = "0"
                Else
                    StrCurrFcstYear = StrCurrFcstYear - 1
                End If
            Else
                 If Ucase(StrScenario) = "FORECAST_DEC" Then
                     StrCurrFcstYear = StrCurrFcstYear + 1
                    IntFirstFcstMonth = "0"
                 End If
            End If

            If Int(IntCurPeriodNum) = Int(IntFirstFcstMonth) + 1 and Int(StrCurrFcstYear) = Int(IntYear) Then
                DoCalc = True
            End If
        ElseIf (Ucase(StrScenario) = "BUDGET" or Ucase(StrScenario) = "BUDGET_ACTRATE") and StrPeriod = "Jan" Then
            DoCalc = True
        End If

        If DoCalc = True Then

            HS.Exp "A#EKF01.C3#INP = " & Sum12Forward("A#MORT.W#Periodic.I#[ICP Top].C3#CUSTOM3_TOP")
            HS.Exp "A#EKF02.C3#INP = " & Sum12Forward("A#RM10.W#Periodic.I#[ICP Top].C3#CUSTOM3_TOP")
            HS.Exp "A#EKF03.C3#INP = " & Sum12Forward("A#RM70.W#Periodic.I#[ICP Top].C3#CUSTOM3_TOP")

            HS.Exp "A#EKF04.C3#INP = A#EKF03.C3#INP + " & Sum12Forward("A#RM57.W#Periodic.I#[ICP Top].C3#CUSTOM3_TOP")
        End If
    End If

    If Hs.Year.isFirst = False Then
        Call Calculate_K107_OperativeFixedAssets_InEstimation(bUseActualRules, StrScenario, IntYear, StrPeriod, StrCurrFcstYear, Str1stFcstPeriod, EstimationScenario, IntCurPeriodNum)
    End If
End Sub

Sub LastCalcTime(StrScenario, IntYear)

    If IntYear > 2017 And (UCase(StrScenario) = "ACTUAL" Or UCase(StrScenario) = "FORECAST") Then

        HS.Exp "A#LastCalcTime3.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = A#LastCalcTime2.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"
        HS.Exp "A#LastCalcTime2.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = A#LastCalcTime.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"

        CurrTime = Now()
        sDate = CStr(Year(CurrTime)) & LZ(Month(CurrTime)) & LZ(Day(CurrTime))
        sTime = LZ(Hour(CurrTime)) & LZ(Minute(CurrTime)) & LZ(Second(CurrTime))

        HS.Exp "A#LastCalcTime.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = " & sDate & "." & sTime
    End If

    If IntYear > 2017 And (UCase(StrScenario) = "ACTUAL" Or UCase(StrScenario) = "FORECAST") Then
        iNumber = HS.GetCell("A#CalculationNumber.C1#[None].C2#[None].C3#INP.C4#[None]")
        iNumber = iNumber + 1
        HS.Exp "A#CalculationNumber.C1#[None].C2#[None].C3#INP.C4#[None] = " & iNumber
    End If

    If IntYear > (FirstYearWithData + 3) And HS.Scenario.IsBase("FORECAST_SUPPORT", StrScenario) = FALSE Then
        CalculationTime = TimeStamp
        CellTextToWrite = CalculationTime&" (EET)"

        HS.SetCellTextWithLabel "A#LastCalcTime.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellTextToWrite
    End If
End Sub

Sub Calculate_K107_OperativeFixedAssets_InEstimation(bUseActualRules,StrScenario,IntYear,StrPeriod,StrCurrFcstYear,Str1stFcstPeriod,EstimationScenario,IntCurPeriodNum)

    If Instr(StrScenario,"STRATEGY") > 0 Then StrategyScenario = True Else StrategyScenario = False

    If (EstimationScenario = True and bUseActualRules = False) or StrategyScenario = True Then
        If Left(StrScenario,8) = "FORECAST" or StrScenario = "BUDGET" or StrScenario = "BUDGET_FORECAST" or StrScenario = "BUDGET_ACTRATE" or StrategyScenario = True Then

            YearPeriodPOVs = GetLastYearAndPeriodWithActData(IntYear,StrScenario,Str1stFcstPeriod,StrCurrFcstYear,LastActYearScenPOV,LastActPeriodPOV,LastActYear)

            FirstYear = CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)

            sSrcPOV = ""
            sSrcDIM = ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"

            If StrategyScenario = True Then

                STR_Year = CInt(Mid(StrScenario,9,4))

                If CInt(IntYear) > CInt(STR_Year) Then

                    sSrcPOV = "A#K107.Y#PRIOR.P#LAST" & sSrcDIM & " - A#CF170" & sSrcDIM & " - A#CF110" & sSrcDIM&" - A#DC66" & sSrcDIM & " + A#OC66" & sSrcDIM
                End If
            ElseIf CInt(IntYear) = CInt(FirstYear) And StrScenario <> "BUDGET" Then
                LastActPOV = "." & LastActYearScenPOV & "." & LastActPeriodPOV & sSrcDIM

                If (Left(StrScenario, 12) = "FORECAST_DEC" Or (StrScenario = "FORECAST" And Int(Str1stFcstPeriod) = 1)) And CInt(IntYear) > 2021 Then
                    sSrcPOV = "A#K105" & LastActPOV & " - A#CF170" & sSrcDIM & " - A#OC17" & sSrcDIM & " - A#CF110" & sSrcDIM & " - A#DC66" & sSrcDIM & " + A#OC66" & sSrcDIM
                Else
                    sSrcPOV = "A#K105" & LastActPOV & " - (A#CF170" & sSrcDIM & " - A#CF170" & LastActPOV & " + A#OC17" & sSrcDIM & ") - (A#CF110" & sSrcDIM & " -  A#CF110" & LastActPOV & ") - A#DC66" & sSrcDIM & " + A#OC66" & sSrcDIM
                End If
            Else

                If left(StrScenario,6) = "BUDGET" Then
                    PrevYearScenPOV = Mid(LastActYearScenPOV, 1, Len(LastActYearScenPOV)-4) & "PRIOR"
                Else
                    PrevYearScenPOV = "Y#PRIOR"
                End If

                sSrcPOV = "A#K107." & PrevYearScenPOV & ".P#DEC" & sSrcDIM & "- A#CF170" & sSrcDIM & " - A#OC17" & sSrcDIM & " - A#CF110" & sSrcDIM&" - A#DC66" & sSrcDIM & " + A#OC66" & sSrcDIM
            End If

            If Len(sSrcPOV) > 0 Then
                Hs.Clear "A#K107"
                HS.Exp "A#K107.C2#[None].C3#INP.C4#[None].I#[ICP None] = " & sSrcPOV

            End If

        End If
    End If
End Sub

Sub C2_Inp_Calculations(StrBA,EstimationScenario,bUseActualRules,StrEntity,StrScenario)

    If StrScenario = "BUDGET_ACTRATE" or StrScenario = "ACTUALFCST_PREVYRATE" Then Exit Sub
    If bUseActualRules = "False" Then StrView = ".W#Periodic"

    AccountList = Array("RM01I", "MORI")
    sPrevICP = ""

    For AccountLoop = LBound(AccountList) To UBound(AccountList)
        AccountToProcess = AccountList(AccountLoop)

        Set DataUnit = HS.OpenDataUnit("A#" & AccountToProcess & ".C2{Countries.[Base]}")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, Account, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            Hs.Clear "A#"& AccountToProcess & ".C1#" & StrC1& ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4 & ".I#" & StrICP &StrView
        Next

        Set DataUnit = HS.OpenDataUnit("A#" & AccountToProcess & ".C2#C2_Inp"&StrView)
        NumItems = DataUnit.GetNumItems

        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAcc, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                If EstimationScenario = True and StrBA = "MACGREGOR" Then
                    StrPOV = "A#" & AccountToProcess & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#NO_COUNTRY.C3#" & StrC3 & ".C4#" & StrC4&StrView
                Else
                    If sPrevICP <> StrICP Then
                        StrCountry = GetUD(StrICP, "Entity", "Countrycode")
                        sPrevICP = StrICP
                    End If
                    StrPOV = "A#" & AccountToProcess & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrCountry & ".C3#" & StrC3 & ".C4#" & StrC4&StrView
                End If
                Call HS.SetDataWithPOV(StrPOV, dData, True)

        Next
    Next
End Sub

Sub ResultAndPersonnelAcc(IntCurPeriodNumPer, StrScenario, StrBA, bIsBase, IntYear)

    sDestDIM = ".I#[ICP None].C2#[None].C3#INP.C4#[None]"
    sSrcDIM = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"

    For Each sAcc In Array("HC001", "HC002", "HC003", "HC005")
        If Instr(Ucase(StrScenario),"STRATEGY") = 0 Then

            HS.Exp "A#YAVE" & sAcc & sDestDIM & " = (" & Cumulative("A#" & sAcc & sSrcDIM, "Periodic", 0) & ")/" & IntCurPeriodNumPer
        Else
            iStrategyYear = Right(StrScenario, 4)
            If iStrategyYear < 2030 Or IntCurPeriodNumPer = 3 Then
                HS.Exp "A#YAVE" & sAcc & sDestDIM & " = A#" & sAcc & sSrcDIM
            Else
                If IntCurPeriodNumPer = 6 Then
                    HS.Exp "A#YAVE" & sAcc & sDestDIM & " = (A#" & sAcc & sSrcDIM & " + A#" & sAcc & sSrcDIM & ".P#CUR-3)/2"
                ElseIf IntCurPeriodNumPer = 9 Then
                    HS.Exp "A#YAVE" & sAcc & sDestDIM & " = (A#" & sAcc & sSrcDIM & " + A#" & sAcc & sSrcDIM & ".P#CUR-3 + A#" & sAcc & sSrcDIM & ".P#CUR-6)/3"
                ElseIf IntCurPeriodNumPer = 12 Then
                    HS.Exp "A#YAVE" & sAcc & sDestDIM & " = (A#" & sAcc & sSrcDIM & " + A#" & sAcc & sSrcDIM & ".P#CUR-3 + A#" & sAcc & sSrcDIM & ".P#CUR-6 + A#" & sAcc & sSrcDIM & ".P#CUR-9)/4"
                End If
            End If
        End If
    Next

    HS.Exp "A#K180" & sDestDIM & " = A#A137" & sSrcDIM & " - A#L265" & sSrcDIM & " - A#L379" & sSrcDIM
End Sub

Sub KeyFigures(StrPrevScenYEnd,StrRolPrevScenYEnd,StrRolPrevScenCurP,StrScenario,IntCurPeriodNum,StrPeriod,IntYear,StrCurrFcstYear,Str1stFcstPeriod,bIsBase,bUseActualRules,StrBA,StrEntity)

    sSrcPOV = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
    sIOSUBPOV = ".I#[ICP Top].C2#IO_SUB.C3#CUSTOM3_TOP"
    sDestPOV = ".I#[ICP None].C2#[None].C3#INP"

    sSrcDIM = ".I#[ICP Top].C2#CUSTOM2_TOP"
    sDestDIM = ".I#[ICP None].C2#[None]"

    If bIsBase = TRUE Then
        Call ResultAndPersonnelAcc(IntCurPeriodNum, StrScenario, StrBA, bIsBase, IntYear)

        If CInt(IntYear) > (FirstYearWithData+1) Or (CInt(IntYear) = FirstYearWithData And StrPeriod = "Dec") Then

            For Each sHCAcc In Array("HC001", "HC002", "HC003", "HC005")
                Call RollingAverageNMonths("A#RA12" & sHCAcc & sDestDIM, "A#" & sHCAcc & sSrcDIM, StrRolPrevScenCurP, 12, StrScenario)
            Next
        End If
    End If

    If bUseActualRules = TRUE Then
        HS.Exp "A#KF48" & sDestPOV & " = A#RM70" & sSrcPOV & " + A#RM57" & sSrcPOV
    Else
        Call ClearDerived("A#KF48" & sDestDIM)

        HS.Exp "A#KF48" & sDestDIM & " = A#RM70" & sSrcDIM & " + A#RM57" & sSrcDIM
    End If

    For Each sDestAcc In Array("KF47_HELP", "KF51_HELP")
        sSrcC1 = ".C1{TOTCOP.[Base]}"
        If sDestAcc = "KF51_HELP" Then
            sSrcC1 = ".C1{PPATOTAL.[Base]}"
        End If

        Set DataUnit = HS.OpenDataUnit("A#RM70.I#[ICP Top]" & sSrcC1 & ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAcc, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            If HS.IsZero(dData) = FALSE Or CInt(IntYear) > 2024 Or (CInt(IntYear) = 2024 And CInt(IntCurPeriodNum) > 7) Then
                HS.Exp "A#" & sDestAcc & ".C1#" & StrC1 & sDestDIM & ".C4#[None] = A#RM70.C1#" & StrC1 & sSrcDIM & ".C4#CUSTOM4_TOP + A#RM57.C1#" & StrC1 & sSrcDIM & ".C4#CUSTOM4_TOP"
            End If
        Next
    Next

    If bUseActualRules = TRUE Then
        HS.Exp "A#KF47" & sDestPOV & " = A#KF48" & sSrcPOV & " - A#KF47_HELP" & sSrcPOV
        HS.Exp "A#KF51" & sDestPOV & " = A#KF47" & sSrcPOV & " - A#KF51_HELP" & sSrcPOV
    Else
        Call ClearDerived("A#KF47" & sDestDim)
        Call ClearDerived("A#KF51" & sDestDim)

        HS.Exp "A#KF47" & sDestDIM & " = A#KF48" & sSrcDIM & " - A#KF47_HELP" & sSrcDIM
        HS.Exp "A#KF51" & sDestDIM & " = A#KF47" & sSrcDIM & " - A#KF51_HELP" & sSrcDIM
    End If

    HS.Exp "A#KF50" & sDestPOV & " = A#KF47_HELP" & sSrcPOV & " - A#RM57" & sSrcPOV

    HS.Exp "A#KF36" & sDestPOV & " = A#KF51_HELP" & sSrcPOV & " + A#KF47_HELP" & sSrcPOV & " - A#RM57" & sSrcPOV

    If CInt(IntYear) > (FirstYearWithData+1) Or (CInt(IntYear) = FirstYearWithData And StrPeriod = "Dec") Then
        For Each sAcc In HS.Account.List("ROLLING_AVERAGE_KEYFIG_BS", "[Base]")
            sAccUD = GetUD(sAcc, "Account", "")
            sSrcAcc = GetParamFromTxt("SrcAcc", sAccUD)

            iMonths = 13
            If Instr(sAccUD, "R3M") > 0 Then
                iMonths = 4
            End If

            If sAcc = "KF54_C" Then
                Call RollingAverageNMonths("A#" & sAcc & ".I#[ICP None].C3#INP", "A#" & sSrcAcc & ".I#[ICP Top].C3#CUSTOM3_TOP", StrRolPrevScenCurP, iMonths, StrScenario)
            Else
                Call RollingAverageNMonths("A#" & sAcc & sDestPOV, "A#" & sSrcAcc & sSrcPOV, StrRolPrevScenCurP, iMonths, StrScenario)
            End If
        Next
    End If

    If StrScenario = "FORECAST" Then
        If bUseActualRules = False Then

            HS.Clear "A#A105_LastActData" & sDestPOV
            HS.Exp "A#A105_LastActData" & sDestPOV & " = A#A105_Help" & sSrcPOV & ".P#Prior"
        End If
    End If

    If bIsBase = True Then
        If StrScenario = "FORECAST" Then
            If bUseActualRules = False Then

                For Each sAccount In Array("L173", "L175")
                    HS.Clear "A#" & sAccount & sDestPOV
                    HS.Exp "A#" & sAccount & sDestPOV & " = A#" & sAccount & sSrcPOV & ".P#Prior"
                Next
            End If
        ElseIf Left(StrScenario, 8) = "STRATEGY" Then
            IntActYear = Int(Right(StrScenario, 4))
            If CInt(IntYear) > CInt(IntActYear) Then
                HS.Clear "A#A105_LastActData"& sDestPOV
                HS.Exp "A#A105_LastActData"& sDestPOV &"  = A#A105_LastActData"& sSrcPOV & ".P#Last.Y#Prior"

                If CInt(IntActYear) >= 2020 Then

                    For Each sAccount In Array("L173", "L175")
                        HS.Clear "A#" & sAccount & sDestPOV
                        HS.Exp "A#" & sAccount & sDestPOV & " = A#" & sAccount & sSrcPOV & ".P#Last.Y#Prior"
                    Next
                End If
            End If
        End If
    End If

    HS.Exp "A#KF03B" & sDestPOV & " = A#KF03" & sSrcPOV & " - " & RollingNMonthsAverage("A#A105_Help" & sSrcPOV, StrRolPrevScenCurP, 13, StrScenario)

    Call SetValuesWithDataCheck("A#A300_bl" & sDestPOV, Array("A#A216" & sIOSUBPOV, "A#A217" & sIOSUBPOV, "A#A218" & sIOSUBPOV, "A#A219" & sIOSUBPOV, "A#A234" & sIOSUBPOV, "A#A252" & sIOSUBPOV, "A#A272E" & sSrcPOV, "A#A272I" & sSrcPOV))

    HS.Exp "A#PUR" & sDestPOV & " = A#RM10" & sSrcPOV & " - A#RM50" & sSrcPOV & "-(A#A300_bl." & StrPrevScenYEnd & sSrcPOV & "-A#A300_bl" & sSrcPOV & ") + A#RM51" & sSrcPOV & " + A#RM53" & sSrcPOV & " + A#RM55" & sSrcPOV & " - A#RM68" & sSrcPOV & " - A#RM93" & sSrcPOV & " +(A#L425." & StrPrevScenYEnd & sSrcPOV & "-A#L425" & sSrcPOV & ") + A#OC20" & sSrcPOV & " - A#OC12" & sSrcPOV & " - A#OC13" & sSRcPOV & " - A#OC65" & sSrcPOV

    If StrScenario <> "BUDGET_FORECAST" And Instr(StrScenario, "STRATEGY") = 0 Then

        Call RollingNMonths("A#RM10_3m" & sDestPOV, "A#RM10" & sSrcPOV, StrRolPrevScenCurP, 3, StrScenario)

    End If

    If CInt(IntYear) > (FirstYearWithData+1) Or (CInt(IntYear) = FirstYearWithData And StrPeriod = "Dec") Then
        Call RollingNMonths("A#KF12" & sDestPOV, "A#RM28" & sSrcPOV, StrRolPrevScenCurP, 3, StrScenario)
    End If

    ValidPeriod = CheckValidDataPeriodForRollingCalcs(13)
    If ValidPeriod = True Then
        If HS.Period.IsLast = FALSE Then
            Hs.Exp "A#KF100" & sDestPOV & " = A#RM70" & sSrcPOV & " + A#RM68" & sSrcPOV & " + A#RM70" & sSrcPOV & "." & StrPrevScenYEnd & " + A#RM68" & sSrcPOV & "." & StrPrevScenYEnd & " - A#RM70" & sSrcPOV & "." & StrRolPrevScenCurP & " - A#RM68" & sSrcPOV & "." & StrRolPrevScenCurP
        Else
            Hs.Exp "A#KF100" & sDestPOV & " = A#RM70" & sSrcPOV & ".W#YTD.P#CUR"  & " + A#RM68" & sSrcPOV & ".W#YTD.P#CUR"
        End If

        Call ClearDerived("A#KF100" & sDestPOV)
    End If

    If CInt(IntYear) > (FirstYearWithData+1) Or (CInt(IntYear) = FirstYearWithData And StrPeriod = "Dec") Then

        For Each sAcc In CombineLists(Array("KF08","KF13","KF13_C"), HS.Account.List("ROLLING_12M_KEYFIG_PL", "[Base]"))
            If sAcc <> "KF22" Or StrScenario <> "FORECAST" Then
                sSrcAcc = GetUD(sAcc, "Account", "SrcAcc")
                If sSrcAcc <> "" Then
                    sSrcPOV = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
                    If sAcc = "KF13_C" Then
                        Call Rolling12Months("A#" & sAcc & ".I#[ICP None].C3#INP", "A#" & sSrcAcc & ".I#[ICP Top].C3#CUSTOM3_TOP", StrRolPrevScenCurP, StrPrevScenYEnd)
                    Else
                        Call Rolling12Months("A#" & sAcc & sDestPOV, "A#" & sSrcAcc & sSrcPOV, StrRolPrevScenCurP, StrPrevScenYEnd)
                    End If
                End If
            Else
                Call Rolling12Months("A#KF22.C3#INP.C4#[None].I#[ICP None]", "A#RM10.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]", StrRolPrevScenCurP, StrPrevScenYEnd)
            End If
        Next

        For Each sAcc In HS.Account.List("KF_HELP_ROLL_12M", "[Base]")
            sSrcAcc = GetUD(sAcc, "Account", "SrcAcc")
            If sSrcAcc <> "" Then
                Call Rolling12Months("A#" & sAcc & ".C1#[None]" & sDestPOV, "A#" & sSrcAcc & ".C1#CUSTOM1_TOP" & sSrcPOV, StrRolPrevScenCurP, StrPrevScenYEnd)
            End If
        Next
    End If

    aClearPositive = Array("R816_12M","R82NET_12M")
    For Each acc in aClearPositive
        dData = Hs.GetCell("A#" & acc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")
        If dData >= 0 Then
            Hs.Clear "A#" & acc
        End If
    Next

    ValidPeriod = CheckValidDataPeriodForRollingCalcs(13)
    If ValidPeriod = True Then

        HS.Exp "A#KF107.C1#[None]" & sDestPOV & " = (A#L210.C1#CUSTOM1_TOP" & sSrcPOV & " + A#L210.C1#CUSTOM1_TOP" & sSrcPOV & "." & StrRolPrevScenCurP & ") / 2"

        HS.Exp "A#KF108.C1#[None]" & sDestPOV & " = (A#CF800.C1#CUSTOM1_TOP" & sSrcPOV & " + A#CF800.C1#CUSTOM1_TOP" & sSrcPOV & "." & StrRolPrevScenCurP & ") / 2"
    End If

End Sub

Sub Capex (StrPrevScenYEnd,IntYear,StrScenario)

    sDestDIM = ".I#[ICP None].C2#[None].C3#INP.C4#[None]"
    sSrcDIM = ".I#[ICP Top].C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"

    sDestPOV = ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"
    sSrcPOV = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcPrevY = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & StrPrevScenYEnd & ".C3#BEGBALtot.C4#CUSTOM4_TOP"

    If CInt(IntYear) > 2018 And UCase(StrScenario) = "ACTUAL" Then
        Hs.Clear "A#OC66"
        Hs.Clear "A#DC66"

        HS.Exp "A#OC66" & sDestDIM & " = A#A118.C2#ACQTOT" & sSrcDIM & " + A#A160.C2#ACQTOT" & sSrcDIM & " - A#A116.C2#ACQTOT" & sSrcDIM
        HS.Exp "A#DC66" & sDestDIM & " = A#A118.C2#DISPBUSINTOT" & sSrcDIM & " + A#A160.C2#DISPBUSINTOT" & sSrcDIM & " - A#A116.C2#DISPBUSINTOT" & sSrcDIM
    End If

    Hs.Exp "A#OC98" & sDestPOV & " = -A#A115" & sSrcPOV & " + A#A115" & sSrcPrevY & " - A#A117" & sSrcPOV & " + A#A117" & sSrcPrevY & " - A#A160" & sSrcPOV & " + A#A160" & sSrcPrevY & " + A#OC15" & sSrcPOV & " - A#DC66" & sSrcPOV & " + A#OC66" & sSrcPOV & " - A#DC15" & sSrcPOV & " + A#RM69" & sSrcPOV & " - A#DC67" & sSrcPOV

    HS.Exp "A#OC100" & sDestPOV & " = A#OC66" & sSrcPOV & " - A#DC66" & sSrcPOV & " - A#OC98" & sSrcPOV & " - A#CA115" & sSrcPOV & " - A#CA117" & sSrcPOV & " - A#CA160" & sSrcPOV

    HS.Exp "A#OC26 = A#OC20 - A#OC25"

    HS.Exp "A#OC40 = A#OC20 - A#OC65"
    HS.Exp "A#DC40 = A#DC20 - A#DC65"
    HS.Exp "A#OC45 = A#OC20 - A#OC65 - A#OC12"
End Sub

Sub InternalInventoryCalcs(StrBA, StrEntity, StrScenario, IntYear, StrPeriod, StrCurrFcstYear)

    Call InternalInventoryC2Calc()
End Sub

Function RollingPrev6M(StrPOV)
    dPeriod = HS.Period.Number()

    dFirst = 0
    dAddition = 0
    If dPeriod < 7 Then
        If dPeriod > 1 Then
            dAddition = HS.GetCell(StrPOV & ".P#CUR-1")
        End If

        dLatest = HS.GetCell(StrPOV & ".Y#PRIOR.P#LAST")
        If dLatest <> 0 Then
            dFirst = HS.GetCell(StrPOV & ".Y#PRIOR.P#CUR+5")
        End If
    Else
        dLatest = HS.GetCell(StrPOV & ".P#CUR-1")
        If dLatest <> 0 And dPeriod > 7 Then
            dFirst = HS.GetCell(StrPOV & ".P#CUR-7")
        End If
    End If

    RollingPrev6M = dLatest - dFirst + dAddition
End Function

Sub InternalInventoryC2Calc()
    HS.Exp "C2#Net_Int = C2#Gross_Int + C2#Obsol_Int"
    HS.Exp "C2#Net_Ext = C2#Gross_Ext + C2#Obsol_Ext"
    HS.Exp "C2#Net_JRHI = C2#Gross_JRHI + C2#Obsol_JRHI"
End Sub

Sub RollingCalculations(bUseActualRules,StrEntity,StrScenario,StrPeriod,StrRolPrevScenCurP,StrPrevScenYEnd,Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,strApp, StrBA)

    If CInt(IntYear) > CInt(FirstYearWithData) Then
        CalcActive = True
        If CInt(IntYear) >= CInt(StrCurrFcstYear) Then

            dValue = HS.GetCell("E#[None].Y#2039.P#Dec.A#RollingCalcControl.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
            If HS.IsZero(dValue) = TRUE Then
                dValue = HS.GetCell("E#[None].A#RollingCalcControl.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
            End If
            If HS.IsZero(dValue) = FALSE Then
                If dValue = 1 Then
                    CalcActive = False
                ElseIf dValue = 9 Then

                        CalcActive = False

                Else
                    StrRevLv = HS.ReviewStatusUsingPhaseID("S#" & StrScenario & ".P#" & StrPeriod & ".E#" & StrEntity, 3)
                    RevLvNumber = ConvertReviewStatus(StrRevLv)
                    If dValue >= RevLvNumber Then
                        CalcActive = False
                    End If
                End If
            End If
        End If

        If CalcActive = TRUE And (StrScenario = "ACTUAL" Or Left(StrScenario, 8) = "FORECAST") Then
            ClearActive = False
            bCalcNForward = TRUE
            bIsBase = HS.Entity.Isbase("", "")

            If StrScenario = "ACTUAL" Then

                    If CInt(Str1stFcstPeriod) = 1 Then
                        ReportingYear = CInt(StrCurrFcstYear) - 1
                        ActiveReportingPeriod = "Dec"
                        ActiveReportingPeriodNo = 12
                    Else
                        ReportingYear = CInt(StrCurrFcstYear)
                        ActiveReportingPeriodNo = CInt(Str1stFcstPeriod) - 1
                        ActiveReportingPeriod = GetPeriodLabel(ActiveReportingPeriodNo)
                    End If

                If CInt(ReportingYear) = CInt(IntYear) and ActiveReportingPeriod = StrPeriod Then
                    NextScenarioPOV = ".S#FORECAST"
                Else
                    StoredFcstScenario = GetStoredFcstForActRepPer(IntYear,IntCurPeriodNum,Str1stFcstPeriod,StrCurrFcstYear)
                    NextScenarioPOV = ".S#"&StoredFcstScenario
                    If StoredFcstScenario = "" Then
                        If CInt(IntYear) < CInt(ReportingYear) - 1 Or CInt(IntYear) >= CInt(ReportingYear) Then
                            CalcActive = False
                        End If
                        bCalcNForward = FALSE
                    End If
                End If

                If CInt(IntYear) > CInt(ReportingYear) or (CInt(IntYear) = CInt(ReportingYear) and CInt(IntCurPeriodNum) > CInt(ActiveReportingPeriodNo)) Then
                    CalcActive = False
                End If
            Else
                If StrScenario <> "FORECAST" Then
                     bCalcNForward = False

                            CalcActive = False

                ElseIf CInt(IntYear) < (CInt(StrCurrFcstYear) - 2) Or CInt(IntYear) > (CInt(StrCurrFcstYear) + 1) Then
                    CalcActive = False
                ElseIf CInt(IntYear) < (CInt(StrCurrFcstYear) - 1) Or (CInt(IntYear) < CInt(StrCurrFcstYear) And CInt(Str1stFcstPeriod) <> 1) Then

                    bCalcNForward = False
                ElseIf CInt(IntYear) = CInt(StrCurrFcstYear) And IntCurPeriodNum < (CInt(Str1stFcstPeriod) - 1) Then

                    bCalcNForward = False
                End If

                If StrScenario = "FORECAST" And CalcActive = TRUE And bIsBase = TRUE Then
                    If CInt(IntYear) = CInt(StrCurrFcstYear) And IntCurPerioNum >= CInt(Str1stFcstPeriod) Or CInt(IntYear) > CInt(StrCurrFcstYear) Then

                            StrRevLv = HS.ReviewStatusUsingPhaseID("S#" & StrScenario & ".P#" & StrPeriod & ".E#" & StrEntity, 1)
                            RevLvNumber = ConvertReviewStatus(StrRevLv)
                            If RevLvNumber < 4 Or (RevLvNumber < 6 ) Then
                                CalcActive = False
                            End If

                    End If
                End If
            End If

            If CalcActive = True Then

                If StrScenario = "ACTUAL" Then
                    ValidAccUDs = array("All","Act","L12M")
                Else
                    ValidAccUDs = array("All","Est","L12M")
                End If

                aAccTops = Array("RM70", "MORT")

                aMonths = Array(3, 12)
                If StrScenario = "FORECAST" And CInt(IntYear) >= CInt(StrCurrFcstYear) And bCalcNForward = TRUE Then
                    If CInt(IntYear) = (CInt(StrCurrFcstYear) + 2) And (IntCurPeriodNum + 3) > CInt(Str1stFcstPeriod) Then
                        bCalcNForward = FALSE
                    ElseIf CInt(IntYear) > (CInt(StrCurrFcstYear) + 1) Or (CInt(IntYear) = (CInt(StrCurrFcstYear) + 1) And IntCurPeriodNum > CInt(Str1stFcstPeriod)) Then
                        aMonths = Array(3)

                            bCalcNForward = FALSE

                    ElseIf CInt(IntYear) = (CInt(StrCurrFcstYear) + 1) And IntCurPeriodNum <= CInt(Str1stFcstPeriod) Then

                            aMonths = Array(3)

                    ElseIf CInt(IntYear) = CInt(StrCurrFcstYear) And IntCurPeriodNum > CInt(Str1stFcstPeriod) Then

                            aMonths = Array(3)

                    End If
                End If

                For Each AccTop In aAccTops
                    For Each Acc in HS.Account.List(AccTop,"[Base]")
                        sC3Top = HS.Account.CustomTop(Acc,"Custom3")
                        If sC3Top = "C3_TECHNICAL_PARENT_AND_ROLLING" Or sC3Top = "C3_TECHNICAL_PARENT_AND_ROLLINGS" Then
                            bCalc = True
                            sL12MSrcPOV = ""
                            sL12MDestPOV = ""

                            AccUD = GetUD(Acc, "Account", "RolCalcIn")
                            If AccUD = "L12M"  Then

                                If Acc <> "R846" Then
                                    sL12MDestPOV = ".C2#[None]"
                                    sL12MSrcPOV = ".C2#CUSTOM2_TOP"
                                End If

                                If bIsBase = False And Acc <> "RM58" Then
                                    If HS.Account.IsICP(Acc) = False Then
                                        bCalc = False
                                    End If
                                End If
                            ElseIf Left(StrScenario, 9) = "FORECAST_" Then
                                AccUD = "L12M"
                            End If

                            If AccUD <> "" And (bCalc = True Or ClearActive = True) Then
                                If IsItemInList(AccUD,ValidAccUDs) = True Then

                                    If AccUD <> "L12M" And (CInt(IntYear) <= CInt(StrCurrFcstYear) Or bCalcNForward = TRUE) Then

                                        HS.Clear "A#"&Acc&".C3#L3M"
                                        If ClearActive = FALSE Then

                                            Call RollingNMonths("A#"&Acc&".C3#L3M", "A#"&Acc&".C3#CUSTOM3_TOP", StrRolPrevScenCurP, 3, StrScenario)
                                        End If
                                    End If

                                    HS.Clear "A#" & Acc & ".C3#L12M"
                                    If ClearActive = FALSE Then

                                        Call Rolling12Months("A#" & Acc & sL12MDestPOV & ".C3#L12M", "A#" & Acc & sL12MSrcPOV & ".C3#CUSTOM3_TOP", StrRolPrevScenCurP, StrPrevScenYEnd)
                                    End If

                                    sC4POV = ""
                                    If StrScenario = "ACTUAL" Then
                                        sC4POV = ".C4#[None]"
                                    End If

                                    If bCalcNForward = TRUE And AccUD <> "L12M" Then

                                        For Each iMonths In aMonths
                                            sC3POV = ".C3#N" & iMonths & "M"
                                            HS.Clear "A#" & Acc & sC3POV

                                            sSrcPOV = SumNForward("A#" & Acc & ".W#Periodic.C3#CUSTOM3_TOP" & sC4POV & NextScenarioPOV, iMonths, 1)
                                            If Len(sSrcPOV) > 0 Then
                                                HS.Exp "A#" & Acc & sC3POV & sC4POV & " = " & sSrcPOV

                                                    Call ClearDerived("A#" & Acc & sC3POV & sC4POV)

                                            End If
                                        Next
                                    End If
                                End If
                            End If
                        End If
                    Next
                Next

                For each RollingC3 in HS.Custom3.List("ROLLING","[Base]")
                    HS.Clear "C2#C2_Inp.C3#"&RollingC3
                Next
            End If
        End If
    End If
End Sub

Sub MoveDataFrom_LOAD_to_INP(StrEntity,IntYear,strApp,sScenario)

    CopyLOADtoINP = 0
    If UCase(sScenario) = "ACTUAL" Or UCase(sScenario) = "FORECAST" Then

        CopyLOADtoINP = HS.GetCell("A#COPY_C3_LOAD_TO_INP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
    End If

    If CopyLOADtoINP <> 0 Then

            EntUD = GetUD(StrEntity, "Entity", "")
            If Instr(EntUD,"/SAP_LOAD/") > 0 Then SAP_LOAD_ENT = True Else SAP_LOAD_ENT = False

        If UCase(sScenario) = "ACTUAL" Then
            If UCase(sScenario) <> "FORECAST" Then
                aAccountList = HS.Account.List("","[Base]")
            Else
                aAccountList = CombineLists(HS.Account.List("RM67","[Base]"), Array("RM23", "RM32"))
                aAccountList = CombineLists(HS.Account.List("HEADCOUNT","[Base]"), aAccountList)
            End If

        For Each Acc In aAccountList
            AccUD = GetUD(Acc, "Account", "")
            If Instr(AccUD,"/SAP_LOAD/") > 0 Then SAP_LOAD_ACC = True Else SAP_LOAD_ACC = False
            If Instr(AccUD,"/SAP_HR_LOAD/") > 0 Then SAP_HR_LOAD_ACC = True Else SAP_HR_LOAD_ACC = False

            If UCase(sScenario) = "FORECAST" Then

            ElseIf SAP_LOAD_ENT = True Then

                If SAP_LOAD_ACC = True or SAP_HR_LOAD_ACC = True Then
                    bNormalCopy = TRUE

                    If Acc = "RM01E" Then
                        dData = HS.GetCell("A#RM01E.I#[ICP Top].C1#CUSTOM1_TOP.C2#NO_COUNTRY.C3#LOAD.C4#[None]")
                        If HS.IsZero(dData) = FALSE Then

                            dValue = HS.GetCell("A#RM01E.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#LOAD.C4#[None]")
                            If dData = dValue Then
                                bNormalCopy = FALSE

                                HS.Clear "A#" & Acc & ".C2#NO_COUNTRY.C3#INP"
                                HS.Exp "A#" & Acc & ".C2#NO_COUNTRY.C3#INP = A#" & Acc & ".C2#NO_COUNTRY.C3#LOAD - A#" & Acc & ".C2#Markets.C3#INP"
                            End If
                        End If
                    End If

                    If bNormalCopy = TRUE Then
                        HS.Clear "A#"&Acc&".C3#INP"
                        HS.Exp "A#"&Acc&".C3#INP = A#"&Acc&".C3#LOAD"
                    End If

                End If
            Else
                If SAP_HR_LOAD_ACC = True Then
                    HS.Clear "A#"&Acc&".C3#INP"
                    HS.Exp "A#"&Acc&".C3#INP = A#"&Acc&".C3#LOAD"

                End If
            End If
        Next

        HS.Clear "A#COPY_C3_LOAD_TO_INP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"

        If UCase(sScenario) = "ACTUAL" Then
            CellText = "SAP/HR data copytime (C3#LOAD -> C3#INP): "&TimeStamp
        Else

        End If
        HS.SetCellTextWithLabel "A#COPY_C3_LOAD_TO_INP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText

        End If
    End If
End Sub

Sub Copy_SAP_ControlInfo(StrEntity,StrScenario,IntYear)
    If Ucase(StrScenario) = "ACTUAL" Then

        If StrEntity = "ADMIN_ENTITY" Or CInt(IntYear) = 2030 Then
            bValid = TRUE
        Else
            bValid = FALSE
            EntUD = GetUD(Ent, "Entity", "")
            If Instr(EntUD,"/SAP_LOAD/") > 0 Then
                bValid = TRUE
            End If
        End If

        If bValid = TRUE Then

            If StrEntity <> "ADMIN_ENTITY" Then
                StrAdminEntMode = HS.GetCellText("E#ADMIN_ENTITY.A#ModeCurrentlyIn.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].V#EUR")

                If len(StrAdminEntMode) >= 4 Then
                    HS.SetCellTextWithLabel "A#ModeCurrentlyIn.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]", "[Default]", StrAdminEntMode
                End If
            End If

            ModeCurrentlyIn = HS.GetCellTextWithLabel("A#ModeCurrentlyIn.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]","[Default]")

            If ModeCurrentlyIn <> "" Then

                ErrorToleranceSAPLoad = HS.GetCellRealData("A#ErrorToleranceSAPLoad.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]",bIsReal_ErrorToleranceSAPLoad)
                If bIsReal_ErrorToleranceSAPLoad = False Then
                    ErrorLimit = HS.GetCellRealData("A#ErrorLimit.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]",bIsReal_ErrorLimit)
                End If

                If bIsReal_ErrorToleranceSAPLoad = False and bIsReal_ErrorLimit = False Then

                    For Each sAccount In Array("ErrorLimit", "ErrorToleranceSAPLoad")

                        dData = HS.GetCellRealData("A#" & sAccount & ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None].P#PRIOR", bIsReal_Data)
                        If bIsReal_Data = False Then
                            dData = HS.GetCellRealData("E#ADMIN_ENTITY.V#EUR.A#" & sAccount & ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]", bIsReal_Data)
                        End If

                        If bIsReal_Data = True Then
                            HS.Exp "A#" & sAccount & ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = " & dData
                        End If
                    Next

                    Comment = HS.GetCellTextWithLabel("A#Comment.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]","[Default]")
                    If Comment = "" Then
                        CommentPrevMonth = HS.GetCellTextWithLabel("A#Comment.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#PRIOR","[Default]")
                        If CommentPrevMonth <> "" Then
                            HS.SetCellTextWithLabel "A#Comment.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]", "[Default]", CommentPrevMonth
                        Else
                            CommentAdmin = HS.GetCellTextWithLabel("E#ADMIN_ENTITY.V#EUR.A#Comment.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]","[Default]")
                            If CommentAdmin <> "" Then
                                HS.SetCellTextWithLabel "A#Comment.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]", "[Default]", CommentAdmin
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If
End Sub

Sub ClearZeros(Operator, Amount, sView)

    If sView <> "" Then PreFix = "W#"    : Delimeter = "." Else PreFix = ""    :    : Delimeter = ""

    Set vDataUnit = HS.OpenDataUnit(PreFix&sView)
    vNumItems = vDataUnit.GetNumItems
    For i = 0 To vNumItems - 1
        Call vDataUnit.GetItem(i, sAccount, sICP, sCustom1, sCustom2, sCustom3, sCustom4, iData)

        AbsData = Abs(iData)
        Select Case Operator
            Case "="  : If AbsData=Amount  Then bClear = True Else bClear = False
            Case ">=" : If AbsData>=Amount Then bClear = True Else bClear = False
        End Select

        If bClear = True Then

            If HS.Account.AccountType(sAccount) <> "BALANCERECURRING" Then
                vAI1234="A#"&sAccount&".I#"&sICP&".C1#"&sCustom1 &".C2#"&sCustom2 &".C3#"&sCustom3 &".C4#"&sCustom4
                dData = HS.GetCellRealData(vAI1234,bIsReal)
                If bIsReal = True Then
                    HS.Clear vAI1234&Delimeter&PreFix&sView
                End If
            End If
        End If
    Next

End Sub

Sub ImpactStatusCalc(StrBA,StrEntity,StrPeriod,StrScenario,IntYear,IntCurPeriodNum,StrCurrFcstYear,Str1stFcstPeriod,bUseActualRules,TrueScenario)

    If UCase(StrScenario) = "ACTUAL" Then

        If CInt(Str1stFcstPeriod) = 1 Then
            LastActYear = CInt(StrCurrFcstYear) - 1
            LastActPeriod = 12
            LastActPerLabel = "Dec"
        Else
            LastActYear = CInt(StrCurrFcstYear)
            LastActPeriod = CInt(Str1stFcstPeriod) - 1
            LastActPerLabel = GetPeriodLabel(LastActPeriod)
        End If

        If CInt(IntYear) = CInt(LastActYear) and StrPeriod = LastActPerLabel Then

            StrRevLvForPhase1 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,1)
            Phase1RevLvNumber = ConvertReviewStatus(StrRevLvForPhase1)
            If Phase1RevLvNumber < 1 Or Phase1RevLvNumber >= 9 Then
                StrRevLvForPhase2 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,2)
                Phase2RevLvNumber = ConvertReviewStatus(StrRevLvForPhase2)
                If Phase2RevLvNumber < 1 Or Phase2RevLvNumber >= 9 Then
                    StrRevLvForPhase3 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,3)
                    Phase3RevLvNumber = ConvertReviewStatus(StrRevLvForPhase3)
                End If
            End If

            If (Phase1RevLvNumber >= 1 and Phase1RevLvNumber < 9) or (Phase2RevLvNumber >= 1 and Phase2RevLvNumber < 9) or (Phase3RevLvNumber >= 1 and Phase3RevLvNumber < 9) Then

                CS=HS.CalcStatus("S#FORECAST.Y#"&IntYear&".P#"&StrPeriod)
                If Left(CS,2)="OK" or CS="NODATA" Then
                    HS.ImpactStatus "S#FORECAST.Y#"&IntYear&".P#"&StrPeriod
                End If

            End If

        End If
    End If
End Sub

Sub CombineHistoricData(StrScenario,StrPeriod,StrEntity,IntYear,IntCurPeriodNum,bIsBase)

    If IntYear = "2025" and Ucase(StrPeriod) = "JAN" And Ucase(StrScenario) = "BUDGET_FORECAST" Then
        If bIsBase = True Then
            STARTING_YEAR = 2012
            STARTING_PERIOD_NUMBER = 12

            PeriodList = Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
            YearList = Array("2012","2013","2014","2015","2016","2017","2018","2019")

            ScenarioList = Array("ACTUAL","BUDGET","BUDGET_FORECAST","FORECAST","FORECAST_JAN","FORECAST_FEB","FORECAST_MAR","FORECAST_DEC","STRATEGY2017","STRATEGY2018")

            HS.Clear "A#ALL"

            For each YearToLoop in YearList
                For each PeriodToLoop in PeriodList
                    PeriodNo = GetPeriodNumber(PeriodToLoop)
                    If Int(YearToLoop) > Int(STARTING_YEAR) or (Int(STARTING_YEAR) = Int(YearToLoop) and Int(PeriodNo) >= Int(STARTING_PERIOD_NUMBER)) Then
                        For each ScenarioToLoop in ScenarioList
                            Set DataUnit = HS.OpenDataUnit("S#"&ScenarioToLoop&".Y#"&YearToLoop&".P#"&PeriodToLoop)
                            NumItems = DataUnit.GetNumItems
                                For x = 0 To NumItems - 1
                                       Call DataUnit.GetItem(x, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                                        If dData <> 0 Then
                                            StrPOV = "A#"&StrAccount&".I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4
                                            dData2 = Abs(dData)

                                            Call HS.SetDataWithPOV(StrPOV, dData2, True)
                                        End If
                                Next
                        Next
                    End If
                Next
            Next
        End If
    End If
End Sub

Sub CopyDataBetweenScenarios(StrScenario,StrPeriod,StrEntity,IntYear,bCOPY_DATA_AND_SOURCE_SCENARIO,bUseActualRules,bIsBase,Str1stFcstPeriod,StrCurrFcstYear,StrBA)

    If bIsBase = True Then

        DataCopyStartTime = TimeStamp

        SourceScen = mid(bCOPY_DATA_AND_SOURCE_SCENARIO,InStr(bCOPY_DATA_AND_SOURCE_SCENARIO,"-")+1,len(bCOPY_DATA_AND_SOURCE_SCENARIO)-5)
        AccTopListToCopy =  GetUD(StrScenario, "Scenario", "AccTopsToCopy")
        If AccTopListToCopy = "" Then AccTopListToCopy = "ALL"
        EntCopyPOV = ""
        LoopProducts = False

        If Ucase(SourceScen) = "ACTUAL" and StrEntity = "[None]" and StrScenario = "FORECAST" Then

            If StrScenario = "FORECAST" and SourceScen = "ACTUAL" and StrEntity = "[None]" Then
                HS.Exp "A#FCST_ActDataMonth.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = 1"
            End If

            Exit Sub
        End If

        If SourceScen <> "Actual" and (StrScenario = "BUDGET" or Left(StrScenario,8) = "FORECAST") Then ProcessCellTexts = True Else ProcessCellTexts = False

        If Instr(StrScenario,"STRATEGY") > 0 and StrScenario <> "STRATEGY" Then

            EntCopyLV = GetUD(StrEntity, "Entity", "STR_OB_COPY_LV")
            If EntCopyLV = "" Then Exit Sub
            EntCopyPOV = ".E#"&EntCopyLV

            ProductLimitation = GetUD(StrEntity, "Entity", "STR_PRODUCT_LIMITATION")
            If ProductLimitation <> "" then
                LoopProducts = True

                UDLists = Split(ProductLimitation,"|")
                Redim FullIncList(0)
                Redim FullExclList(0)

                Counter = 0     :     Counter2 = 0    :    x = 0
                For each UD_Part in UDLists
                    If x = 0 Then
                        List1 = Split(UD_Part,",")
                        For each List1Mbr in List1
                            If HS.Custom1.IsBase("",List1Mbr) = False Then
                                List2 = HS.Custom1.List(List1Mbr,"[Base]")
                            Else
                                List2 = array(List1Mbr)
                            End If
                            For each List2Mbr in List2
                                redim Preserve FullIncList(Counter)
                                FullIncList(Counter) = List2Mbr
                                Counter = Counter + 1
                            Next
                        Next
                        x = x + 1
                    ElseIf x = 1 Then
                        List1 = Split(UD_Part,",")
                        For each List1Mbr in List1
                            If HS.Custom1.IsBase("",List1Mbr) = False Then
                                List2 = HS.Custom1.List(List1Mbr,"[Base]")
                            Else
                                List2 = array(List1Mbr)
                            End If
                            For each List2Mbr in List2
                                redim Preserve FullExclList(Counter2)
                                FullExclList(Counter2) = List2Mbr
                                Counter2 = Counter2 + 1
                            Next
                        Next
                        x = x + 1
                    Else
                            Err.raise -1, "Incorrect UD specified for an input entity: "&StrEntity&" in "&StrScenario&". Unable to check which products to copy. "& _
                                          "Correct format: e.g. /STR_PRODUCT_LIMITATION:KLR|SPD/, where KLR is the included products in the copy and SPD is the excluded products in the copy", ""
                    End If
                Next

                Counter = 0
                For each C1Mbr In FullIncList
                    If C1Mbr <> "" Then
                        If IsItemInList(C1Mbr,FullExclList)    = False Then
                            Redim Preserve ProductListToCopy(Counter)
                            ProductListToCopy(Counter) = C1Mbr
                            Counter = Counter + 1
                        End If
                    End If
                Next
            End If
        End If

        Call CheckCopyFlagValue(GENERAL_ACTIVATION,ENTITY_SPECIFIC_ACTIVATION,CopyActive,ClearActive)

        If ClearActive = True or CopyActive = True Then

            HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]",""

            bClearCopyFlag = TRUE
            If StrScenario = "FORECAST" and Ucase(SourceScen) = "ACTUAL" and StrEntity = "COPY_SCENARIOS" Then bClearCopyFlag = FALSE
            If StrScenario = "ACTUALFCST_PREVYRATE" and Ucase(SourceScen) = "ACTUAL" Then bClearCopyFlag = FALSE

            Set DataUnit = HS.OpenDataUnit("C4{CUSTOM4_TOP.[Base]}")
            NumItems = DataUnit.GetNumItems
                 For i = 0 To NumItems - 1
                     Call DataUnit.GetItem(i, sAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If StrC2 <> "ALL" Then
                    If sAccount = "CDS_ACTUAL" And bClearCopyFlag = FALSE Then

                    Else
                        HS.Exp "A#"&sAccount&".I#"& StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"& StrC3&".C4#"&StrC4& ".W#Periodic = 0 "
                        HS.Clear "A#"&sAccount&".I#"& StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"& StrC3&".C4#"&StrC4
                    End If
                End If
            Next

            If ProcessCellTexts = True Then
                Set MyCellTextUnit = HS.OpenCellTextUnit("A{Investment_Total.[Base]}", "[Default]", "Account", "Ascending")

                NumItems= MyCellTextUnit.GetNumItems
                For i = 0 to NumItems - 1
                    CellText = MyCellTextUnit.Item(i).CellText
                    If CellText <> "" Then
                        A = MyCellTextUnit.Item(i).Account
                        sI = MyCellTextUnit.Item(i).ICP
                        sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                        sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                        sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                        sC4 = MyCellTextUnit.Item(i).Custom("Custom4")

                        HS.SetCellTextWithLabel "A#"&A&".I#"&sI&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&"", "[Default]",""

                    End If
                Next

            End If

            If ClearActive = True Then
                CellText = "Data cleared via rules"&vbCr& _
                           "Clear started: "&DataCopyStartTime&" (EET)"&vbCr& _
                           "Clear ended: "&TimeStamp&" (EET)"
                HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText
            End If

            If CopyActive = True Then

                If AccTopListToCopy = "ALL" Then
                    AccTopsToloop = Array("ALL")
                ElseIf InStr(AccTopListToCopy, ",") = 0 Then
                    AccTopsToloop = Array(AccTopListToCopy)
                Else
                    AccTopsToloop = Split(AccTopListToCopy,",")
                End If

                StrRetrieveView = ".W#Periodic"

                If Instr(StrScenario,"STRATEGY") > 0 and StrScenario <> "STRATEGY" Then StrRetrieveView = ".W#YTD"

                Copy_Counter = 0

                CopyBegBalAdj = False

                If SourceScen = "ACTUAL" and (StrScenario = "FORECAST_DEC" or StrScenario = "FORECAST_DEC_PREVY") Then
                    CopyBegBalAdj = True
                End If

                For each AccTop in AccTopsToloop

                    If AccTop <> "" Then

                        If AccTop = "ALL" Then
                            StrLIST = HS.Account.List("","[Base]")
                        ElseIf HS.Account.IsBase("",AccTop) = False Then
                            StrLIST = HS.Account.List(AccTop,"[Base]")
                        Else
                            StrLIST = array(AccTop)
                        End If

                        Dim C3TargetAndSourceDic
                        Set C3TargetAndSourceDic = CreateObject("Scripting.Dictionary")

                        For each AccMB in StrLIST

                            If AccMB <> "ConsAcc" and HS.Account.IsBase("VALIDATION",AccMB) = False and HS.Account.IsBase("COPY_SCENARIOS_FLAGS",AccMB) = False Then

                                bIsCalculated = HS.Account.IsCalculated(AccMB)

                                If bIsCalculated = FALSE Then
                                    bCopy = True

                                    If StrScenario <> "ACTUALFCST_PREVYRATE" and (HS.Account.IsBase("NOTES",AccMB) = True And HS.Account.IsBase("BALANCE_SHEET",AccMB) = False And HS.Account.IsBase("NOTE37",AccMB) = False) Then bCopy = False

                                    If bCopy = True Then

                                        If Ucase(SourceScen) = "ACTUAL" Then

                                            C3_Top = HS.Account.C3Top(AccMB)

                                            If C3_Top = "" Or C3_Top = "[None]" Then
                                                C3TargetAndSourceDic.Add ".C3#[None]", ".C3#[None]"
                                            ElseIf C3_Top = "ALL" Then
                                                C3TargetAndSourceDic.Add ".C3#INP", ".C3#C3TOPwoACQ"
                                                C3TargetAndSourceDic.Add ".C3#ACQ", ".C3#ACQ_Total"
                                            ElseIf HS.Custom3.IsBase(C3_Top,"INP") = True or HS.Custom3.IsBase(C3_Top,"ACQ") = True Then

                                                If HS.Custom3.IsBase(C3_Top,"INP") = True Then
                                                    C3TargetAndSourceDic.Add ".C3#INP", ".C3#C3TOPwoACQ"
                                                End If

                                                If HS.Custom3.IsBase(C3_Top,"ACQ") = True Then
                                                    C3TargetAndSourceDic.Add ".C3#ACQ", ".C3#ACQ_Total"
                                                End If
                                            Else
                                                C3TargetAndSourceDic.Add "", ""
                                            End If
                                        Else
                                            C3TargetAndSourceDic.Add "", ""
                                        End If

                                        For Each C3Target In C3TargetAndSourceDic.Keys

                                            C3Source = C3TargetAndSourceDic.Item(C3Target)

                                            If LoopProducts = False Then

                                                If HS.Account.IsBase("SUST_PORTFOLIO", AccMB) = TRUE Then

                                                    HS.Exp "A#"&AccMB&StrRetrieveView&C3Target&" = A#"&AccMB&C3Source&".S#"&SourceScen&FcstYearEndRetrieve&StrRetrieveView&EntCopyPOV
                                                ElseIf HS.Account.IsBase("ACQ_Accounts", AccMB) = TRUE And HS.Account.IsBase("L999", AccMB) = FALSE And Instr(AccMB,"_FINAL") = 0 Then

                                                    If accMB = "ACQ_STOP" Then

                                                        Hs.Clear "A#ACQ_STOP"
                                                        HS.Exp "A#"&AccMB&StrRetrieveView&C3Target&" = A#"&AccMB&C3Source&".S#"&SourceScen&FcstYearEndRetrieve&StrRetrieveView&EntCopyPOV
                                                    End If
                                                Else
                                                    HS.Exp "A#"&AccMB&StrRetrieveView&C3Target&".C4#[None] = A#"&AccMB&C3Source&".S#"&SourceScen&FcstYearEndRetrieve&StrRetrieveView&EntCopyPOV&".C4#[None]"
                                                End If

                                                If CopyBegBalAdj = True and C3Source = ".C3#C3TOPwoACQ" Then
                                                    If C3_Top = "ALL" Then C3_Top = "C3_TECHNICAL_PARENT_AND_ROLLING"

                                                    If HS.Custom3.IsBase(C3_Top,"BegBalAdj") = True    Then
                                                        C4_Top = HS.Account.C4Top(AccMB)
                                                        If C4_Top = "" Then C4_Top = "[None]"
                                                        If C4_Top = "ALL" Then C4_Top = "C4_REPORTING"
                                                        If HS.Custom4.IsBase(C4_Top,"[None]") = True or C4_Top = "[None]" Then

                                                            HS.Exp "A#"&AccMB&StrRetrieveView&".C3#BegBalAdj.C4#[None] = A#"&AccMB&".C3#BegBalAdj_Total.S#"&SourceScen&FcstYearEndRetrieve&StrRetrieveView&EntCopyPOV&".C4#[None]"
                                                        End If
                                                    End If
                                                End If

                                            Else
                                                sC1Top = HS.Account.C1Top(AccMB)

                                                If sC1Top = "" Then
                                                    sC1Top = "[None]"
                                                ElseIf sC1Top = "ALL" Then
                                                    sC1Top = "CUSTOM1_TOP"
                                                End If

                                                If sC4Top = "" Then
                                                    sC4Top = "[None]"
                                                ElseIf sC4Top = "ALL" Then
                                                    sC4Top = "CUSTOM4_TOP"
                                                End If

                                                For each C1 in ProductListToCopy
                                                    If sC1Top = C1 or HS.Custom1.Isbase(sC1Top,C1) = True Then

                                                        If HS.Account.IsBase("ACQ_Accounts", AccMB) = TRUE And Instr(AccMB,"_FINAL") = 0 Then

                                                        ElseIf HS.Custom1.Isbase(sC4Top,"[None]") = True Then
                                                            HS.Exp "A#"&AccMB&StrRetrieveView&C3Target&".C1#"&C1&".C4#[None] = A#"&AccMB&C3Source&".S#"&SourceScen&FcstYearEndRetrieve&StrRetrieveView&EntCopyPOV&".C1#"&C1&".C4#[None]"
                                                        Else
                                                            HS.Exp "A#"&AccMB&StrRetrieveView&C3Target&".C1#"&C1&" = A#"&AccMB&C3Source&".S#"&SourceScen&FcstYearEndRetrieve&StrRetrieveView&EntCopyPOV&".C1#"&C1
                                                        End If
                                                    End If
                                                Next
                                            End If
                                        Next

                                        C3TargetAndSourceDic.RemoveAll
                                    End If
                                End If

                            End If
                        Next
                    End If
                Next

                If Ucase(SourceScen) = "ACTUAL" And Left(StrScenario, 6) <> "ACTUAL" Then

                    AcqDisTopsToClear = array("ACQTOT","DISPBUSINTOT")

                    For each AcqDisTopMbr in AcqDisTopsToClear
                        Set DataUnit = HS.OpenDataUnit("C2{"&AcqDisTopMbr&".[Base]}")
                        NumItems = DataUnit.GetNumItems

                             For i = 0 To NumItems - 1
                                 Call DataUnit.GetItem(i, sAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                                 HS.Exp "A#"&sAccount&".I#"& StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"& StrC3&".C4#"&StrC4& ".W#Periodic = 0 "
                                 HS.Clear "A#"&sAccount&".I#"& StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"& StrC3&".C4#"&StrC4
                        Next
                    Next
                End If

                If ProcessCellTexts = True Then
                    Set MyCellTextUnit = HS.OpenCellTextUnit("A{Investment_Total.[Base]}.S#"&SourceScen, "[Default]", "Account", "Ascending")
                        NumItems= MyCellTextUnit.GetNumItems
                        For i = 0 to NumItems - 1
                            A = MyCellTextUnit.Item(i).Account
                            sI = MyCellTextUnit.Item(i).ICP
                            sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                            sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                            sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                            sC4 = MyCellTextUnit.Item(i).Custom("Custom4")

                            CellText = MyCellTextUnit.Item(i).CellText

                            HS.SetCellTextWithLabel "A#"&A&".I#"&sI&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&"", "[Default]",CellText

                        Next
                End If

                Phase1RewLv = HS.ReviewStatusUsingPhaseID("S#"&SourceScen&".Y#"&IntYear&".P#"&StrPeriod&".E#"&StrEntity,1)
                Phase2RewLv = HS.ReviewStatusUsingPhaseID("S#"&SourceScen&".Y#"&IntYear&".P#"&StrPeriod&".E#"&StrEntity,2)
                Phase3RewLv = HS.ReviewStatusUsingPhaseID("S#"&SourceScen&".Y#"&IntYear&".P#"&StrPeriod&".E#"&StrEntity,3)

                CellText = "Data copied from S#"&SourceScen&".Y#"&IntYear&vbCr& _
                           "Copy started: "&DataCopyStartTime&" (EET)"&vbCr& _
                           "Copy ended: "&TimeStamp&" (EET)"&vbCr& _
                           SourceScen&" Phase1 was at: "&Phase1RewLv&vbCr& _
                           SourceScen&" Phase2 was at: "&Phase2RewLv&vbCr& _
                           SourceScen&" Phase3 was at: "&Phase3RewLv

                HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText

                If (Left(StrScenario, 9) = "FORECAST_" Or UCase(Left(StrScenario, 6)) = "BUDGET") And StrEntity = "[None]" Then
                    If UCase(Left(StrScenario, 6)) = "BUDGET" Then
                        sFCSTPeriod = "OCT"
                    Else
                        sFCSTPeriod = Mid(StrScenario, 10, 3)
                    End If
                    iFCSTPeriod = GetPeriodNumber(sFCSTPeriod) + 1
                    sFcstYear = StrCurrFcstYear

                    If iFCSTPeriod = 13 Then
                        sFcstYear = CStr(CInt(sFcstYear) - 1)
                    End If

                    sFCSTYearAndPeriod = sFcstYear & iFCSTPeriod
                    If iFCSTPeriod < 10 Then
                        sFCSTYearAndPeriod = sFcstYear & "0" & iFCSTPeriod
                    End If

                    HS.Exp "A#FCST_CurrFCSTYearAndPeriod.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = " & sFCSTYearAndPeriod
                End If
            End If

        Else
            CellText = "You have activated the copy by using wrong flag value."&vbCr& _
                       "Valid flag account valueas are:"&vbCr& _
                       "1 = to COPY data and"&vbCr& _
                       "9 = to CLEAR data"
            HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText
        End If
    Else
        Call CheckCopyFlagValue(GENERAL_ACTIVATION,ENTITY_SPECIFIC_ACTIVATION,CopyActive,ClearActive)
    End If

    If ClearActive = True Then
        Call CheckTranslatedCurrenciesToBeCleared(StrEntity,StrScenario,StrPeriod,IntYear,EPM_Maestro_TranslationLine)
        If IsEmpty(EPM_Maestro_TranslationLine) = False Then Call WriteToSpecifiedFileAndSpefiedPath(EPM_Maestro_TranslationLine,"D:\1_Cargotec_material\3_HFM_WriteToFile\","CLEAR_TRANSLATED_CURRENCIES_NOT_PART_OF_NORMAL_CLEAR_PROCESS.ssf")
    End If
End Sub

Sub CheckTranslatedCurrenciesToBeCleared(StrEntity,StrScenario,StrPeriod,IntYear,EPM_Maestro_TranslationLine)

    PCounter = 0 : P2Counter = 0
    EC = HS.Entity.DefCurrency(StrEntity)

    ParentsList = HS.Entity.List(StrEntity,"[Ancestors]")
    If IsArray(ParentsList) = True Then
        For each sParent in ParentsList
            If HS.Entity.IsDescendant("MACGREGOR",sParent) = True and PCounter = 0 Then
                Parent1 = sParent
                PCounter = PCounter + 1
            End If

            If HS.Entity.IsDescendant("MCG_COUNTRIES",sParent) = True and P2Counter = 0 Then
                Parent2 = sParent
                P2Counter = P2Counter + 1
            End If

            If P2Counter <> 0 and PCounter <> 0 Then Exit For
        Next

        PC1 = HS.Entity.DefCurrency(Parent1)
        PC2 = HS.Entity.DefCurrency(Parent2)
        ParentCurrencies = array(PC1,PC2)

        Redim CurrList(0)
        CurrList(0) = EC

        bCounter = 1
        For each Curr in ParentCurrencies
            If Curr <> "" Then
                If IsItemInList(Curr,CurrList) = False Then
                    Redim Preserve CurrList(bCounter)
                    CurrList(bCounter) = Curr
                    bCounter = bCounter + 1
                End If
            End If
        Next

        Counter = 0
        For each Curr in HS.Custom2.List("","[Currencies]")
            If IsItemInList(Curr,CurrList) = False Then
                dData = HS.GetCell("A#R95.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].V#"&Curr)
                If dData <> 0 Then
                    Redim Preserve CurrenciesToClear(Counter)
                    CurrenciesToClear(Counter) = Curr
                    Counter = Counter + 1
                End If
            End if
        Next

        If IsEmpty(CurrenciesToClear) = False Then
            Counter = 0
            StrCurr = ""
            For each CurrToClear in CurrenciesToClear
                If Counter = 0 Then
                    StrCurr = CurrToClear&" Total"
                    Counter = Counter + 1
                ElseIf Counter = 1 Then
                    StrCurr = StrCurr&"!"&CurrToClear&" Total!"
                    Counter = Counter + 1
                Else
                    StrCurr = StrCurr&CurrToClear&" Total!"
                    Counter = Counter + 1
                End If
            Next

            EPM_Maestro_TranslationLine = "Translate;"&StrScenario&";"&StrPeriod&";"&IntYear&";"&StrPeriod&";"&IntYear&";Only!"&StrEntity&";"&StrCurr&";!Check status;;;;;;;;;;;;"
        End If
    End If
End Sub

Sub CheckCopyFlagValue(GENERAL_ACTIVATION,ENTITY_SPECIFIC_ACTIVATION,CopyActive,ClearActive)

    GENERAL_ACTIVATION = HS.GetCell("E#COPY_SCENARIOS.V#EUR.A#COPY_SCENARIOS_FLAGS.I#[ICP None].C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None]")

    If CInt(GENERAL_ACTIVATION) <> 0 Then
          If CInt(GENERAL_ACTIVATION) = 1 or CInt(GENERAL_ACTIVATION) = 2 Then
           CopyActive = True
          ElseIf CInt(GENERAL_ACTIVATION) = 9 Then
           ClearActive = True
          End If
     Else
        ENTITY_SPECIFIC_ACTIVATION = HS.GetCell("A#COPY_SCENARIOS_FLAGS.I#[ICP None].C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None]")

        If CInt(ENTITY_SPECIFIC_ACTIVATION) <> 0 Then
          If CInt(ENTITY_SPECIFIC_ACTIVATION) = 1 or Int(ENTITY_SPECIFIC_ACTIVATION) = 2 Then
               CopyActive = True
          ElseIf CInt(ENTITY_SPECIFIC_ACTIVATION) = 9 Then
               ClearActive = True
          End If
        End If
     End If
End sub

Function CopyScenarioFlagON(StrEntity,StrScenario,bUseActualRules,StrPeriod)

    GENERAL_ACTIVATION = HS.GetCell("E#COPY_SCENARIOS.V#EUR.A#COPY_SCENARIOS_FLAGS.I#[ICP None].C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None]")
    ENTITY_SPECIFIC_ACTIVATION = HS.GetCell("A#COPY_SCENARIOS_FLAGS.I#[ICP None].C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None]")

    DO_COPY = False

    If GENERAL_ACTIVATION <> 0 Then
        ValidAndAcc = ValidFlag_FlagAcc("E#COPY_SCENARIOS.V#EUR.A{COPY_SCENARIOS_FLAGS.[Base]}.I#[ICP None].C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None]")
        ValidFlag = left(ValidAndAcc,InStr(ValidAndAcc, "-")-1)
        If ValidFlag = "True" Then
            DO_COPY = True
            SourceScen = mid(ValidAndAcc,InStr(ValidAndAcc,"CDS_")+4,len(ValidAndAcc)-9)
        Else
            CellText = "ERROR: Unable to conduct the general copy routine, multible source scenarios selected in the activation at E#COPY_SCENARIOS"
            HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText
        End If
    End If

    If GENERAL_ACTIVATION = 0 and ENTITY_SPECIFIC_ACTIVATION <> 0 Then
        ValidAndAcc = ValidFlag_FlagAcc("A{COPY_SCENARIOS_FLAGS.[Base]}.I#[ICP None].C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None]")
        ValidFlag = left(ValidAndAcc,InStr(ValidAndAcc, "-")-1)
        If ValidFlag = "True" Then
            DO_COPY = True
            SourceScen = mid(ValidAndAcc,InStr(ValidAndAcc,"CDS_")+4,len(ValidAndAcc)-9)
        Else
            CellText = "ERROR: Unable to conduct the general copy routine, multible source scenarios selected in the activation at E#"&StrEntity
            HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText
        End If
    End If

    If Ucase(SourceScen) = "ACTUAL" and bUseActualRules = False and StrScenario = "FORECAST" Then
        DO_COPY = False
        CellText = "Can not proceed with the copy from "&SourceScen&" to "&StrScenario&", "&StrPeriod&" has not been specified as an Actual data period in "&StrScenario
        HS.SetCellTextWithLabel "A#COPY_SCENARIO_INFO.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", "[Default]", CellText
    End If

    CopyScenarioFlagON = DO_COPY&"-"&SourceScen
End Function

Function ValidFlag_FlagAcc(StrPOV)

    Set DataUnit = HS.OpenDataUnit(StrPOV)
    NumItems = DataUnit.GetNumItems
     If NumItems > 1 Then
        RowCounter = 0
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            If dData <> 0 then
                RowCounter = RowCounter + 1
                RightAcc = StrAccount
            End If
        Next
        If RowCounter > 1 Then
            ValidInput = False
            StrAccount =  ""
        Else
            ValidInput = True
            StrAccount = RightAcc
        End If
    Else
        ValidInput = True
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        Next
    End If

    ValidFlag_FlagAcc = ValidInput&"-"&StrAccount
End Function

Sub CalcConstantFXRatedifferenceAccs(StrEntity,StrScenario,Str1stFcstPeriod)

    If Instr(StrScenario,"FORECAST") > 0 Then
        PrevFcst = GetPreviousFcst(Str1stFcstPeriod)
        ActiveFcstVersion = GetCurFcstStoredCounterparty(Str1stFcstPeriod)

        If StrScenario = "FORECAST" or StrScenario = PrevFcst or StrScenario = ActiveFcstVersion Then
            C4_ConstantFX_Mbrs = Array("CONSTANT_FX_RATE_FXDIFF","CONSTANT_FX_RATE_FXDIFF2")

            For each sC4 in C4_ConstantFX_Mbrs

                ReadFlagsFromTxtFile = HS.GetCell("E#ADMIN_ENTITY.Y#2039.P#Dec.S#FORECAST.V#EUR.A#ReadFlagsFromTxtFile.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
                If CInt(ReadFlagsFromTxtFile) = 1 Then
                    Call ReadTextFile("D:\1_Cargotec_material\3_HFM_WriteToFile\FlagAccountInformation (DO NOT REMOVE).txt",FullTxtStr)
                    RatePOV = Ucase(GetParamFromTxt(sC4&"_RatePOV",FullTxtStr))
                Else
                    RatePOV = HS.GetCellText("E#ADMIN_ENTITY.Y#2039.P#Dec.V#EUR.S#FORECAST.A#"&sC4&"_RatePOV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                End If

                If RatePOV <> "" Then
                    C4Activated = True
                Else
                    C4Activated = False
                End If

                If C4Activated = True Then
                    HS.Exp "A#MOBI_FX_OPE.C4#"&sC4&" = A#MOBI_FX_OPE.C4#[None] * -1"
                    HS.Exp "A#MOBE_FX_OPE.C4#"&sC4&" = A#MOBE_FX_OPE.C4#[None] * -1"
                    HS.Exp "A#MOBI_AVGEND.C4#"&sC4&" = A#MOBI_AVGEND.C4#[None] * -1"
                    HS.Exp "A#MOBE_AVGEND.C4#"&sC4&" = A#MOBE_AVGEND.C4#[None] * -1"
                End If
            Next
        End If
    End If
End Sub

Sub Copy_ACQandDIS_RatesForward(IntYear,StrPeriod)

    For each acqdis in HS.Account.List("ACQ_DISPBUSIN_RATES","[Base]")

        C2 = Mid(acqdis,6,80)
        ACQDIS_year = GetUD(C2, "Custom2", "ACQDIVY")

        If Int(IntYear) > Int(ACQDIS_year) and StrPeriod = "Jan" Then
            HS.Exp "A#"&acqdis&" = A#"&acqdis&".S#ACTUAL.Y#Prior.P#Dec"
        End If
    Next
End Sub

Sub Copy_ACQandDIS_Balances(StrEntity, IntYear, StrPeriod, StrPrevScenBEGBAL,bUseActualRules,EstimationScenario,IntCurPeriodNum)

    If CInt(IntYear) > 2018 Then

        If bUseActualRules = False Or EstimationScenario = False Then
            Hs.Clear "A#L166.C2#[None].C3#INP.C4#[None]"

            iStopCode = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#ACQTOT")
            If iStopCode = 0 Then
                Hs.Exp "A#L166.C2#[None].C3#INP.C4#[None] = A#L166.C2#ACQ.C3#CUSTOM3_TOP.C4#[None] - A#L166.C2#DISPBUSIN.C3#CUSTOM3_TOP.C4#[None] + A#L166.C2#[None].C3#CUSTOM3_TOP.C4#[None]." & StrPrevScenBEGBAL
            End If
        End If
    End If

    If CInt(IntYear) >= 2018 Then
        iValue = HS.GetCell("E#[None].A#Activate_ACQDIVCopy.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        If HS.IsZero(iValue) = TRUE Then
            iValue = HS.GetCell("A#Activate_ACQDIVCopy.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        End If

        If iValue = 1 Then

            If CInt(IntYear) > 2024 Or (CInt(IntYear) = 2024 And IntCurPeriodNum > 7) Then
                Set DataUnit = HS.OpenDataUnit("A{BALANCE_SHEET.[Base]}.I#[ICP Top].C2{NONE_ACQ_DIS.[Base]}.C3#CUSTOM3_TOP.C4#[None]")
                NumItems = DataUnit.GetNumItems
                For i = 0 To NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                    sDestC2 = "[None]"
                    If StrAccount = "L165" Then
                        sDestC2 = "EQ_CHNG"
                    End If

                    If StrAccount = "L480" Then
                        sDestAcc = "CL165"
                        sDestC2 = "EQ_OPE"
                    Else
                        sDestAcc = "C" & StrAccount
                    End If
                    If HS.IsZero(dData) = FALSE And StrC2 <> "[None]" Then
                        If HS.Account.IsBase("HELP_CF", sDestAcc) = TRUE Then

                            sC1Top = HS.Account.C1Top(sDestAcc)
                            If HS.Custom1.IsBase(sC1Top, StrC1) = TRUE Then
                                HS.Clear "A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1 & ".C2#" & sDestC2 & ".C3#INP.C4#[None]"
                            End If
                        End If
                    End If
                Next
            End If

            Set DataUnit = HS.OpenDataUnit("A{BALANCE_SHEET.[Base]}.I#[ICP Top].C2{NONE_ACQ_DIS.[Base]}.C3#CUSTOM3_TOP.C4#[None]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                sDestC2 = "[None]"
                If StrAccount = "L165" Then
                    sDestC2 = "EQ_CHNG"
                End If

                If StrAccount = "L480" And (CInt(IntYear) >= 2022 Or (CInt(IntYear) = 2021 And IntCurPeriodNum > 3)) Then
                    sDestAcc = "CL165"
                    sDestC2 = "EQ_OPE"
                Else
                    sDestAcc = "C" & StrAccount
                End If
                If HS.IsZero(dData) = FALSE And StrC2 <> "[None]" Then
                    If HS.Account.IsBase("HELP_CF", sDestAcc) = TRUE Then

                        sC1Top = HS.Account.C1Top(sDestAcc)
                        If HS.Custom1.IsBase(sC1Top, StrC1) = TRUE Then

                            If HS.Custom2.IsBase("ACQ",StrC2) = TRUE Then

                                If CInt(IntYear) < 2024 Then
                                    HS.Exp "A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1 & ".C2#" & sDestC2 & ".C3#INP.C4#[None] = " & dData
                                Else
                                    Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1 & ".C2#" & sDestC2 & ".C3#INP.C4#[None]", dData, True)
                                End If
                            ElseIf HS.Custom2.IsBase("DISPBUSIN",StrC2) = TRUE Then

                                If CInt(IntYear) < 2024 Then
                                    HS.Exp "A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1 & ".C2#" & sDestC2 & ".C3#INP.C4#[None] = " & -dData
                                Else
                                    Call HS.SetDataWithPOV("A#" & sDestAcc & ".I#[ICP None].C1#" & StrC1 & ".C2#" & sDestC2 & ".C3#INP.C4#[None]", -dData, True)
                                End If
                            End If
                        End If
                    End If
                End If
            Next
        ElseIf iValue = 2 Then

            ACQ_year = GetUD(StrEntity, "Entity", "ACQ")
            If IsNumeric(ACQ_year) Then
                If StrEntity <> "[None]" And (CInt(IntYear) = CInt(ACQ_year) Or CInt(IntYear) = CInt(ACQ_year)+1) Then
                    HS.Exp "A#Activate_ACQDIVCopy.I#[ICP None].W#YTD.C1#[None].C2#[None].C3#INP.C4#[None] = 1"
                End If
            End If

            If UCASE(StrPeriod) <> "JAN" Then

                Set DataUnit = HS.OpenDataUnit("A{BALANCE_SHEET.[Base]}.C2{NONE_ACQ_DIS.[Base]}.C4#[None].P#CUR-1")
                NumItems = DataUnit.GetNumItems
                For i = 0 To NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                    If HS.IsZero(dData) = FALSE And StrC2 <> "[None]" Then
                        HS.Exp "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#[None] = " & dData
                    End If
                Next

                For Each sCustom3 In Array("ACQ_DISP", "CUSTOM3_TOP")
                    Set MyCellTextUnit = HS.OpenCellTextUnit("A{BALANCE_SHEET.[Base]}.C2{NONE_ACQ_DIS.[Base]}.C3#" & sCustom3 & ".P#CUR-1", "[Default]", "Account", "Ascending")
                    NumItems= MyCellTextUnit.GetNumItems
                    For i = 0 to NumItems - 1
                        A = MyCellTextUnit.Item(i).Account
                        sI = MyCellTextUnit.Item(i).ICP
                        sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                        sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                        sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                        sC4 = MyCellTextUnit.Item(i).Custom("Custom4")

                        If sCustom3 = "ACQ_DISP" Then

                            CellText = MyCellTextUnit.Item(i).CellText
                        Else
                            iPeriodNumber = GetPeriodNumber(StrPeriod)
                            sPrevPriod = GetPeriodLabel(iPeriodNumber - 1)

                            sPrevCellText = HS.GetCellTextWithLabel("A#"& A & ".C1#CUSTOM1_TOP.C2#" & sC2 & ".C3#ACQ_DISP.C4#[None].I#[ICP Top].P#PRIOR","[Default]")
                            CellText = ""
                            If sPrevCellText <> "" Then
                                CellText = sPrevCellText & ", "
                            End If
                            CellText = CellText & Ucase(Left(sPrevPriod,1)) & LCase(Right(sPrevPriod,2)) & ": " & MyCellTextUnit.Item(i).CellText
                        End If
                        HS.SetCellTextWithLabel "A#" & A & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&sC2&".C3#ACQ_DISP.C4#[None]", "[Default]", CellText
                    Next
                Next
            End If
        End If

        iValue = HS.GetCell("E#[None].A#Activate_ACQDIVNoteCopy.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        If HS.IsZero(iValue) = TRUE Then
            iValue = HS.GetCell("A#Activate_ACQDIVNoteCopy.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        End If
        If iValue = 1 Then

            For Each sNote In Array("NOTE31", "NOTE32")
                Set DataUnit = HS.OpenDataUnit("A{" & sNote & ".[Base]}.C2{NONE_ACQ_DIS.[Base]}.C4#[None].P#CUR-1")
                NumItems = DataUnit.GetNumItems
                For i = 0 To NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                    If HS.IsZero(dData) = FALSE And StrC2 <> "[None]" And StrC2 <> "DISPBUSINEXCHRATE" And StrC2 <> "ACQEXCHRATE" Then
                        ACQDIS_year = GetUD(StrC2, "Custom2", "ACQDIVY")

                        If UCASE(StrPeriod) <> "JAN" Then

                            If HS.Account.IsCalculated(StrAccount) = False And (CInt(IntYear) = CInt(ACQDIS_year) Or CInt(IntYear) = CInt(ACQDIS_year)+1) Then
                                HS.Exp "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#[None] = " & dData
                            End If

                        ElseIf StrAccount = "ACQ_1700" Or StrAccount = "DIV_1700" Or StrAccount = "DIV_1800" Then
                            If CInt(IntYear) = CInt(ACQDIS_year)+1 Then
                                HS.Exp "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#[None] = " & dData
                            End If
                        End If
                    End If
                Next
            Next
        End If
    End If
End Sub

Sub Calculate_secondYear_ACQ(IntYear)

    If CInt(IntYear) >= 2018 Then

        ReDim aC2MemberToCalc(500)
        iCounter = 0
        bRunCalc = False

        For Each sAccount In Array("A495", "L495")
            For Each sYear In Array("CUR", "CUR-1.P#Dec")
                Set DataUnit = HS.OpenDataUnit("A#" & sAccount & ".C2{ACQ_DISPBUSIN_TOT.[Base]}.C3#ACQ_DISP.C4#[None].Y#" & sYear)
                NumItems = DataUnit.GetNumItems
                For i = 0 To NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                    If IsItemInList(StrC2,aC2MemberToCalc)    = False Then
                        aC2MemberToCalc(iCounter) = StrC2
                        iCounter = iCounter + 1
                        bRunCalc = True
                    End If
                Next
            Next
        Next
        ReDim Preserve aC2MemberToCalc(iCounter-1)

        If bRunCalc = True Then
            aAccounts = Hs.Account.List("BALANCE_SHEET","[Base]")

            aAccounts = RemoveMembersFromArray(aAccounts,Array("A495vsL495"))

            For each sCustom2 in aC2MemberToCalc
                ACQDIS_year = GetUD(sCustom2, "Custom2", "ACQDIVY")
                If IsNumeric(ACQDIS_year) And ACQDIS_year <> "" Then
                    If Hs.Custom2.IsDescendant("ACQ",sCustom2) Then
                        aAccounts = CombineLists(aAccounts,Hs.Account.List("NOTE31","[Base]"))
                        aAccounts = RemoveMembersFromArray(aAccounts,Hs.Account.List("NOTE32","[Base]"))
                        aAccounts = RemoveMembersFromArray(aAccounts,Array("ACQ_1700"))
                        aAccList = Array("ACQ_1700")
                    Else
                        aAccounts = CombineLists(aAccounts,Hs.Account.List("NOTE32","[Base]"))
                        aAccounts = RemoveMembersFromArray(aAccounts,Hs.Account.List("NOTE31","[Base]"))
                        aAccounts = RemoveMembersFromArray(aAccounts,Array("DIV_1700","DIV_1800"))
                        aAccList = Array("DIV_1700","DIV_1800")
                    End If

                    If CInt(IntYear) = CInt(ACQDIS_year) Or CInt(IntYear) = CInt(ACQDIS_year) + 1 Then

                        For Each sAcc In aAccList
                            Hs.Exp "A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_INP_2Y = A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_INP"
                            Hs.Exp "A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_FV_2Y = A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_FV"
                            Hs.Exp "A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_CAS_2Y = A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_CAS"
                            Hs.Exp "A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_INP_2Y = A#" & sAcc & ".C2#" & sCustom2 & ".C3#ACQ_DISP_ACQ"

                        Next

                        For Each sAcc In aAccounts
                            For Each sCustom3 In HS.Custom3.List("ACQ_DISP_2Y", "[Base]")
                                sSrcCustom3 = Left(sCustom3, Len(sCustom3) - 3)
                                If CInt(IntYear) = CInt(ACQDIS_year) Then
                                    Hs.Exp "A#" & sAcc & ".C2#" & sCustom2 & ".C3#" & sCustom3 & " = A#" & sAcc & ".C2#" & sCustom2 & ".C3#" & sSrcCustom3
                                ElseIf CInt(IntYear) = CInt(ACQDIS_year) + 1 Then
                                    Hs.Exp "A#" & sAcc & ".C2#" & sCustom2 & ".C3#" & sCustom3 & " = A#" & sAcc & ".C2#" & sCustom2 & ".C3#" & sSrcCustom3 & " + A#" & sAcc & ".C2#" & sCustom2 & ".C3#" & sSrcCustom3 & ".Y#Prior.P#Dec"
                                End If
                            Next
                        Next
                    End If
                End If
            Next
        End If
    End If

End Sub

Sub WritePeriodNumber(IntCurPeriodNum,StrScenario)

    If StrScenario = "FORECAST" Then
        HS.Clear "A#PERIOD_NUMBER"
        HS.Exp "A#PERIOD_NUMBER = "&IntCurPeriodNum
    End If
End Sub

Sub SpecifyActualPeriodWithData(StrPeriod,IntYear)

    RateUSD = HS.GetCellRealData("A#AVG_RATES.S#ACTUAL.Y#"&IntYear&".P#"&StrPeriod&".C1#EUR.C2#USD.C3#[None].C4#[None].I#[ICP None].E#[None].V#[None]",USD_IsReal)
    RateSEK = HS.GetCellRealData("A#AVG_RATES.S#ACTUAL.Y#"&IntYear&".P#"&StrPeriod&".C1#EUR.C2#SEK.C3#[None].C4#[None].I#[ICP None].E#[None].V#[None]",SEK_IsReal)

    If USD_IsReal and SEK_IsReal then
        sAccount = "ACT_PERIODWITHDATA"
        HS.Exp "A#" & sAccount & ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = 1"
    End If
End Sub

Sub OpeningRateCalc(StrScenario,StrPeriod,IntYear)

    If StrScenario = "BUDGET" or StrScenario = "FORECAST" or StrScenario = "BUDGET_FORECAST" or Left(StrScenario,8) = "FORECAST" Then

    ElseIf StrScenario = "ACTUALFCST_PREVYRATE" Then
        HS.Clear "A#PRE_RATES"
        HS.Exp "A#PRE_RATES = A#END_RATES.S#ACTUAL.Y#Cur-2.P#Dec"
    Else

        If CInt(IntYear) >= 2015 Then
            HS.Clear "A#PRE_RATES"
            HS.Exp "A#PRE_RATES = A#END_RATES.S#ACTUAL.Y#Prior.P#Dec"
        End If
    End If
End Sub

Sub CalculateRatesForScenarios(StrScenario, StrPeriod)

    If StrScenario = "BUDGET_ACTRATE" Then

        HS.Clear "A#END_RATES"
        HS.Clear "A#AVG_RATES"
        HS.Exp "A#END_RATES = A#END_RATES.S#ACTUAL"
        HS.Exp "A#AVG_RATES = A#AVG_RATES.S#ACTUAL"
    ElseIf StrScenario = "ACTUALFCST_PREVYRATE" Then

        HS.Clear "A#END_RATES"
        HS.Clear "A#AVG_RATES"
        HS.Exp "A#END_RATES = A#END_RATES.S#ACTUAL.Y#Prior"
        HS.Exp "A#AVG_RATES = A#AVG_RATES.S#ACTUAL.Y#Prior"
    End If
End Sub

Sub Note3_CHGIS_Calc(sEntity)

    iActive = 0

    If HS.Entity.IsBase("MCG_ME", sEntity) = TRUE Then
        iActive = 1
    ElseIf HS.Entity.IsBase("RAPP_USA_TAX", sEntity) = TRUE Then

        iActive = 1
    End If

    If HS.IsZero(iActive) = TRUE Then
        sSrcPOV = ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]"
        aSrcAccounts = CombineLists(HS.Account.List("N3B_4100A", "[Base]"), Array("N3B_5015L", "N3B_5020L", "N3B_5025L", "N3B_5030L", "N3B_5033L", "N3B_5065L", "N3B_5070L", "N3B_5075L", "N3B_5080L"))

        For Each sAccount In aSrcAccounts
            sDestAccount = "N3C_" & Right(sAccount, 5)
            HS.Clear "A#" & sDestAccount & ".C1#[None].C2#TAX_CHGIS.C3#INP.C4#[None]"
            HS.Exp "A#" & sDestAccount & ".C1#[None].C2#TAX_CHGIS.C3#INP.C4#[None] = A#" & sAccount & sSrcPOV & " * A#LTR_CURTAX" & sSrcPOV & " / 100"
        Next

        HS.Clear "A#N3C_5060L.C1#[None].C2#TAX_CHGIS.C3#INP.C4#[None]"
        HS.Exp "A#N3C_5060L.C1#[None].C2#TAX_CHGIS.C3#INP.C4#[None] = A#N3B_5090L.C1#[None].C2#[None].C3#INP.C4#[None] * A#LTR_CURTAX.C1#[None].C2#[None].C3#INP.C4#[None] / 100"
    End If
End Sub

Sub NoteCalcs(StrScenario, StrPrevScenBEGBAL, StrPrevScenYEnd, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase, TaxGroupEntity, SuperGLCalcActive, bDoTaxNotesCalcs, bIsTransCurr,StrApp)
    If StrValue = "<Entity Currency>" Then
        Call MonthlyNotesBaseCons(StrPrevScenYEnd,IntCurPeriodNum,IntYear,bIsBase)
    End If

    If IntCurPeriodNum = 3 Or IntCurPeriodNum = 6 Or IntCurPeriodNum = 9 Or IntCurPeriodNum = 12 Then
        If bIsBase = True And StrValue = "<Entity Currency>" Then
            Call NotesBase (StrPrevScenBEGBAL,IntCurPeriodNum, IntYear,GL_Ent, LegalEntForStrEntity, StrEntity,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs)
        End If

        If StrValue = "<Entity Currency>" Or StrValue = "[Elimination]" Or bIsTransCurr = True Then
            Call NotesAll(StrPrevScenBEGBAL, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs)
        End If

        If StrValue = "<Entity Currency>" And (CInt(IntYear) = 2022 Or CInt(IntYear) = 2039) Then
            Call TaxNotesNT1_NT4_Migration(StrPrevScenBEGBAL, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,StrApp)
        End If

    End If
End Sub

Sub TaxNotesNT1_NT4(StrPrevScenBEGBAL, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,StrApp)

    sSrcDimC1C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcDimC1C2C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sDestDimC1C3C4None = ".I#[ICP None].C1#[None].C3#INP.C4#[None]"
    sDestDimC1C2C3C4None = ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"

    dLTR_DEFTAX = HS.GetCell("A#LTR_DEFTAX" & sSrcDimC1C2C3C4)
    dLTR_CURTAX = HS.GetCell("A#LTR_CURTAX" & sSrcDimC1C2C3C4)
    dLTR_DEFTAXPrevY = HS.GetCellRealData("A#LTR_DEFTAX" & sSrcDimC1C2C3C4 & "." & StrPrevScenBEGBAL,bLTR_DEFTAXPrevY_IsReal)

    If bDoTaxNotesCalcs = True And CInt(IntYear) > 2022 And GL_Ent = True Then

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            sTaxGroupOrLegalEntity = TaxGroupEntity
        Else
            sTaxGroupOrLegalEntity = LegalEntForStrEntity
        End If

        If IntCurPeriodNum > 3 Then
            If IntYear > 2023 or (IntYear = 2023 and IntCurPeriodNum > 9) Then
                NT1_TrueUp = HS.GetCell("A#NT1_TrueUp.I#[ICP Top].C1#[None].C2#TAX_PREV.C3#INP.C4#CUSTOM4_TOP")
                If NT1_TrueUp <> 1 then

                    C2List = array("ND_PREV","TAX_PREV","VA_PREV")
                    For each C2ToCopy in C2List

                        Set DataUnit=HS.OpenDataUnit("A{NT1_TempDiff.[Base]}.P#Cur-3.C2#" & C2ToCopy)
                        NumItems = DataUnit.GetNumItems

                        If NumItems > 0 then
                            Hs.Clear "C2#" & C2ToCopy
                        End If

                        For i = 0 To NumItems - 1
                            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                            If dData <> 0 Then
                                HS.Exp "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4 & " = " & dData
                            End If
                        Next

                    Next

                End If
            End If
        End If

        For Each Acc In Hs.Account.List("NT1_TempDiff","[Base]")

            If Acc <> "NT1_97" And Acc <> "NT1_98" And Acc <> "NT1_99" Then
                Hs.Exp "A#" & Acc & ".C2#IFRS_OB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL
                Hs.Exp "A#" & Acc & ".C2#ND_OB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL
            End If
            If Acc <> "NT1_81" And Acc <> "NT1_82" Then
                Hs.Exp "A#" & Acc & ".C2#TAX_OB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#TAX_CB" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL
            End If
            Hs.Exp "A#" & Acc & ".C2#VA_OB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL
            Hs.Exp "A#" & Acc & ".C2#DT_OB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#DT_CB" & sSrcDimC1C3C4 & "." & StrPrevScenBEGBAL

            If Acc <> "NT1_97" And Acc <> "NT1_98" And Acc <> "NT1_99" Then
                dDataToSet =  SumLegalBasesToGLEnt("A#" & Acc & "_BS.C2#CUSTOM2_TOP" & sSrcDimC1C3C4, StrEntity, sTaxGroupOrLegalEntity)
                If dDataToSet <> 0 Then
                    HS.Exp "A#" & Acc & ".C2#IFRS_CB" & sDestDimC1C3C4None & " = " & dDataToSet
                End If
            End If

            Hs.Exp "A#" & Acc & ".C2#TempDiff_CHNG" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#TempDiff_CB" & sSrcDimC1C3C4 & " - A#" & Acc & ".C2#TempDiff_OB" & sSrcDimC1C3C4
            Hs.Exp "A#" & Acc & ".C2#VA_CHNG" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & Acc & ".C2#VA_OB" & sSrcDimC1C3C4

            dOverrideValue = HS.GetCell("A#" & Acc & sSrcDimC1C3C4 & ".C2#DT_CBME")
            If dOverrideValue <> 0 Then
                Hs.Exp "A#" & Acc & ".C2#DT_CB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#DT_CBME" & sSrcDimC1C3C4
            Else
                Hs.Exp "A#" & Acc & ".C2#DT_CB" & sDestDimC1C3C4None & " = -1 * A#" & Acc & ".C2#TempDiff_CB" & sSrcDimC1C3C4 & " * " & dLTR_DEFTAX / 100
            End If
            Hs.Exp "A#" & Acc & ".C2#DT_CHNG" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#DT_CB" & sSrcDimC1C3C4 & " - A#" & Acc & ".C2#DT_OB" & sSrcDimC1C3C4

            If Acc <> "NT1_99" And Acc <> "NT1_81" And Acc <> "NT1_82" Then
                sTargetAcc = "NT2_" & Right(Acc,2)
                Hs.Exp "A#" & sTargetAcc & ".C2#[None]" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#TempDiff_CHNG" & sSrcDimC1C3C4 & " - A#" & Acc & ".C2#VA_CHNG" & sSrcDimC1C3C4 &_
                                                                                "+ A#" & Acc & ".C2#TAX_PREV" & sSrcDimC1C3C4 & " + A#" & Acc & ".C2#ND_PREV" & sSrcDimC1C3C4
            End If
        Next

        Hs.Exp "A#NT1_110.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_TempDiff.C2#DT_OB" & sSrcDimC1C3C4

        dOverrideValue = HS.GetCell("A#NT1_820" & sSrcDimC1C3C4 & ".C2#DT_CBME")
        If dOverrideValue <> 0 Then
            Hs.Exp "A#NT1_820.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_820.C2#DT_CBME" & sSrcDimC1C3C4
        Else

            If IntYear < 2024 Then
                Hs.Exp "A#NT1_820.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#VA_PREV" & sSrcDimC1C3C4 & " - A#NT1_80.C2#VA_PREV" & sSrcDimC1C3C4 & " - A#NT1_TempDiff.C2#TAX_PREV" & sSrcDimC1C3C4 &_
                                                                    " + A#NT1_80.C2#TAX_PREV" & sSrcDimC1C3C4 & " - A#NT1_TempDiff.C2#ND_PREV" & sSrcDimC1C3C4 & " + A#NT1_80.C2#ND_PREV" & sSrcDimC1C3C4 & ") * " & dLTR_DEFTAX / 100
            Else
                If dLTR_DEFTAX = dLTR_CURTAX Then
                    Hs.Exp "A#NT1_820.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#VA_PREV" & sSrcDimC1C3C4 & " - A#NT1_80.C2#VA_PREV" & sSrcDimC1C3C4 & " - A#NT1_TempDiff.C2#TAX_PREV" & sSrcDimC1C3C4 &_
                                                                        " + A#NT1_80.C2#TAX_PREV" & sSrcDimC1C3C4 & " - A#NT1_TempDiff.C2#ND_PREV" & sSrcDimC1C3C4 & " + A#NT1_80.C2#ND_PREV" & sSrcDimC1C3C4 & ") * " & dLTR_DEFTAX / 100
                Else
                    Hs.Exp "A#NT1_820.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#VA_PREV" & sSrcDimC1C3C4 & " - A#NT1_80.C2#VA_PREV" & sSrcDimC1C3C4 & " - A#NT1_TempDiff.C2#TAX_PREV" & sSrcDimC1C3C4 &_
                                                                        " + A#NT1_80.C2#TAX_PREV" & sSrcDimC1C3C4 & " - A#NT1_TempDiff.C2#ND_PREV" & sSrcDimC1C3C4 & " + A#NT1_80.C2#ND_PREV" & sSrcDimC1C3C4 & ") * " & dLTR_DEFTAXPrevY / 100
                End If
            End If
        End If

        dOverrideValue = HS.GetCell("A#NT1_830" & sSrcDimC1C3C4 & ".C2#DT_CBME")
        If dOverrideValue <> 0 Then
            Hs.Exp "A#NT1_830.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_830.C2#DT_CBME" & sSrcDimC1C3C4
        Else

            If bLTR_DEFTAXPrevY_IsReal = True Then

                If IntYear < 2024 Then
                    If dLTR_DEFTAX = dLTR_CURTAX Then
                        Hs.Exp "A#NT1_830.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#TempDiff_OB" & sSrcDimC1C3C4 & " - A#NT1_80.C2#TempDiff_OB" & sSrcDimC1C3C4 & ") * " & (dLTR_DEFTAX - dLTR_DEFTAXPrevY) / 100
                    Else
                        Hs.Exp "A#NT1_830.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#TempDiff_CB" & sSrcDimC1C3C4 & " - A#NT1_80.C2#TempDiff_CB" & sSrcDimC1C3C4 & ") * " & (dLTR_DEFTAX - dLTR_DEFTAXPrevY) / 100
                    End If
                Else
                    If dLTR_DEFTAX = dLTR_CURTAX Then

                        Hs.Exp "A#NT1_830.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#TempDiff_OB" & sSrcDimC1C3C4 & " - A#NT1_80.C2#TempDiff_OB" & sSrcDimC1C3C4 & ") * " & (dLTR_DEFTAX - dLTR_DEFTAXPrevY) / 100
                    Else

                        Hs.Exp "A#NT1_830.C2#DT_CHNG" & sDestDimC1C3C4None & " = -1 * (A#NT1_TempDiff.C2#TempDiff_CB" & sSrcDimC1C3C4 & " - A#NT1_80.C2#TempDiff_CB" & sSrcDimC1C3C4 & ") * " & (dLTR_DEFTAX - dLTR_CURTAX) / 100
                    End If
                End If

            Else
                Hs.Exp "A#NT1_830.C2#DT_CHNG" & sDestDimC1C3None & " = 0"
            End If
        End If

        Hs.Exp "A#NT1_305.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#L174.C2#DISPBUSINTOT" & sSrcDimC1C3C4 & " + A#L177.C2#DISPBUSINTOT" & sSrcDimC1C3C4
        Hs.Exp "A#NT1_300.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_80.C2#DT_CHNG" & sSrcDimC1C3C4

        If StrValue = "<Entity Currency>" Then
            dDataACQ = SumLegalBasesToGLEnt("A#A195.C2#ACQTOT" & sSrcDimC1C3C4, StrEntity, sTaxGroupOrLegalEntity) - SumLegalBasesToGLEnt("A#L295.C2#ACQTOT" & sSrcDimC1C3C4, StrEntity, sTaxGroupOrLegalEntity)
            If dDataACQ <> 0 Then

                Hs.Exp "A#NT1_410.C2#DT_CHNG" & sDestDimC1C3C4None & " = " & dDataACQ
            End If
            dDataDISP = SumLegalBasesToGLEnt("A#L295.C2#DISPBUSINTOT" & sSrcDimC1C3C4, StrEntity, sTaxGroupOrLegalEntity) - SumLegalBasesToGLEnt("A#A195.C2#DISPBUSINTOT" & sSrcDimC1C3C4, StrEntity, sTaxGroupOrLegalEntity)
            If dDataDISP <> 0 Then
                Hs.Exp "A#NT1_415.C2#DT_CHNG" & sDestDimC1C3C4None & " = " & dDataDISP
            End If
        End If

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            sSearchEntity = TaxGroupEntity
        Else
            sSearchEntity = StrEntity
        End If

        If dDataACQ <> 0 And bIsBase = True And StrValue = "<Entity Currency>" Then

            c = 0
            Set DataUnit = HS.OpenDataUnit("E#" & sSearchEntity & ".A#K119.C1#CUSTOM1_TOP.C2{ACQ.[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            If NumItems <> 0 Then
                For i = 0 to NumItems - 1
                    Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                    If dData <> 0 And Hs.Custom2.IsBase("ACQ_HIST",dCustom2) = False Then
                        If c = 0 Then
                            dACQDISrate = HS.GetRate("V#EUR.A#RATE_" & dCustom2)
                            If dACQDISrate <> 0 Then
                                Hs.Exp "A#NT1_ACQRATE" & sDestDimC1C2C3C4 & " = " & dACQDISrate
                                c = c + 1
                            End If
                        End If
                    End If
                Next
            End If

            If c = 0 Then
                dEndRate = HS.GetRate("V#EUR.A#END_RATES")
                Hs.Exp "A#NT1_ACQRATE" & sDestDimC1C2C3C4 & " = " & dEndRate

            End If
        End If

        If dDataDISP <> 0 And bIsBase = True And StrValue = "<Entity Currency>" Then

            c = 0
            Set DataUnit = HS.OpenDataUnit("E#" & sSearchEntity & ".A#K119.C1#CUSTOM1_TOP.C2{DISPBUSIN.[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            If NumItems <> 0 Then
                For i = 0 to NumItems - 1
                    Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                    If dData <> 0 Then
                        If c = 0 Then
                            dACQDISrate = HS.GetRate("V#EUR.A#RATE_" & dCustom2)
                            If dACQDISrate <> 0 Then
                                Hs.Exp "A#NT1_DISPRATE" & sDestDimC1C2C3C4 & " = " & dACQDISrate
                                c = c + 1
                            End If
                        End If
                    End If
                Next
            End If

            If c = 0 Then
                dEndRate = HS.GetRate("V#EUR.A#END_RATES")
                Hs.Exp "A#NT1_DISPRATE" & sDestDimC1C2C3C4 & " = " & dEndRate

            End If

        End If

        Hs.Exp "A#NT1_420.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_420.C2#DT_CBME" & sSrcDimC1C3C4
        Hs.Exp "A#NT1_440.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_440.C2#DT_CBME" & sSrcDimC1C3C4
        Hs.Exp "A#NT1_450.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_450.C2#DT_CBME" & sSrcDimC1C3C4
        Hs.Exp "A#NT1_510.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_510.C2#DT_CBME" & sSrcDimC1C3C4

        Hs.Exp "A#NT1_810.C2#DT_CHNG" & sDestDimC1C3C4None & " = A#NT1_TempDiff.C2#DT_CHNG" & sSrcDimC1C3C4 & _
                                                            " -(A#NT1_820.C2#DT_CHNG" & sSrcDimC1C3C4 & _
                                                            " +A#NT1_830.C2#DT_CHNG" & sSrcDimC1C3C4 & _
                                                            " +A#NT1_310.C2#DT_CHNG" & sSrcDimC1C3C4 & _
                                                            " +A#NT1_400.C2#DT_CHNG" & sSrcDimC1C3C4 & _
                                                            " +A#NT1_500.C2#DT_CHNG" & sSrcDimC1C3C4 & ")"

        HS.Exp "A#NT2_R90" & sDestDimC1C2C3C4None & " = " & SumLegalBasesToGLEnt("A#R90" & sSrcDimC1C2C3C4, StrEntity, sTaxGroupOrLegalEntity)

        dOverrideValue = HS.GetCell("A#NT2_501" & sSrcDimC1C2C3C4)
        If dOverrideValue = 0 And dLTR_DEFTAX <> 0 Then

            If IntYear > 2024 or (IntYear = 2024 and IntCurPeriodNum > 8) Then
                dNT1_420 = HS.GetCell("A#NT1_420.C2#DT_CHNG" & sSrcDimC1C3C4)
                If dNT1_420 = 0 Then
                    Hs.Exp "A#NT2_500" & sDestDimC1C2C3C4None & " = (A#NT1_400.C2#DT_CHNG" & sSrcDimC1C3C4 & " + A#NT1_305.C2#DT_CHNG" & sSrcDimC1C3C4 & ") / " & dLTR_DEFTAX & " * 100"
                Else
                    Hs.Exp "A#NT2_500" & sDestDimC1C2C3C4None & " = (A#NT1_400.C2#DT_CHNG" & sSrcDimC1C3C4 & " + A#NT1_305.C2#DT_CHNG" & sSrcDimC1C3C4 & ") / " & dLTR_DEFTAX & " * 100 - A#NT2_960" & sSrcDimC1C2C3C4
                End If
            Else
                Hs.Exp "A#NT2_500" & sDestDimC1C2C3C4None & " = A#NT1_400.C2#DT_CHNG" & sSrcDimC1C3C4 & " / " & dLTR_DEFTAX & " * 100"
            End If
        End If

        Hs.Exp "A#NT2_410" & sDestDimC1C2C3C4None & " = A#NT2_R90" & sSrcDimC1C2C3C4 & " * 0.2"
        dDataToSet = SumLegalBasesToGLEnt("A#R934" & sSrcDimC1C2C3C4, StrEntity, sTaxGroupOrLegalEntity)
        If dDataToSet <> 0 Then
            Hs.Exp "A#NT2_430" & sDestDimC1C2C3C4None & " = " & dDataToSet
        End If

        Hs.Exp "A#NT2_440" & sDestDimC1C2C3C4None & " = -1 * A#NT1_820.C2#DT_CHNG" & sSrcDimC1C3C4

        Hs.Exp "A#NT3_40" & sDestDimC1C2C3C4None & " = A#NT2_450" & sSrcDimC1C2C3C4
        Hs.Exp "A#NT3_45" & sDestDimC1C2C3C4None & " = A#NT2_455" & sSrcDimC1C2C3C4
        Hs.Exp "A#NT3_30" & sDestDimC1C2C3C4None & " = A#NT2_460" & sSrcDimC1C2C3C4

        dOverrideValue = HS.GetCell("A#NT2_470_ME" & sSrcDimC1C2C3C4)
        If dOverrideValue = 0 Then
            Hs.Exp "A#NT2_470_CALC" & sDestDimC1C2C3C4None & " = A#NT2_200" & sSrcDimC1C2C3C4 & " * " & dLTR_CURTAX / 100
        End If
        dOverrideValue2 = HS.GetCell("A#NT2_480_ME" & sSrcDimC1C2C3C4)
        If dOverrideValue2 = 0 Then

            Hs.Exp "A#NT2_480_CALC" & sDestDimC1C2C3C4None & " = (A#NT1_TempDiff.C2#VA_CHNG" & sSrcDimC1C3C4 & " - A#NT1_80.C2#VA_CHNG" & sSrcDimC1C3C4 &_
                                                            " - A#NT1_TempDiff.C2#VA_PREV" & sSrcDimC1C3C4 & " + A#NT1_80.C2#VA_PREV" & sSrcDimC1C3C4 & ") * " & dLTR_CURTAX / 100
        End If

        Hs.Exp "A#NT2_490" & sDestDimC1C2C3C4None & " = -1 * A#NT1_830.C2#DT_CHNG" & sSrcDimC1C3C4

        dR93Net = SumLegalBasesToGLEnt("A#R93NET" & sSrcDimC1C2C3C4, StrEntity, sTaxGroupOrLegalEntity)
        If dOverrideValue <> 0 Or dOverrideValue2 <> 0 Then

            Hs.Exp "A#NT2_420" & sDestDimC1C2C3C4None & " = " & -1 * dR93Net & _
                                                        " -(A#NT2_410" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_430" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_440" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_450" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_455" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_460" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_470" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_480" & sSrcDimC1C2C3C4 & _
                                                        " + A#NT2_490" & sSrcDimC1C2C3C4 & ")"
        Else
            Hs.Exp "A#NT2_420" & sDestDimC1C2C3C4None & " = A#NT2_R90" & sSrcDimC1C2C3C4 & " * " & dLTR_CURTAX & " / 100 - A#NT2_410" & sSrcDimC1C2C3C4
        End If

        Hs.Exp "A#NT2_1000" & sDestDimC1C2C3C4None & " = A#NT2_400" & sSrcDimC1C2C3C4 & " + " & dR93Net

        Hs.Exp "A#NT2_910" & sDestDimC1C2C3C4None & " = A#NT1_99.C2#TAX_OB" & sSrcDimC1C3C4
        Hs.Exp "A#NT2_920" & sDestDimC1C2C3C4None & " = A#NT2_301" & sSrcDimC1C2C3C4
        dNT2_310 = HS.GetCell("A#NT2_310" & sSrcDimC1C2C3C4)

        If dNT2_310 < 0 And HS.entity.Isbase("MCG_ME", "") = False Then
            Hs.Exp "A#NT2_930" & sDestDimC1C2C3C4None & " = -1 * A#NT2_310" & sSrcDimC1C2C3C4
        End If

        Hs.Exp "A#NT2_940" & sDestDimC1C2C3C4None & " = A#NT1_99.C2#TAX_PREV" & sSrcDimC1C3C4
        Hs.Exp "A#NT2_901" & sDestDimC1C2C3C4None & " = A#NT2_900.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & " - A#NT1_99.C2#TAX_CB" & sSrcDimC1C3C4

        aAccList = Array("R931","R934","A362E","L366E")
        For Each sAcc in aAccList
            dDataToSet = SumLegalBasesToGLEnt("A#" & sAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#INP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)
            If dDataToSet <> 0 Then
                Hs.Exp "A#NT2_" & sAcc & "_INP" & sDestDimC1C2C3C4None & " = " & dDataToSet
            End If
            dDataToSet = SumLegalBasesToGLEnt("A#" & sAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity) - SumLegalBasesToGLEnt("A#" & sAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#INP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity) - SumLegalBasesToGLEnt("A#" & sAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#TAX_ADJ.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)
            If dDataToSet <> 0 Then
                Hs.Exp "A#NT2_" & sAcc & "_ADJ" & sDestDimC1C2C3C4None & " = " & dDataToSet
            End If
        Next

        Hs.Exp "A#NT2_51" & sDestDimC1C2C3C4None & " = A#NT2_R931_TAX_ADJ" & sSrcDimC1C2C3C4 & " + " & "A#NT2_R934_TAX_ADJ" & sSrcDimC1C2C3C4 & " + " & "A#NT2_A362E_TAX_ADJ" & sSrcDimC1C2C3C4 & " - " & "A#NT2_L366E_TAX_ADJ" & sSrcDimC1C2C3C4

        dR931 = SumLegalBasesToGLEnt("A#R931" & sSrcDimC1C2C3C4, StrEntity, sTaxGroupOrLegalEntity)
        dR934 = SumLegalBasesToGLEnt("A#R934" & sSrcDimC1C2C3C4, StrEntity, sTaxGroupOrLegalEntity)
        dA362E = SumLegalBasesToGLEnt("A#A362E" & sSrcDimC1C2C3C4, StrEntity, sTaxGroupOrLegalEntity)
        Hs.Exp "A#NT2_52" & sDestDimC1C2C3C4None & " = A#NT2_R931_TOTAL" & sSrcDimC1C2C3C4 & " + " & "A#NT2_R934_TOTAL" & sSrcDimC1C2C3C4 & " - " & dR931 & " - " & dR934

        Hs.Exp "A#NT3_10" & sDestDimC1C2C3C4None & " = " & dR931 & " - A#NT3_30" & sSrcDimC1C2C3C4 & " - A#NT3_40" & sSrcDimC1C2C3C4 & " - A#NT3_45" & sSrcDimC1C2C3C4
        Hs.Exp "A#NT3_20" & sDestDimC1C2C3C4None & " = A#NT2_430" & sSrcDimC1C2C3C4

        Hs.Exp "A#NT3_70" & sDestDimC1C2C3C4None & " = -1 * A#NT1_810.C2#DT_CHNG" & sSrcDimC1C3C4

        Hs.Exp "A#NT3_80" & sDestDimC1C2C3C4None & " = -1 * A#NT1_830.C2#DT_CHNG" & sSrcDimC1C3C4

        Hs.Exp "A#NT3_90" & sDestDimC1C2C3C4None & " = -1 * A#NT1_820.C2#DT_CHNG" & sSrcDimC1C3C4

        Hs.Exp "A#NT3_101" & sDestDimC1C2C3C4None & " = " & dR93Net & " + A#NT3_100" & sSrcDimC1C2C3C4
        Hs.Exp "A#NT3_151" & sDestDimC1C2C3C4None & " = A#NT3_150" & sSrcDimC1C2C3C4 & " - " & dA362E

        dNT2_310 = HS.GetCell("A#NT2_310" & sSrcDimC1C2C3C4)
        If dNT2_310 > 0 Then
            Hs.Exp "A#NT2_1001" & sDestDimC1C2C3C4None & " = (A#NT2_310" & sSrcDimC1C2C3C4 & " * " & dLTR_CURTAX & " / 100) " & " - A#NT3_10" & sSrcDimC1C2C3C4
        End If

        Hs.Clear "A#NT4_50.C2#TaxAG40"
        Hs.Clear "A#NT4_60.C2#TaxAG40"

        HS.Exp "A#NT4_50.C2#TaxAG40" & sDestDimC1C3C4None & " = -(A#NT1_10.C2#TempDiff_CB" & sSrcDimC1C3C4 & " - A#NT1_10.C2#VA_CB" & sSrcDimC1C3C4 & ") - A#NT4_50.C2#TaxAG10" & sSrcDimC1C3C4 & " - A#NT4_50.C2#TaxAG20" & sSrcDimC1C3C4 & " - A#NT4_50.C2#TaxAG30" & sSrcDimC1C3C4

        HS.Exp "A#NT4_60.C2#TaxAG40" & sDestDimC1C3C4None & " = A#NT1_10.C2#VA_CB" & sSrcDimC1C3C4 & " - A#NT4_60.C2#TaxAG10" & sSrcDimC1C3C4 & " - A#NT4_60.C2#TaxAG20" & sSrcDimC1C3C4 & " - A#NT4_60.C2#TaxAG30" & sSrcDimC1C3C4

        Hs.Exp "A#NT4_10.C2#TaxAG50" & sDestDimC1C3C4None & " = A#NT4_10.C2#TaxAG90" & sSrcDimC1C3C4 & " - A#NT1_99.C2#Tax_CB" & sSrcDimC1C3C4
        Hs.Exp "A#NT4_20.C2#TaxAG50" & sDestDimC1C3C4None & " = A#NT4_20.C2#TaxAG90" & sSrcDimC1C3C4 & " - A#NT1_99.C2#VA_CB" & sSrcDimC1C3C4
        Hs.Exp "A#NT4_30.C2#TaxAG50" & sDestDimC1C3C4None & " = A#NT4_30.C2#TaxAG90" & sSrcDimC1C3C4 & " - A#NT1_98.C2#Tax_CB" & sSrcDimC1C3C4
        Hs.Exp "A#NT4_40.C2#TaxAG50" & sDestDimC1C3C4None & " = A#NT4_40.C2#TaxAG90" & sSrcDimC1C3C4 & " - A#NT1_98.C2#VA_CB" & sSrcDimC1C3C4

        Hs.Exp "A#NT4_50.C2#TaxAG50" & sDestDimC1C3C4None & " = A#NT4_50.C2#TaxAG90" & sSrcDimC1C3C4 & " + A#NT1_10.C2#TempDiff_CB" & sSrcDimC1C3C4 & " - A#NT1_10.C2#VA_CB" & sSrcDimC1C3C4
        Hs.Exp "A#NT4_60.C2#TaxAG50" & sDestDimC1C3C4None & " = A#NT4_60.C2#TaxAG90" & sSrcDimC1C3C4 & " - A#NT1_10.C2#VA_CB" & sSrcDimC1C3C4

        Hs.Exp "A#NT4_70" & sDestDimC1C3C4None & " = A#NT4_10" & sSrcDimC1C3C4 & " + A#NT4_30" & sSrcDimC1C3C4 & " + A#NT4_50" & sSrcDimC1C3C4
        Hs.Exp "A#NT4_80" & sDestDimC1C3C4None & " = A#NT4_20" & sSrcDimC1C3C4 & " + A#NT4_40" & sSrcDimC1C3C4 & " + A#NT4_60" & sSrcDimC1C3C4

        Hs.Exp "A#NT4_91" & sDestDimC1C3C4None & " = (A#NT4_10" & sSrcDimC1C3C4 & " - A#NT4_20" & sSrcDimC1C3C4 & ") * " & dLTR_DEFTAX & " / 100"

        Hs.Exp "A#NT4_92" & sDestDimC1C3C4None & " = A#NT4_20" & sSrcDimC1C3C4 & " * " & dLTR_DEFTAX & " / 100"

        Hs.Exp "A#NT4_93" & sDestDimC1C3C4None & " = (A#NT4_30" & sSrcDimC1C3C4 & " - A#NT4_40" & sSrcDimC1C3C4 & ") * " & dLTR_DEFTAX & " / 100"

        Hs.Exp "A#NT4_94" & sDestDimC1C3C4None & " = A#NT4_40" & sSrcDimC1C3C4 & " * " & dLTR_DEFTAX & " / 100"

        iTAX_CATEGORY = HS.GetCell("A#TAX_CATEGORY" & sSrcDimC1C2C3C4)
        If iTAX_CATEGORY = 1 Then

            If IntYear > 2024 or (IntYear = 2024 and IntCurPeriodNum > 5) Then
                For Each Acc In Hs.Account.List("NT1_10","[Base]")
                    Hs.Clear "A#" & Acc & ".C2#ND_CB"
                    Hs.Clear "A#" & Acc & ".C2#VA_CB"
                Next
            End If
            Set DataUnit=HS.OpenDataUnit("A{NT1_10.[Base]}.C1#CUSTOM1_TOP.C2#TAX_CB.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                Hs.Clear "A#" & StrAccount & ".C2#TAX_CB"
            Next
            Set DataUnit=HS.OpenDataUnit("A{NT1_10.[Base]}.C1#CUSTOM1_TOP.C2#IFRS_CB.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If dData <> 0 Then

                    Hs.Exp "A#" & StrAccount & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & StrAccount & ".C2#IFRS_CB" & sSrcDimC1C3C4
                End If
            Next
        End If

        If iTAX_CATEGORY = 2 Then

            For Each Acc In Hs.Account.List("NT1_10","[Base]")
                Hs.Clear "A#" & Acc & ".C2#TAX_CB"
                Hs.Exp "A#" & Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#TAX_OB" & sSrcDimC1C3C4 & " + (A#" & Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & " - A#" & Acc & ".C2#IFRS_OB" & sSrcDimC1C3C4 & ") + A#" & Acc & ".C2#TAX_PREV" & sSrcDimC1C3C4
            Next

            For Each Acc In Hs.Account.List("NT1_10","[Base]")
                Hs.Clear "A#" & Acc & ".C2#ND_CB"
                Hs.Exp "A#" & Acc & ".C2#ND_CB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#ND_OB" & sSrcDimC1C3C4 & " + A#" & Acc & ".C2#ND_PREV" & sSrcDimC1C3C4

                Hs.Clear "A#" & Acc & ".C2#VA_CB"
                Hs.Exp "A#" & Acc & ".C2#VA_CB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#VA_OB" & sSrcDimC1C3C4 & " + A#" & Acc & ".C2#VA_PREV" & sSrcDimC1C3C4
            Next
        End If

        iTAX_CALC_START = HS.GetCell("A#TAX_CALC_START" & sSrcDimC1C2C3C4)
        iTAX_CALC_STOP = HS.GetCell("E#FLAG_ENTITY.V#EUR.A#TAX_CALC_STOP" & sSrcDimC1C2C3C4)

        iTAX_CALC_STOP_OVERRIDE = HS.GetCell("A#TAX_CALC_STOP_OVERRIDE" & sSrcDimC1C2C3C4)

        If iTAX_CALC_STOP = 1 Then
            HS.Clear "A#TAX_CALC_START"
            iTAX_CALC_START = 0
        End If

        dPrevAdj = 0

        If iTAX_CALC_START = 1 Or iTAX_CALC_STOP_OVERRIDE = 1 Then
            HS.Clear "A#R931.C3#TAX_ADJ"
            HS.Clear "A#R934.C3#TAX_ADJ"
            HS.Clear "A#A362E.C3#TAX_ADJ"
            HS.Clear "A#L366E.C3#TAX_ADJ"
            HS.Clear "A#A195.C3#TAX_ADJ"
            HS.Clear "A#L295.C3#TAX_ADJ"
            HS.Clear "A#L174.C3#TAX_ADJ"
            HS.Clear "A#L177.C3#TAX_ADJ"
            HS.Clear "A#R935.C3#TAX_ADJ"
            Hs.Exp "A#R931.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = A#NT2_R931_TAX_ADJ" & sSrcDimC1C2C3C4
            Hs.Exp "A#R934.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = A#NT2_R934_TAX_ADJ" & sSrcDimC1C2C3C4
            Hs.Exp "A#A362E.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = A#NT2_A362E_TAX_ADJ" & sSrcDimC1C2C3C4
            Hs.Exp "A#L366E.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = A#NT2_L366E_TAX_ADJ" & sSrcDimC1C2C3C4

            dNoteValue = Hs.GetCell("A#NT1_800.C2#DT_CHNG" & sSrcDimC1C3C4)
            dPrevValue = SumLegalBasesToGLEnt("A#R935.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)

            If dNoteValue <> 0 Or dPrevValue <> 0 Then

                Hs.Exp "A#R935.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = " & -1 * dNoteValue - dPrevValue
            End If
            dNoteValue = HS.GetCell("A#NT1_81.C2#DT_CB" & sSrcDimC1C3C4)
            dPrevValue = SumLegalBasesToGLEnt("A#L174.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)

            If dNoteValue <> 0 Or dPrevValue <> 0 Then
                Hs.Exp "A#L174.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = " & dNoteValue - dPrevValue
            End If
            dNoteValue = HS.GetCell("A#NT1_82.C2#DT_CB" & sSrcDimC1C3C4)
            dPrevValue = SumLegalBasesToGLEnt("A#L177.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)

            If dNoteValue <> 0 Or dPrevValue <> 0 Then
                Hs.Exp "A#L177.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = " & dNoteValue - dPrevValue
            End If

            dAssets = 0.0
            dLiabs = 0.0
            dTBD = 0

            Set DataUnit=HS.OpenDataUnit("A{NT1_TempDiff.[Base]}.C1#CUSTOM1_TOP.C2#DT_CB.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                If dData <> 0 Then
                    iDT_OFFSET = HS.GetCell("A#" & StrAccount & ".C2#DT_OFFSET" & sSrcDimC1C3C4)
                    sAccType = HS.Account.AccountType(StrAccount)
                    If iDT_OFFSET = 1 Then
                        If dData > 0 And sAccType = "LIABILITY" Then
                            dLiabs = dLiabs + dData
                        ElseIf dData < 0 And sAccType = "LIABILITY" Then
                            dAssets = dAssets - dData
                        ElseIf dData > 0 And sAccType = "ASSET" Then
                            dAssets = dAssets + dData
                        ElseIf dData < 0 And sAccType = "ASSET" Then
                            dLiabs = dLiabs - dData
                        End If
                    Else
                        iMultiply = 1
                        If sAccType = "LIABILITY" Then
                            iMultiply = -1
                        End If
                        dTBD = dTBD + iMultiply * dData
                    End If
                End If
            Next

            If dTBD > 0 Then
                dAssets = dAssets + dTBD
            ElseIf dTBD < 0 Then
                dLiabs = dLiabs - dTBD
            End If

            dPrevValue = SumLegalBasesToGLEnt("A#L295.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)

            If dLiabs <> 0 Or dPrevValue <> 0 Then
                Hs.Exp "A#L295.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = " & dLiabs - dPrevValue + dPrevAdj
            End If
            dPrevValue = SumLegalBasesToGLEnt("A#A195.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP", StrEntity, sTaxGroupOrLegalEntity)

            If dAssets <> 0 Or dPrevValue <> 0 Then
                Hs.Exp "A#A195.I#[ICP None].C1#[None].C2#[None].C3#TAX_ADJ.C4#[None] = " & dAssets - dPrevValue + dPrevAdj
            End If

        End If

        Hs.Exp "C2#TempDiff_TrueUp = C2#TempDiff_OB - C2#TAX_PREV - C2#ND_PREV + C2#VA_PREV"

        Hs.Exp "C2#DT_TrueUp = - C2#TempDiff_TrueUp * " & dLTR_DEFTAX / 100

    End If
End Sub

Sub TaxNotesNT1_NT4_Migration(StrPrevScenBEGBAL, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs,StrApp)

    sSrcDimC1C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcDimC1C2C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sDestDimC1C3C4None = ".I#[ICP None].C1#[None].C3#INP.C4#[None]"
    sDestDimC1C2C3C4None = ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"

    If bDoTaxNotesCalcs = True And (CInt(IntYear) = 2022 Or CInt(IntYear) = 2039) And GL_Ent = True And IntCurPeriodNum = 12 Then
        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            sTaxGroupOrLegalEntity = TaxGroupEntity
        Else
            sTaxGroupOrLegalEntity = LegalEntForStrEntity
        End If
        If CInt(IntYear) = 2039 Then
            sNote3SrcPer = ".P#Dec.Y#2022"
            dLTR_DEFTAX = HS.GetCell("A#LTR_DEFTAX" & sSrcDimC1C2C3C4 & ".P#Dec.Y#2022")
            dLTR_CURTAX = HS.GetCell("A#LTR_CURTAX" & sSrcDimC1C2C3C4 & ".P#Dec.Y#2022")
            Hs.Clear "C2#Tax_CB"
        Else
            dLTR_DEFTAX = HS.GetCell("A#LTR_DEFTAX" & sSrcDimC1C2C3C4)
            dLTR_CURTAX = HS.GetCell("A#LTR_CURTAX" & sSrcDimC1C2C3C4)
            Hs.Clear "C2#Tax_CB"
        End If

        bCopyData = 0
        If bCopyData = 1 And CInt(IntYear) = 2022 Then
            sCopyFrom = ".P#Dec.Y#2039"
            aCopyMembers = Array("ND_CB","TAX_MIGRI","VA_CB","DT_CBME")
            For Each sCopyMember In aCopyMembers
                For Each Acc In Hs.Account.List("NT1_TempDiff","[Base]")
                    Hs.Clear "A#" & Acc & ".C2#" & sCopyMember
                Next
                Set DataUnit=HS.OpenDataUnit("A{NT1_TempDiff.[Base]}.C1#CUSTOM1_TOP.C2#" & sCopyMember & ".C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Dec.Y#2039")
                NumItems = DataUnit.GetNumItems
                For i = 0 To NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                    Hs.Exp "A#" & StrAccount & ".C2#" & StrC2 & sDestDimC1C3C4None & " = A#" & StrAccount & ".C2#" & StrC2 & sSrcDimC1C3C4 & sCopyFrom

                Next
            Next
        End If

        For Each Acc In Hs.Account.List("NT1_TempDiff","[Base]")
            If Acc <> "NT1_97" And Acc <> "NT1_98" And Acc <> "NT1_99" Then
                dDataToSet =  SumLegalBasesToGLEnt("A#" & Acc & "_BS.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer, StrEntity, sTaxGroupOrLegalEntity)
                If dDataToSet <> 0 Then
                    HS.Exp "A#" & Acc & ".C2#IFRS_CB" & sDestDimC1C3C4None & " = " & dDataToSet
                End If
            End If

        Next

        If dLTR_DEFTAX <> 0 Then

            sNT1Acc = "NT1_21"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " - ((A#N3C_5015L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4015A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & ") / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_22"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " - ((A#N3C_5020L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " + A#N3C_5075L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " + A#N3C_5082L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " + A#N3C_5033L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & _
                                                                        " - (A#N3C_4025A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " + A#N3C_4085A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & ")) / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_23"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " - ((A#N3C_5025L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4030A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & ") / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_24"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " - ((A#N3C_5030L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4020A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & ") / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4
            sNT1Acc = "NT1_25"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_26"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4
            sNT1Acc = "NT1_27"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + (A#N3C_4040A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_28"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + (A#N3C_4035A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_29"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " - (A#N3C_5070L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_41"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + ((A#N3C_5085L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " + A#N3C_5080L.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & _
                                                                        " - A#N3C_4045A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4055A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4050A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4090A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " - A#N3C_4080A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & ") / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_42"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_43"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_44"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_49"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4 & _
                                                                        " - (A#N3C_4070A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#ND_CB" & sSrcDimC1C3C4 & " - A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_81"

            sNT1Acc = "NT1_82"

            sNT1Acc = "NT1_97"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_98"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = 1 * (A#N3C_4075A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            sNT1Acc = "NT1_99"
            Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = 1 * (A#N3C_4010A.C2#CUSTOM2_TOP" & sSrcDimC1C3C4 & sNote3SrcPer & " / " & dLTR_DEFTAX & " * 100)" & _
                                                                        " + A#" & sNT1Acc & ".C2#VA_CB" & sSrcDimC1C3C4 & " + A#" & sNT1Acc & ".C2#TAX_MIGRI" & sSrcDimC1C3C4

            HS.Exp "A#NT1_81.C2#TAX_CB" & sDestDimC1C3C4None & " = " & (SumLegalBasesToGLEnt("A#L174" & Acc & sSrcDimC1C2C3C4 & sNote3SrcPer, StrEntity, sTaxGroupOrLegalEntity) / dLTR_DEFTAX * 100) & " + A#NT1_81.C2#IFRS_CB" & sSrcDimC1C3C4 & " + A#NT1_81.C2#VA_CB" & sSrcDimC1C3C4
            HS.Exp "A#NT1_82.C2#TAX_CB" & sDestDimC1C3C4None & " = " & (SumLegalBasesToGLEnt("A#L177" & Acc & sSrcDimC1C2C3C4 & sNote3SrcPer, StrEntity, sTaxGroupOrLegalEntity) / dLTR_DEFTAX * 100) & " + A#NT1_82.C2#IFRS_CB" & sSrcDimC1C3C4 & " + A#NT1_82.C2#VA_CB" & sSrcDimC1C3C4
        Else

            For Each sNT1Acc In Hs.Account.List("NT1_10","[Base]")
                Hs.Exp "A#" & sNT1Acc & ".C2#TAX_CB" & sDestDimC1C3C4None & " = A#" & sNT1Acc & ".C2#IFRS_CB" & sSrcDimC1C3C4
            Next
        End If

        For Each Acc In Hs.Account.List("NT1_TempDiff","[Base]")
            dOverrideValue = HS.GetCell("A#" & Acc & sSrcDimC1C3C4 & ".C2#DT_CBME")
            If dOverrideValue <> 0 Then
                Hs.Exp "A#" & Acc & ".C2#DT_CB" & sDestDimC1C3C4None & " = A#" & Acc & ".C2#DT_CBME" & sSrcDimC1C3C4
            Else
                Hs.Exp "A#" & Acc & ".C2#DT_CB" & sDestDimC1C3C4None & " = -1 * A#" & Acc & ".C2#TempDiff_CB" & sSrcDimC1C3C4 & " * " & dLTR_DEFTAX / 100
            End If
        Next

        dTaxBsNet = SumLegalBasesToGLEnt("A#A195" & Acc & sSrcDimC1C2C3C4 & sNote3SrcPer, StrEntity, sTaxGroupOrLegalEntity) - SumLegalBasesToGLEnt("A#L295" & Acc & sSrcDimC1C2C3C4 & sNote3SrcPer, StrEntity, sTaxGroupOrLegalEntity)
        Hs.Exp "A#Migration_check.C2#DT_CB" & sDestDimC1C3C4None & " = A#NT1_TempDiff.C2#DT_CB" & sSrcDimC1C3C4 & " - " & dTaxBsNet
        Hs.Exp "A#Migration_check.C2#TAX_MIGRI" & sDestDimC1C3C4None & " = A#NT1_TempDiff.C2#TAX_MIGRI" & sSrcDimC1C3C4
    End If
End Sub

Sub NotesBase(StrPrevScenBEGBAL,IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs)

    sSrcPOV = ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
    sDestPOV = ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]"
    sSrcDIM = ".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
    sDestDIM = ".C1#[None].C3#INP.C4#[None].I#[ICP None]"

    If (IntYear > 2013 or (IntYear = 2013 and IntCurPeriodNum > 3)) and (IntYear < 2019 or (IntYear = 2019 and IntCurPeriodNum < 4)) Then
        HS.Exp "A#N0109" & sDestPOV & " = A#R861" & sSrcPOV
    End If

    HS.Exp "A#NC0107" & sDestPOV & " = A#N0106" & sSrcPOV & "+ A#RM69" & sSrcPOV

    If IntYear > 2021 or (IntYear = 2021 and IntCurPeriodNum >= 6) Then

        Hs.Clear "A#N0107"
        HS.Exp "A#N0107" & sDestPOV & " = A#N3012" & sSrcPOV & " + A#N3013" & sSrcPOV
    End If

    If bDoTaxNotesCalcs = True And IntYear < 2024 Then

        If IntYear > 2017 Then
            Call Note3_CHGIS_Calc(StrEntity)
        End If

        If GL_Ent = True Then
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                HS.Exp "A#N3B_R901" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#R90" & sSrcPOV, StrEntity, TaxGroupEntity)
            Else
                HS.Exp "A#N3B_R901" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#R90" & sSrcPOV, StrEntity, LegalEntForStrEntity)
            End If
        End If

        HS.Exp "A#N3B_3030" & sDestPOV & " = A#N3B_3024" & sSrcPOV & "- A#N3B_3028" & sSrcPOV
        HS.Exp "A#N3B_5100L" & sDestPOV & " = -(A#N3B_5033L" & sSrcPOV & "+ A#N3B_5090L" & sSrcPOV & "+ A#N3B_5070L" & sSrcPOV & "+ A#N3B_5075L" & sSrcPOV & ") - (A#N3B_5015L" & sSrcPOV & " + A#N3B_5020L" & sSrcPOV & ") - A#N3B_5025L" & sSrcPOV & "- A#N3B_5065L" & sSrcPOV & "- A#N3B_5080L" & sSrcPOV & "- A#N3B_5030L" & sSrcPOV

        HS.Exp "A#N3B_3053" & sDestPOV & " = -(A#N3B_3051" & sSrcPOV & "+ A#N3B_3052" & sSrcPOV & ")"

        HS.Exp "A#N3B_3610" & sDestPOV & " = A#N3B_R901" & sSrcPOV & " * 0.2"

        HS.Exp "A#N3B_3615" & sDestPOV & " = (A#LTR_CURTAX.C3#CUSTOM3_TOP/100) * A#N3B_R901" & sSrcPOV & " - A#N3B_3610" & sSrcPOV

        HS.Exp "A#N3B_3620" & sDestPOV & " = A#N3A_1020" & sSrcPOV
        HS.Exp "A#N3B_3625" & sDestPOV & " = A#N3A_1040" & sSrcPOV
        HS.Exp "A#N3B_3630" & sDestPOV & " = A#N3A_1030" & sSrcPOV
        HS.Exp "A#N3B_3635" & sDestPOV & " = (A#LTR_CURTAX.C3#CUSTOM3_TOP/100) * A#N3B_3030" & sSrcPOV
        HS.Exp "A#N3B_3640" & sDestPOV & " = (A#LTR_CURTAX.C3#CUSTOM3_TOP/100) * (-A#N3B_3052" & sSrcPOV & " + A#N3B_3054" & sSrcPOV & ")"
        HS.Exp "A#N3B_3645" & sDestPOV & " = (A#LTR_CURTAX.C3#CUSTOM3_TOP/100) * A#N3B_3060" & sSrcPOV
    End If

    CurrTime = Now()
    StrCurrFcstYear = CStr(Year(CurrTime))
    Str1stFcstPeriod = LZ(Month(CurrTime))
    If left(Str1stFcstPeriod,1) = "0" then
        Str1stFcstPeriod = mid(Str1stFcstPeriod,2,1)
    End If
    If CInt(Str1stFcstPeriod) = 1 Then
        IntCurrReportingPeriod = 12
        IntCurrReportingYear = CInt(StrCurrFcstYear) - 1
    Else
        IntCurrReportingPeriod = CInt(Str1stFcstPeriod) - 1
        IntCurrReportingYear = CInt(StrCurrFcstYear)
    End If
    IntCurCalcPeriodNum = CInt(HS.Period.Number())

    If CInt(IntYear) > 2020 And CInt(IntYear) = IntCurrReportingYear And (IntCurCalcPeriodNum = IntCurrReportingPeriod OR IntCurCalcPeriodNum = CInt(Str1stFcstPeriod)) Then

        If (IntCurCalcPeriodNum = 6 Or IntCurCalcPeriodNum = 9 Or IntCurCalcPeriodNum = 12) And bDoTaxNotesCalcs = True And IntYear < 2024 Then
            For Each AccTop In Array("N3C_4100A", "N3C_5100L")
                AccList = Hs.Account.List(AccTop,"[Base]")
                For each Acc in AccList
                    dData = HS.GetCellRealData("A#" & Acc & sDestDIM & ".C2#TAX_CHGIS_PREV", bContainsRealData)
                    If bContainsRealData = False Then
                        Hs.Exp  "A#" & Acc & sDestDIM & ".C2#TAX_CHGIS_PREV = A#" & Acc & sSrcDIM & ".C2#TAX_CHGIS_PREV.P#Cur-3"

                    End If
                Next
            Next
        End If

        If ActiveMember_BasedOnCloseStartDate(StrEntity,"Entity",IntYear,IntCurPeriodNum) = True And CInt(intYear) > 2017 Then
            If bDoTaxNotesCalcs = True Then
                aAccList = Array("LTR_DEFTAX","LTR_CURTAX")
            Else
                aAccList = Array("LTR_DEFTAX")
            End If
            For Each Acc In aAccList
                dData = HS.GetCellRealData("A#" & Acc & sDestPOV, bContainsRealData)
                If bContainsRealData = False Then
                    Hs.Exp  "A#" & Acc & sDestPOV & " = A#" & Acc & ".C2#[None].C3#INP.P#Cur-3"
                End If
            Next
        End If

        If (IntCurCalcPeriodNum = 6 Or IntCurCalcPeriodNum = 9 Or IntCurCalcPeriodNum = 12) And bDoTaxNotesCalcs = True And IntYear < 2024 Then
            For Each Acc In Array("N3D_6120","N3D_6220","N3D_6320","N3D_6420","N3D_6520")
                dData = HS.GetCellRealData("A#" & Acc & sDestPOV, bContainsRealData)
                If bContainsRealData = False Then
                    Hs.Exp  "A#" & Acc & sDestPOV & " = A#" & Acc & sSrcPOV & ".P#Cur-3"
                End If
            Next
        End If
    End If

    If bDoTaxNotesCalcs = True And IntYear < 2024 Then

        For Each AccTop In Array("N3C_4100A", "N3C_5100L")
            AccList = Hs.Account.List(AccTop,"[Base]")
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                For each Acc in AccList
                    Hs.Exp  "A#" & Acc & sDestDIM & ".C2#TAX_OPE = "& SumLegalBasesToGLEnt("A#" & Acc & ".C1#CUSTOM1_TOP.C2#TAX.C4#[None].I#[ICP Top]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)
                Next
            Else
                For each Acc in AccList
                    Hs.Exp  "A#" & Acc & sDestDIM & ".C2#TAX_OPE = A#" & Acc & ".C2#TAX." & StrPrevScenBEGBAL

                Next
            End If
        Next

        HS.Exp "A#N3C_5095L" & sDestDIM & "= A#N3C_4095A" & sSrcDIM

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            HS.Exp "A#N3C_NC3101" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A.C2#TAX_SOLD_ACQ" & sSrcDIM, StrEntity, TaxGroupEntity) & " - " & SumLegalBasesToGLEnt("A#A195.C2#ACQTOT" & sSrcDIM, StrEntity, TaxGroupEntity) & " + " & SumLegalBasesToGLEnt("A#A195.C2#DISPBUSINTOT" & sSrcDIM, StrEntity, TaxGroupEntity)
            HS.Exp "A#N3C_NC3102" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_5100L.C2#TAX_SOLD_ACQ" & sSrcDIM, StrEntity, TaxGroupEntity) & " - " & SumLegalBasesToGLEnt("A#L295.C2#ACQTOT" & sSrcDIM, StrEntity, TaxGroupEntity) & " + " & SumLegalBasesToGLEnt("A#L295.C2#DISPBUSINTOT" & sSrcDIM, StrEntity, TaxGroupEntity)
        Else
            HS.Exp "A#N3C_NC3101" & sDestPOV & " = A#N3C_4100A.C2#TAX_SOLD_ACQ" & sSrcDIM & " - A#A195.C2#ACQTOT" & sSrcDIM & " + A#A195.C2#DISPBUSINTOT" & sSrcDIM
            HS.Exp "A#N3C_NC3102" & sDestPOV & " = A#N3C_5100L.C2#TAX_SOLD_ACQ" & sSrcDIM & " - A#L295.C2#ACQTOT" & sSrcDIM & " + A#L295.C2#DISPBUSINTOT" & sSrcDIM
        End If
    End If

    If bDoTaxNotesCalcs = True And IntYear < 2024 Then
        If GL_Ent = True Then
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                LegalLevelEntity = TaxGroupEntity
            Else
                LegalLevelEntity = LegalEntForStrEntity
            End If

            HS.Exp "A#N3A_2010" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A.C2#TAX_CHGIS" & sSrcDIM, StrEntity, LegalLevelEntity) & " * (-1) + " & SumLegalBasesToGLEnt("A#N3C_5100L.C2#TAX_CHGIS" & sSrcDIM, StrEntity, LegalLevelEntity)
            HS.Exp "A#N3A_2020" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A.C2#TAX_CHGIS_RATE" & sSrcDIM, StrEntity, LegalLevelEntity) & " * (-1) + " & SumLegalBasesToGLEnt("A#N3C_5100L.C2#TAX_CHGIS_RATE" & sSrcDIM, StrEntity, LegalLevelEntity)
            HS.Exp "A#N3A_2030" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A.C2#TAX_CHGIS_PREV" & sSrcDIM, StrEntity, LegalLevelEntity) & " * (-1) + " & SumLegalBasesToGLEnt("A#N3C_5100L.C2#TAX_CHGIS_PREV" & sSrcDIM, StrEntity, LegalLevelEntity)
        End If

        HS.Exp "A#N3B_3665" & sDestPOV & " = A#N3A_2030" & sSrcPOV
        HS.Exp "A#N3B_3660" & sDestPOV & " = A#N3A_2020" & sSrcPOV

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            HS.Exp "A#N3A_NC3014" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3A_1010" & sSrcPOV, StrEntity, TaxGroupEntity) & " + " & SumLegalBasesToGLEnt("A#N3A_1030" & sSrcPOV, StrEntity, TaxGroupEntity) & " + " & _
                SumLegalBasesToGLEnt("A#N3A_1040" & sSrcPOV, StrEntity, TaxGroupEntity) &" - " & SumLegalBasesToGLEnt("A#R931" & sSrcPOV, StrEntity, TaxGroupEntity)
            HS.Exp "A#N3A_NC3015" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3A_1020" & sSrcPOV, StrEntity, TaxGroupEntity) & " - " & SumLegalBasesToGLEnt("A#R934" & sSrcPOV, StrEntity, TaxGroupEntity)

            HS.Exp "A#N3A_NC3016" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3A_9340" & sSrcPOV, StrEntity, TaxGroupEntity) & " - " & SumLegalBasesToGLEnt("A#R935" & sSrcPOV, StrEntity, TaxGroupEntity)

        Else
            HS.Exp "A#N3A_NC3014" & sDestPOV & " = A#N3A_1010" & sSrcPOV & " + A#N3A_1030" & sSrcPOV & " + A#N3A_1040" & sSrcPOV & " - A#R931" & sSrcPOV
            HS.Exp "A#N3A_NC3015" & sDestPOV & " = A#N3A_1020" & sSrcPOV & " - A#R934" & sSrcPOV

            HS.Exp "A#N3A_NC3016" & sDestPOV & " = A#N3A_9340" & sSrcPOV & " - A#R935" & sSrcPOV

        End If

        HS.Exp "A#N3B_NC3166" & sDestPOV & " = A#N3B_R93" & sSrcPOV & " - A#N3A_9300" & sSrcPOV
    End If

    If bDoTaxNotesCalcs = True And IntYear < 2024 Then

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            Hs.Exp "A#N3D_6110" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3D_6100.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP.I#[ICP None]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)
            Hs.Exp "A#N3D_6210" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3D_6200.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP.I#[ICP None]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)
        Else
            Hs.Exp "A#N3D_6110" & sDestPOV & " = A#N3D_6100." & StrPrevScenBEGBAL
            Hs.Exp "A#N3D_6210" & sDestPOV & " = A#N3D_6200." & StrPrevScenBEGBAL
        End If
        HS.Exp "A#N3D_6130" & sDestPOV & " = A#N3B_3051" & sSrcPOV

        HS.Exp "A#N3D_6230" & sDestPOV & " = A#N3B_3052" & sSrcPOV
        HS.Exp "A#N3D_6240" & sDestPOV & " = A#N3B_3060" & sSrcPOV
        HS.Exp "A#N3D_6250" & sDestPOV & " = -A#N3D_6150" & sSrcPOV

        For Each sN3DAcc In Array("N3D_6310", "N3D_6410", "N3D_6510")
            sN3DSrcAcc = Left(sN3DAcc, 6) & "00"
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                Hs.Exp "A#" & sN3DAcc & sDestPOV & " = " & SumLegalBasesToGLEnt("A#" & sN3DSrcAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP.I#[ICP None]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)
            Else
                Hs.Exp "A#" & sN3DAcc & sDestPOV & " = A#" & sN3DSrcAcc & "." & StrPrevScenBEGBAL
            End If
        Next

        HS.Exp "A#N3D_6450" & sDestPOV & " = -A#N3D_6350" & sSrcPOV

        For Each sAcc In Array("N3D_6190", "N3D_6290", "N3D_6390", "N3D_6490", "N3D_6550")
            HS.Exp "A#" & sAcc & sDestPOV & " = A#" & Left(sAcc, 6) & "00" & sSrcPOV & " * A#LTR_DEFTAX.C3#CUSTOM3_TOP / 100"
        Next

        HS.Exp "A#N3D_NC3129" & sDestPOV & " = A#N3D_6100" & sSrcPOV & " * (A#LTR_DEFTAX.C3#CUSTOM3_TOP / 100) - A#N3C_4010A.C2#TAX" & sSrcDIM
        HS.Exp "A#N3D_NC3130" & sDestPOV & " = A#N3D_6100" & sSrcPOV & " - A#N3D_7100" & sSrcPOV
        HS.Exp "A#N3D_NC3131" & sDestPOV & " = A#N3D_6200" & sSrcPOV & " - A#N3D_7200" & sSrcPOV

        HS.Exp "A#N3D_NC3134" & sDestPOV & " = (A#N3D_6300" & sSrcPOV & " * A#LTR_DEFTAX.C3#CUSTOM3_TOP / 100) - A#N3C_4075A.C2#Tax" & sSrcDIM
        HS.Exp "A#N3D_NC3135" & sDestPOV & " = A#N3D_6300" & sSrcPOV & " - A#N3D_7300" & sSrcPOV
        HS.Exp "A#N3D_NC3136" & sDestPOV & " = A#N3D_6400" & sSrcPOV & " - A#N3D_7400" & sSrcPOV
        HS.Exp "A#N3D_NC3137" & sDestPOV & " = A#N3D_6500" & sSrcPOV & " - A#N3D_7500" & sSrcPOV
    End If

    HS.Exp "A#N0406" & sDestPOV & " = A#A315" & sSrcPOV

    If CInt(IntYear) >= 2018 Then
        HS.Clear "A#N0401"
        HS.Exp "A#N0401" & sDestPOV & " = A#N0431" & sSrcPOV
    End If

    If CInt(IntYear) >= 2020 Then
        HS.Clear "A#N0410"
        HS.Exp "A#N0410" & sDestPOV & " = A#N0402" & sSrcPOV & " - A#N0403" & sSrcPOV
    End If

    N0432_CalcProducts = Array("SER07_MG")
    For each Prod in N0432_CalcProducts
        HS.Clear "A#N0432.C1#"&Prod&".C2#[None].C3#INP.C4#[None].I#[ICP None]"
        HS.Exp "A#N0432.C1#"&Prod&".C2#[None].C3#INP.C4#[None].I#[ICP None] =  A#RM01E.C1#"&Prod&".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"
    Next

    HS.Exp "A#N0430.C2#[None].C3#INP.C4#[None].I#[ICP None] =  A#RM01E.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top] - A#N0431.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top] - A#N0432.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"& _
    "- A#N0433.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]- A#N0434.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]- A#N0435.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]- A#N0436.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"& _
    "- A#N0437.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]- A#N0438.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"

    If CInt(IntCurPeriodNum) = 12 Then

        If CInt(IntYear) < 2019 Then
            HS.Exp "A#N04111.C2#CNA10" & sDestDIM & " = A#A315.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL
            HS.Exp "A#N04112.C2#CNA10" & sDestDIM & " = A#A357.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL
        Else
            HS.Exp "A#N04111.C2#CNA10" & sDestDIM & " = A#A315.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL&" - A#N15091.C1#CUSTOM1_TOP.C2#PROV_TOTAL."&StrPrevScenBEGBAL
            HS.Exp "A#N04112.C2#CNA10" & sDestDIM & " = A#A357.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL&" - A#N15092.C1#CUSTOM1_TOP.C2#PROV_TOTAL."&StrPrevScenBEGBAL
        End If

        If CInt(IntCurPeriodNum) = 12 and CInt(IntYear) >= 2024 Then
            HS.Clear "A#N04111.C2#CNA50" & sDestDIM
            HS.Exp "A#N04111.C2#CNA50" & sDestDIM & " = A#A315.C2#ACQTOT" & sSrcDIM & " - A#A315.C2#DISPBUSINTOT" & sSrcDIM
            HS.Clear "A#N04112.C2#CNA50" & sDestDIM
            HS.Exp "A#N04112.C2#CNA50" & sDestDIM & " = A#A357.C2#ACQTOT" & sSrcDIM & " - A#A357.C2#DISPBUSINTOT" & sSrcDIM
            HS.Clear "A#N04121.C2#CNL50" & sDestDIM
            HS.Exp "A#N04121.C2#CNL50" & sDestDIM & " = A#L335E.C2#ACQTOT" & sSrcDIM & " - A#L335E.C2#DISPBUSINTOT" & sSrcDIM
            HS.Clear "A#N04122.C2#CNL50" & sDestDIM
            HS.Exp "A#N04122.C2#CNL50" & sDestDIM & " = A#L348.C2#ACQTOT" & sSrcDIM & " - A#L348.C2#DISPBUSINTOT" & sSrcDIM
            HS.Clear "A#N04123.C2#CNL50" & sDestDIM
            HS.Exp "A#N04123.C2#CNL50" & sDestDIM & " = A#L369.C2#ACQTOT" & sSrcDIM & " - A#L369.C2#DISPBUSINTOT" & sSrcDIM
        End if

        HS.Exp "A#N04121.C2#CNL10" & sDestDIM & " = A#L335E.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL
        HS.Exp "A#N04122.C2#CNL10" & sDestDIM & " = A#L348.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL
        HS.Exp "A#N04123.C2#CNL10" & sDestDIM & " = A#L369.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL

        If CInt(IntYear) >= 2018 Then
            HS.Clear "A#N04111.C1#[None].C2#CNA60.C3#INP"
            HS.Exp "A#N04111.C2#CNA60" & sDestDIM & " = -A#N15091.C2#PROV_TOTAL" & sSrcDIM & " + A#N15091.C1#CUSTOM1_TOP.C2#PROV_TOTAL." & StrPrevScenBEGBAL
            HS.Clear "A#N04112.C1#[None].C2#CNA60.C3#INP"
            HS.Exp "A#N04112.C2#CNA60" & sDestDIM & " = -A#N15092.C2#PROV_TOTAL" & sSrcDIM & " + A#N15092.C1#CUSTOM1_TOP.C2#PROV_TOTAL." & StrPrevScenBEGBAL
        End If

        HS.Exp "A#N04111.C2#CNA70" & sDestDIM & " = A#A315" & sSrcPOV & " - A#N04111.C2#CNA10" & sSrcDIM & " - A#N04111.C2#CNA11" & sSrcDIM & _
            "-A#N04111.C2#CNA12" & sSrcDIM & " - A#N04111.C2#CNA40" & sSrcDIM & " - A#N04111.C2#CNA50" & sSrcDIM & " - A#N04111.C2#CNA60" & sSrcDIM & "-A#N04111.C2#CNA80" & sSrcDIM & " - A#N04111.C2#CNA90" & sSrcDIM & " - A#N04111.C2#CNA99" & sSrcDIM
        HS.Exp "A#N04112.C2#CNA70" & sDestDIM & " = A#A357" & sSrcPOV & " - A#N04112.C2#CNA10" & sSrcDIM & " - A#N04112.C2#CNA11" & sSrcDIM & _
            "-A#N04112.C2#CNA12" & sSrcDIM & " - A#N04112.C2#CNA40" & sSrcDIM & " - A#N04112.C2#CNA50" & sSrcDIM & " - A#N04112.C2#CNA60" & sSrcDIM & "-A#N04112.C2#CNA80" & sSrcDIM & " - A#N04112.C2#CNA90" & sSrcDIM & " - A#N04112.C2#CNA99" & sSrcDIM
        HS.Exp "A#N04121.C2#CNL30" & sDestDIM & " = A#L335E" & sSrcPOV & " - A#N04121.C2#CNL10" & sSrcDIM & " - A#N04121.C2#CNL11" & sSrcDIM & _
            "-A#N04121.C2#CNL12" & sSrcDIM & " - A#N04121.C2#CNL20" & sSrcDIM & " - A#N04121.C2#CNL50" & sSrcDIM & " - A#N04121.C2#CNL80" & sSrcDIM & "-A#N04121.C2#CNL90" & sSrcDIM & " - A#N04121.C2#CNL99" & sSrcDIM
        HS.Exp "A#N04122.C2#CNL30" & sDestDIM & " = A#L348" & sSrcPOV & " - A#N04122.C2#CNL10" & sSrcDIM & " - A#N04122.C2#CNL11" & sSrcDIM & _
            "-A#N04122.C2#CNL12" & sSrcDIM & " - A#N04122.C2#CNL20" & sSrcDIM & " - A#N04122.C2#CNL50" & sSrcDIM & " - A#N04122.C2#CNL80" & sSrcDIM & "-A#N04122.C2#CNL90" & sSrcDIM & " - A#N04122.C2#CNL99" & sSrcDIM
        HS.Exp "A#N04123.C2#CNL30" & sDestDIM & " = A#L369" & sSrcPOV & " - A#N04123.C2#CNL10" & sSrcDIM & " - A#N04123.C2#CNL11" & sSrcDIM & _
            "-A#N04123.C2#CNL12" & sSrcDIM & " - A#N04123.C2#CNL20" & sSrcDIM & " - A#N04123.C2#CNL50" & sSrcDIM & " - A#N04123.C2#CNL80" & sSrcDIM & "-A#N04123.C2#CNL90" & sSrcDIM & " - A#N04123.C2#CNL99" & sSrcDIM

    End If

    If CInt(IntYear) > 2020 Then

        AccListOpening5to8 = Array("N0501", "N0502", "N0503", "N0504", "N0505", "N0506", "N0507", "N0508", "N0512", "N0601", "N06021", "N06022", "N0603", "N0605", "N0606", "N0701", "N0702", "N0513")
    Else
        AccListOpening5to8 = Array("N0501", "N0502", "N0503", "N0504", "N0505", "N0506", "N0507", "N0508","N0510", "N0512", "N0601", "N06021", "N06022", "N0603", "N0605", "N0606", "N0701", "N0702", "N0513")
    End If
    For Each Acc In AccListOpening5to8

        Hs.Exp  "A#" & Acc & sDestDIM & ".C2#A_ACQ = A#" & Acc & ".C2#A." & StrPrevScenBEGBAL
        Hs.Exp  "A#" & Acc & sDestDIM & ".C2#D_ACD = A#" & Acc & ".C2#D." & StrPrevScenBEGBAL
    Next

    HS.Exp "A#NC0117" & sDestPOV & " = A#N0506.C2#A_CACQ" & sSrcDIM & " - A#N0506.C2#D_CACQ" & sSrcDIM & " - A#A117.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0118" & sDestPOV & " = A#N0506.C2#A_CSLD" & sSrcDIM & " - A#N0506.C2#D_CSLD" & sSrcDIM & " - A#A117.C2#DISPBUSINTOT" & sSrcDIM

    HS.Exp "A#NC0119" & sDestPOV & " = A#N0501.C2#A_CACQ" & sSrcDIM & " + A#N0502.C2#A_CACQ" & sSrcDIM & " + A#N0503.C2#A_CACQ" & sSrcDIM & " + A#N0504.C2#A_CACQ" & sSrcDIM & " + A#N0505.C2#A_CACQ" & sSrcDIM & " + A#N0507.C2#A_CACQ" & sSrcDIM & _
        "+ A#N0508.C2#A_CACQ" & sSrcDIM & " + A#N0512.C2#A_CACQ" & sSrcDIM & " + A#N0513.C2#A_CACQ" & sSrcDIM & " - A#N0501.C2#D_CACQ" & sSrcDIM & " - A#N0502.C2#D_CACQ" & sSrcDIM & " - A#N0503.C2#D_CACQ" & sSrcDIM & " - A#N0504.C2#D_CACQ" & sSrcDIM & _
        "- A#N0505.C2#D_CACQ" & sSrcDIM & " - A#N0507.C2#D_CACQ" & sSrcDIM & " - A#N0508.C2#D_CACQ" & sSrcDIM & " - A#N0512.C2#D_CACQ" & sSrcDIM & " - A#N0513.C2#D_CACQ" & sSrcDIM & " - A#A115.C2#ACQTOT" & sSrcDIM & " - A#A116.C2#ACQTOT" & sSrcDIM

    HS.Exp "A#NC0120" & sDestPOV & " = A#N0501.C2#A_CSLD" & sSrcDIM & " + A#N0502.C2#A_CSLD" & sSrcDIM & " + A#N0503.C2#A_CSLD" & sSrcDIM & " + A#N0504.C2#A_CSLD" & sSrcDIM & " + A#N0505.C2#A_CSLD" & sSrcDIM & " + A#N0507.C2#A_CSLD" & sSrcDIM & _
        "+ A#N0508.C2#A_CSLD" & sSrcDIM & " + A#N0512.C2#A_CSLD" & sSrcDIM & " + A#N0513.C2#A_CSLD" & sSrcDIM & " - A#N0501.C2#D_CSLD" & sSrcDIM & " - A#N0502.C2#D_CSLD" & sSrcDIM & " - A#N0503.C2#D_CSLD" & sSrcDIM & " - A#N0504.C2#D_CSLD" & sSrcDIM & _
        "- A#N0505.C2#D_CSLD" & sSrcDIM & " - A#N0507.C2#D_CSLD" & sSrcDIM & " - A#N0508.C2#D_CSLD" & sSrcDIM & " - A#N0512.C2#D_CSLD" & sSrcDIM & " - A#N0513.C2#D_CSLD" & sSrcDIM & " - A#A115.C2#DISPBUSINTOT" & sSrcDIM & " - A#A116.C2#DISPBUSINTOT" & sSrcDIM

    HS.Exp "A#NC0660" & sDestPOV & " = A#N0601.C2#A_CACQ" & sSrcDIM & " - A#N0601.C2#D_CACQ" & sSrcDIM & " - A#A122.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0661" & sDestPOV & " = A#N0601.C2#A_CSLD" & sSrcDIM & " - A#N0601.C2#D_CSLD" & sSrcDIM & " - A#A122.C2#DISPBUSINTOT" & sSrcDIM
    HS.Exp "A#NC0662" & sDestPOV & " = A#N0602.C2#A_CACQ" & sSrcDIM & " - A#N0602.C2#D_CACQ" & sSrcDIM & " - A#A125.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0663" & sDestPOV & " = A#N0602.C2#A_CSLD" & sSrcDIM & " - A#N0602.C2#D_CSLD" & sSrcDIM & " - A#A125.C2#DISPBUSINTOT" & sSrcDIM
    HS.Exp "A#NC0664" & sDestPOV & " = A#N0603.C2#A_CACQ" & sSrcDIM & " - A#N0603.C2#D_CACQ" & sSrcDIM & " - A#A135.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0665" & sDestPOV & " = A#N0603.C2#A_CSLD" & sSrcDIM & " - A#N0603.C2#D_CSLD" & sSrcDIM & " - A#A135.C2#DISPBUSINTOT" & sSrcDIM
    HS.Exp "A#NC0666" & sDestPOV & " = A#N0605.C2#A_CACQ" & sSrcDIM & " - A#N0605.C2#D_CACQ" & sSrcDIM & " - A#A155.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0667" & sDestPOV & " = A#N0605.C2#A_CSLD" & sSrcDIM & " - A#N0605.C2#D_CSLD" & sSrcDIM & " - A#A155.C2#DISPBUSINTOT" & sSrcDIM
    HS.Exp "A#NC0668" & sDestPOV & " = A#N0606.C2#A_CACQ" & sSrcDIM & " - A#N0606.C2#D_CACQ" & sSrcDIM & " - A#A157.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0669" & sDestPOV & " = A#N0606.C2#A_CSLD" & sSrcDIM & " - A#N0606.C2#D_CSLD" & sSrcDIM & " - A#A157.C2#DISPBUSINTOT" & sSrcDIM

    HS.Exp "A#NC0720" & sDestPOV & " = A#N0701.C2#A_CACQ" & sSrcDIM & " - A#N0701.C2#D_CACQ" & sSrcDIM & " - A#A126.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0721" & sDestPOV & " = A#N0701.C2#A_CSLD" & sSrcDIM & " - A#N0701.C2#D_CSLD" & sSrcDIM & " - A#A126.C2#DISPBUSINTOT" & sSrcDIM
    HS.Exp "A#NC0723" & sDestPOV & " = A#N0702.C2#A_CACQ" & sSrcDIM & " - A#N0702.C2#D_CACQ" & sSrcDIM & " - A#A136.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC0724" & sDestPOV & " = A#N0702.C2#A_CSLD" & sSrcDIM & " - A#N0702.C2#D_CSLD" & sSrcDIM & " - A#A136.C2#DISPBUSINTOT" & sSrcDIM

    For Each sAcc In Array("N0906", "N0902", "N0903", "N0905", "N0901")
        If CInt(IntYear) >= 2021 And sAcc = "N0901" Then

        Else
            Hs.Exp "A#" & sAcc & ".C2#BV" & sDestDIM & " = A#" & sAcc & ".C2#SHAREHIST." & StrPrevScenBEGBAL
        End If

            If sAcc = "N0902" Or sAcc = "N0906" Then
                Hs.Exp "A#" & sAcc & ".C2#EQV" & sDestDIM & " = A#" & sAcc & ".C2#EQUITYADJ." & StrPrevScenBEGBAL
            ElseIf sAcc <> "N0901" And (CInt(IntYear) > 2021 Or (CInt(IntYear) = 2021 And IntCurPeriodNum > 3)) Then
                Hs.Exp "A#" & sAcc & ".C2#EQV" & sDestDIM & " = A#" & sAcc & ".C2#EQUITYADJ." & StrPrevScenBEGBAL
            End If

    Next

    If CInt(IntYear) > FirstYearWithData Then
        HS.Clear "A#N0906.C1#[None].C2#SACNI.C3#INP"
        HS.Exp "A#N0906.C2#SACNI" & sDestDIM & " = A#R846.C2#AssCo_Active" & sSrcDIM & " + A#R846.C2#AssCo_NonActive" & sSrcDIM
        HS.Clear "A#N0902.C1#[None].C2#SACNI.C3#INP"
        HS.Exp "A#N0902.C2#SACNI" & sDestDIM & " = A#R846.C2#JV_Active" & sSrcDIM & " + A#R846.C2#JV_NonActive" & sSrcDIM
    End If

    HS.Exp "A#NC0912" & sDestPOV & " = A#N0904.C2#RECLASS" & sSrcDIM & " + A#N0904.C2#RECLASSEQ" & sSrcDIM

    HS.Exp "A#NC0910" & sDestPOV & " = A#A166A" & sSrcPOV & " + A#A167A" & sSrcPOV & " - A#N0910" & sSrcPOV
    HS.Exp "A#NC0911" & sDestPOV & " = A#A166E" & sSrcPOV & " + A#A167E" & sSrcPOV & " - A#N0911" & sSrcPOV

    HS.Exp "A#NC0913" & sDestPOV & " = A#N0910.C2#INCR" & sSrcDIM & " - A#OC12" & sSrcPOV
    HS.Exp "A#NC0914" & sDestPOV & " = A#N0911.C2#INCR" & sSrcDIM & " - A#OC13" & sSrcPOV
    HS.Exp "A#NC0915" & sDestPOV & " = A#N0910.C2#CACQ" & sSrcDIM & " - A#N0910.C2#CACQEQ" & sSrcDIM & " - A#A171.C2#ACQ" & sSrcDIM
    HS.Exp "A#NC0916" & sDestPOV & " = A#N0911.C2#CACQ" & sSrcDIM & " - A#A172.C2#ACQ" & sSrcDIM

    HS.Exp "A#NC0918" & sDestPOV & " = A#N0911.C2#DECR" & sSrcDIM & " - A#DC13" & sSrcPOV
    HS.Exp "A#NC0919" & sDestPOV & " = A#N0910.C2#CSLD" & sSrcDIM & " - A#N0910.C2#CSLDEQ" & sSrcDIM & " - A#A171.C2#DISPBUSIN" & sSrcDIM
    HS.Exp "A#NC0920" & sDestPOV & " = A#N0911.C2#CSLD" & sSrcDIM & " - A#A172.C2#DISPBUSIN" & sSrcDIM

    HS.Exp "A#SHAREBAL_N0910" & sDestPOV & " = A#A166A" & sSrcPOV & " + A#A167A" & sSrcPOV
    HS.Exp "A#SHAREBAL_N0911" & sDestPOV & " = A#A166E" & sSrcPOV & " + A#A167E" & sSrcPOV

    HS.Exp "A#NC1006" & sDestPOV & " = A#N1005.C2#FININV" & sSrcDIM & " - A#A410" & sSrcPOV
    HS.Exp "A#NC1007" & sDestPOV & " = A#N1015.C2#FININV" & sSrcDIM & " - A#A415" & sSrcPOV

    HS.Exp "A#N1121" & sDestPOV & " = A#A360E" & sSrcPOV
    HS.Exp "A#N1122" & sDestPOV & " = A#A315" & sSrcPOV
    HS.Exp "A#N1104" & sDestPOV & " = A#A357" & sSrcPOV
    HS.Exp "A#N1111" & sDestPOV & " = A#A305E" & sSrcPOV
    HS.Exp "A#N1112" & sDestPOV & " = A#A325" & sSrcPOV

    HS.Exp "A#NC1114" & sDestPOV & " = A#N1114" & sSrcPOV & " - A#A360E" & sSrcPOV & " - A#A315" & sSrcPOV & " - A#A355E" & sSrcPOV & " - A#A365E" & sSrcPOV & " - A#A357" & sSrcPOV

    If CInt(IntCurPeriodNum) = 12 Then
        HS.Clear "A#N1325.C1#[None].C2#[None].C3#INP.C4#[None]"
        HS.Exp "A#N1325" & sDestPOV & " = A#L245" & sSrcPOV
        HS.Clear "A#N1326.C1#[None].C2#[None].C3#INP.C4#[None]"
        HS.Exp "A#N1326" & sDestPOV & " = A#A181" & sSrcPOV
    End If

    HS.Exp "A#NC1320" & sDestPOV & " = A#N1320" & sSrcPOV & " - A#N1327" & sSrcPOV
    HS.Exp "A#NC1380" & sDestPOV & " = A#N1380" & sSrcPOV & " - A#N13_Assets.C2#PENS" & sSrcDIM

    If CInt(IntCurPeriodNum) = 12 Then
        If CInt(IntYear) >= 2019 Then
            HS.Clear "A#N13_Assets.C2#PS10.C3#INP"

                HS.Exp "A#N13_Assets.C2#PS10" & sDestDIM & ".C3#INP = A#N13_Assets.C2#CUSTOM2_TOP."&StrPrevScenBEGBAL

            HS.Clear "A#N13_Assets.C1#[None].C2#PS24.C3#Inp.C4#[None].I#[ICP None]"
            HS.Exp "A#N13_Assets.C2#PS24" & sDestDIM & " = A#N02111" & sSrcPOV & " + A#N02211" & sSrcPOV
        End If

        HS.Exp "A#N13_Assets.C2#PS94" & sDestDIM & " = A#N13_Assets.C2#PENS" & sSrcDIM & " - (A#N1302" & sSrcPOV & " + A#N1311" & sSrcPOV & " + A#N13011" & sSrcPOV & ")"
        HS.Exp "A#N13_Assets.C2#PS97" & sDestDIM & " = A#A181" & sSrcPOV

        If CInt(IntYear) >= 2019 Then
            HS.Clear "A#N13_Liabilities.C2#PS10.C3#Inp"

                HS.Exp "A#N13_Liabilities.C2#PS10" & sDestDIM & " = A#N13_Liabilities.C2#CUSTOM2_TOP." & StrPrevScenBEGBAL

            HS.Clear "A#N13_Liabilities.C1#[None].C2#PS21.C3#Inp.C4#[None].I#[ICP None]"
            HS.Exp "A#N13_Liabilities.C2#PS21" & sDestDIM & " = A#N0210" & sSrcPOV & " + A#N0220" & sSrcPOV

            HS.Clear "A#N13_Liabilities.C1#[None].C2#PS24.C3#Inp.C4#[None].I#[ICP None]"
            HS.Exp "A#N13_Liabilities.C2#PS24" & sDestDIM & " = A#N0211" & sSrcPOV & " + A#N0221" & sSrcPOV

            HS.Clear "A#N13_Liabilities.C1#[None].C2#PS23.C3#Inp.C4#[None].I#[ICP None]"
            HS.Exp "A#N13_Liabilities.C2#PS23" & sDestDIM & " = A#N0215" & sSrcPOV & " + A#N0225" & sSrcPOV

            HS.Clear "A#N13_Liabilities.C1#[None].C2#PS25.C3#Inp.C4#[None].I#[ICP None]"
            HS.Exp "A#N13_Liabilities.C2#PS25" & sDestDIM & " = A#N0216" & sSrcPOV
        End If

        If CInt(IntYear) >= 2021 Then

            HS.Exp "A#N1390B" & sDestPOV & " = (A#N1325" & sSrcPOV & " - A#N1326" & sSrcPOV & ") * A#N1390" & sSrcPOV
        End If

        HS.Exp "A#N13_Liabilities.C2#PS94" & sDestDIM & " = A#N13_Liabilities.C2#PENS" & sSrcDIM & " - (A#N1301" & sSrcPOV & " + A#N1306" & sSrcPOV & " + A#N1310" & sSrcPOV & " + A#N1315" & sSrcPOV & ")"
        HS.Exp "A#N13_Liabilities.C2#PS97" & sDestDIM & " = A#L245" & sSrcPOV
        HS.Exp "A#N13_Liabilities.C2#PS93" & sDestDIM & " = A#L173.P#LAST.Y#PRIOR" & sSrcPOV

        HS.Exp "C2#PS98 = C2#PENS - C2#PS97"
        HS.Exp "C2#PS95 = - C2#PS30"

        HS.Exp "A#N13_Assets.C2#PS96 = A#N13_Assets.C2#PS95 + A#N13_Assets.C2#PS93"

        HS.Exp "A#N13_Assets.C2#PS100" & sDestDIM & " = A#N13_Assets.C2#PS96" & sSrcDIM
    End If

    If Int(IntYear) >= 2015 Then

        HS.Clear "C2#PROV_OPE.C3#INP"
        HS.Exp "C2#PROV_OPE.C3#INP=C2#PROV." & StrPrevScenBEGBAL
    End If

    HS.Exp "A#NC1566" & sDestPOV & " = A#L246.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " + A#L424.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " - A#N01510.C2#PROV_OPE" & sSrcDIM
    HS.Exp "A#NC1567" & sDestPOV & " = A#L246.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " + A#L247.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " + A#L425.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " + A#L424.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " - A#N01500.C2#PROV_OPE" & sSrcDIM

        HS.Exp "A#N1560" & sDestPOV & " = A#L250" & sSrcPOV
        HS.Exp "A#N1561" & sDestPOV & " = A#L441" & sSrcPOV

    HS.Exp "A#NC1563" & sDestPOV & " = A#N01510" & sSrcPOV & " - A#L246" & sSrcPOV & " - A#L424" & sSrcPOV

    HS.Exp "A#NC1564" & sDestPOV & " = A#N01500" & sSrcPOV & " - A#L246" & sSrcPOV & " - A#L247" & sSrcPOV & " -A#L424" & sSrcPOV & " - A#L425" & sSrcPOV

    HS.Exp "A#NC1568" & sDestPOV & " = A#N01510.C2#PROV_ACQ" & sSrcDIM & " - A#L246.C2#ACQTOT" & sSrcDIM & " - A#L424.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC1569" & sDestPOV & " = A#N01500.C2#PROV_ACQ" & sSrcDIM & " - A#N01510.C2#PROV_ACQ" & sSrcDIM & " - A#L247.C2#ACQTOT" & sSrcDIM & " - A#L425.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC1570" & sDestPOV & " = A#N01510.C2#PROV_SOL" & sSrcDIM & " - A#L246.C2#DISPBUSINTOT" & sSrcDIM & " - A#L424.C2#DISPBUSINTOT" & sSrcDIM
    HS.Exp "A#NC1571" & sDestPOV & " = A#N01500.C2#PROV_SOL" & sSrcDIM & " - A#N01510.C2#PROV_SOL" & sSrcDIM & " - A#L247.C2#DISPBUSINTOT" & sSrcDIM & " - A#L425.C2#DISPBUSINTOT" & sSrcDIM

    HS.Exp "A#NC1565" & sDestPOV & " = A#N1562" & sSrcPOV & " - A#N01500" & sSrcPOV

    HS.Exp "A#NC1582" & sDestPOV & " = A#N01500.C2#PROV_ACQ" & sSrcDIM & " - A#L250.C2#ACQTOT" & sSrcDIM & " - A#L441.C2#ACQTOT" & sSrcDIM
    HS.Exp "A#NC1583" & sDestPOV & " = A#N01500.C2#PROV_SOL" & sSrcDIM & " - A#L250.C2#DISPBUSINTOT" & sSrcDIM & " - A#L441.C2#DISPBUSINTOT" & sSrcDIM

    HS.Exp "A#NC1581" & sDestPOV & " = -A#A325" & sSrcPOV & " - A#N15088.C2#PROV_TOTAL" & sSrcDIM
    HS.Exp "A#NC1580" & sDestPOV & " = A#A325.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & StrPrevScenBEGBAL & " + A#N01575.C2#PROV_OPE" & sSrcDIM
    HS.Exp "A#NC1579" & sDestPOV & " = A#N01575" & sSrcPOV & " + A#A325" & sSrcPOV

    If CInt(IntYear) < 2019 Or (CInt(IntYear) = 2019 And IntCurCalcPeriodNum < 9) Then
        HS.Exp "A#N1572" & sDestPOV & " = A#N01575.C2#PROV_USE" & sSrcDIM
        HS.Exp "A#N1573" & sDestPOV & " = A#N01575.C2#PROV_REV" & sSrcDIM
        HS.Exp "A#N1574" & sDestPOV & " = A#N01575.C2#PROV_INC" & sSrcDIM
    End If
    HS.Exp "A#N15172" & sDestPOV & " = A#N01575.C2#PROV_USE" & sSrcDIM
    HS.Exp "A#N15173" & sDestPOV & " = A#N01575.C2#PROV_REV" & sSrcDIM
    HS.Exp "A#N15174" & sDestPOV & " = A#N01575.C2#PROV_INC" & sSrcDIM

    If CInt(IntYear) > 2020 Then
        HS.Exp "A#N15179" & sDestPOV & " = A#N01575.C2#PROV_RECUR" & sSrcDIM
    End If
    HS.Exp "A#NC1578" & sDestPOV & " = A#RM35" & sSrcPOV & " - A#N15178" & sSrcPOV

    For each NoteAcc in HS.Account.List("N15088","[Base]")
        sARccount = GetUD(NoteAcc, "Account", "PrimaryAcc")

         HS.Exp "A#" & NoteAcc & sDestDIM & ".C2#REC_GROSS = A#" & sARccount & sSrcPOV
    Next

    If CInt(IntYear) = 2018 Then
        HS.Exp "A#N17275" & sDestPOV & " = A#N1727" & sSrcPOV & " - A#N17271" & sSrcPOV & " - A#N17272" & sSrcPOV
    End If

    HS.Exp "A#NC2123" & sDestPOV & " =A#N2114" & sSrcPOV & " + A#N2116" & sSrcPOV & " - A#N0105" & sSrcPOV

    HS.Clear "A#N2107"
    HS.Exp "A#N2107.C3#INP = A#RM56I.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"

    HS.Clear "A#N2118"
    HS.Exp "A#N2118.C3#INP = A#RM58I.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"

    HS.Exp "A#N2132" & sDestPOV & " = - A#RM59" & sSrcPOV
    HS.Exp "A#N2133" & sDestPOV & " = - A#RM60" & sSrcPOV

        HS.Exp "A#N2239" & sDestPOV & " = A#N2134" & sSrcPOV
        HS.Exp "A#N2259" & sDestPOV & " = A#N2102" & sSrcPOV
        HS.Exp "A#N2241" & sDestPOV & " = A#N2231" & sSrcPOV & "+ A#N2251" & sSrcPOV
        HS.Exp "A#N2246" & sDestPOV & " = A#N2236" & sSrcPOV & "+ A#N2256" & sSrcPOV
        HS.Exp "A#N2249" & sDestPOV & " = A#N2239" & sSrcPOV & "+ A#N2259" & sSrcPOV

    CalcAccs = HS.Account.List("N2248","[Base]")
    CalcAccs = Filter(CalcAccs,"N2247",false)
    For each Acc In CalcAccs
        Suffix = Right(Acc,1)
        HS.Exp "A#"&Acc&" = A#N225"&Suffix& " + A#N223"&Suffix
    Next

    HS.Exp "A#NC2502" & sDestPOV & " = A#RM68" & sSrcPOV & "- A#N0520.C2#D_DEPRE" & sSrcDIM & " - A#N0610.C2#D_DEPRE" & sSrcDIM & " - A#N0704.C2#D_DEPRE" & sSrcDIM &_
        "-A#N0520.C2#D_IMPT" & sSrcDIM & " - A#N0610.C2#D_IMPT" & sSrcDIM & " - A#N0704.C2#D_IMPT" & sSrcDIM

    HS.Exp "A#NC2505" & sDestPOV & " = A#OC65" & sSrcPOV & "- A#DC65" & sSrcPOV & "- A#N0520.C2#A_INT" & sSrcDIM & " + A#N0520.C2#D_INT" & sSrcDIM & " - A#N0610.C2#A_INT" & sSrcDIM & " + A#N0610.C2#D_INT" & sSrcDIM & " - A#N0704.C2#A_INT" & sSrcDIM & " + A#N0704.C2#D_INT" & sSrcDIM

    HS.Exp "A#NC2506" & sDestPOV & " = -A#DC67" & sSrcPOV & "- A#N0520.C2#A_SALE" & sSrcDIM & " - A#N0520.C2#D_SALE" & sSrcDIM & " - A#N0513.C2#A_SALE" & sSrcDIM & " - A#N0513.C2#D_SALE" & sSrcDIM & " - A#N0610.C2#A_SALE" & sSrcDIM & " - A#N0610.C2#D_SALE" & sSrcDIM & " - A#N0704.C2#A_SALE" & sSrcDIM & " - A#N0704.C2#D_SALE" & sSrcDIM

    HS.Exp "A#NC2508" & sDestPOV & " = A#OC66" & sSrcPOV & "- A#N0520.C2#A_CACQ" & sSrcDIM & " + A#N0520.C2#D_CACQ" & sSrcDIM & " - A#N0610.C2#A_CACQ" & sSrcDIM & " + A#N0610.C2#D_CACQ" & sSrcDIM & " - A#N0704.C2#A_CACQ" & sSrcDIM & " + A#N0704.C2#D_CACQ" & sSrcDIM

    HS.Exp "A#NC2509" & sDestPOV & " = A#DC66" & sSrcPOV & " - A#N0520.C2#A_CSLD" & sSrcDIM & " + A#N0520.C2#D_CSLD" & sSrcDIM & " - A#N0610.C2#A_CSLD" & sSrcDIM & " + A#N0610.C2#D_CSLD" & sSrcDIM & " - A#N0704.C2#A_CSLD" & sSrcDIM & " + A#N0704.C2#D_CSLD" & sSrcDIM

    HS.Exp "A#NC2507" & sDestPOV & " = A#CF160" & sSrcPOV & " - A#DC20" & sSrcPOV & " + A#DC12" & sSrcPOV

    HS.Exp "A#NC0655" & sDestPOV & " = A#N0506.C2#A_INCI" & sSrcDIM & " + A#N0605.C2#A_INCI" & sSrcDIM & " + A#N0606.C2#A_INCI" & sSrcDIM & " + A#R817" & sSrcPOV

    If CInt(IntYear) > 2020 Then

        AccListOpening5to8 = Array("N0501", "N0502", "N0503", "N0504", "N0505", "N0506", "N0507", "N0508", "N0512", "N0601", "N06021", "N06022", "N0603", "N0605", "N0606", "N0701", "N0702", "N0513")
    Else
        AccListOpening5to8 = Array("N0501", "N0502", "N0503", "N0504", "N0505", "N0506", "N0507", "N0508", "N0510", "N0512", "N0601", "N06021", "N06022", "N0603", "N0605", "N0606", "N0701", "N0702", "N0513")
    End If
    For Each Acc In AccListOpening5to8
        Hs.Exp  "A#" & Acc & sDestDIM & ".C2#A_ACQ = A#" & Acc & ".C2#A." & StrPrevScenBEGBAL
        Hs.Exp  "A#" & Acc & sDestDIM & ".C2#D_ACD = A#" & Acc & ".C2#D." & StrPrevScenBEGBAL
    Next

    If IntYear < 2018 Then
        HS.Exp "A#N3008" & sDestPOV & " = A#RM57" & sSrcPOV
        HS.Exp "A#NC3010" & sDestPOV & " = A#N3010" & sSrcPOV & " - A#N3020" & sSrcPOV
    Else
        HS.Exp "A#NC3010" & sDestPOV & " = A#RM57" & sSrcPOV & " - A#N3020" & sSrcPOV
    End If

    For each Acc in HS.Account.List("NOTE14","[Base]")
        SourceAcc = Mid(Acc,5,Len(Acc)-4)

        HS.Exp "A#" & Acc & sDestDIM & ".C2#RC10 = A#" & SourceAcc & ".P#Last.Y#Prior" & sSrcPOV

        HS.Exp "A#" & Acc & sDestDIM & ".C2#RC33 = A#" & SourceAcc & sSrcDIM & ".C2#ACQ"

        HS.Exp "A#" & Acc & sDestDIM & ".C2#RC34 = A#" & SourceAcc & sSrcDIM & ".C2#DISPBUSIN"

        HS.Exp "A#" & Acc & sDestDIM & ".C2#RC150 = A#" & SourceAcc & sSrcPOV

        HS.Exp "A#" & Acc & sDestDIM & ".C2#RC200 = A#" & SourceAcc & sSrcPOV & "- A#" & Acc & sSrcPOV
    Next

    HS.Clear "A#N19_L325E.C2#LR34"
    Hs.Exp "A#N19_L325E.C2#LR34" & sDestDIM & " = -A#N19_L215E.C2#LR34" & sSrcDIM
    HS.Clear "A#N19_L326.C2#LR34"
    Hs.Exp "A#N19_L326.C2#LR34" & sDestDIM & " = -A#N19_L225.C2#LR34" & sSrcDIM

    For each Acc in HS.Account.List("NOTE19","[Base]")
        SourceAcc = Mid(Acc,5,Len(Acc)-4)

        If SourceAcc <> "L211" and SourceAcc <> "L311" Then

            If CInt(IntYear) < 2019 Then
                HS.Exp "A#" & Acc & sDestDIM & ".C2#LR10 = A#" & SourceAcc & ".P#Last.Y#Prior" & sSrcPOV
            Else

                HS.Exp "A#" & Acc & sDestDIM & ".C2#LR10 = A#" & SourceAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & StrPrevScenBEGBAL

            End If

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR25 = A#" & SourceAcc & sSrcDIM & ".C2#ACQ"

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR26 = A#" & SourceAcc & sSrcDIM & ".C2#DISPBUSIN"

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR150 = A#" & SourceAcc & sSrcPOV

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR200 = A#" & SourceAcc & sSrcPOV & "- A#" & Acc & sSrcDIM & ".C2#CHLOAN"
        End if
    Next

    If CInt(IntYear) > 2019 or (CInt(IntYear) = 2019 and CInt(IntCurPeriodNum) >= 6) Then
        HS.Exp "A#N19_L225.C2#LR310" & sDestDIM & " = A#N19_L225.C2#LR300" & sSrcDIM & " - A#N19_L225.C2#LR100" & sSrcDIM
        HS.Exp "A#N19_L326.C2#LR310" & sDestDIM & " = A#N19_L326.C2#LR300" & sSrcDIM & " - A#N19_L326.C2#LR100" & sSrcDIM
    End If

    HS.Exp "A#NC3310" & sDestPOV & " = A#N3310" & sSrcPOV & " - A#R852I" & sSrcPOV

    HS.Exp "A#NC3320" & sDestPOV & " = A#N3320" & sSrcPOV & " - A#R853I" & sSrcPOV

    If CInt(IntCurPeriodNum) = 12 Then

        HS.Exp "A#N35143" & sDestPOV & " = A#N0704.C2#D_DEPRE" & sSrcDIM
        HS.Exp "A#N35145" & sDestPOV & " = A#N0704.C2#D_IMPT" & sSrcDIM

        HS.Exp "A#N35141" & sDestPOV & " = A#R814" & sSrcPOV

        HS.Exp "A#N35171" & sDestPOV & " = A#N1731" & sSrcPOV
        HS.Exp "A#N35172" & sDestPOV & " = A#N1732" & sSrcPOV
        HS.Exp "A#N35173" & sDestPOV & " = A#N1719" & sSrcPOV
        HS.Exp "A#N35174" & sDestPOV & " = A#N1713" & sSrcPOV

    End If

    HS.Exp "A#NC35181" & sDestPOV & " = A#N35181" & sSrcPOV & " - A#N1730" & sSrcPOV

    If CInt(IntCurPeriodNum) = 12 Then
        HS.Exp "A#N35221" & sDestPOV & " = A#N2931" & sSrcPOV
        HS.Exp "A#N35222" & sDestPOV & " = A#N2932" & sSrcPOV
        HS.Exp "A#N35231" & sDestPOV & " = A#N2249" & sSrcPOV

    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        HS.Exp "A#N3621" & sDestPOV & " = A#N2104" & sSrcPOV
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        HS.Exp "A#N3710.C2#[None].C3#INP.C4#[None].I#[ICP None] = A#RM61.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP None] + A#RM66.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP None]" & _
        "+ A#RM57.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP None] + A#RM40.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP None]"

        If CInt(IntYear) > 2024 or (CInt(IntYear) = 2024 and CInt(IntCurPeriodNum) >= 12) Then
            HS.Exp "A#N3721.C2#[None].C3#INP.C4#[None].I#[ICP None] = A#RM53.C2#CUSTOM2_TOP.C3#C3_NET_OF_ACQ.C4#CUSTOM4_TOP.I#[ICP Top] - A#N3730.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
        Else
            HS.Exp "A#N3721.C2#[None].C3#INP.C4#[None].I#[ICP None] = A#RM53.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top] - A#N3730.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
        End If
    End If
End Sub

Sub NotesAll(StrPrevScenBEGBAL, IntCurPeriodNum, IntYear, GL_Ent, LegalEntForStrEntity, StrEntity, StrValue, bIsBase,TaxGroupEntity,SuperGLCalcActive,bDoTaxNotesCalcs)

    sSrcPOV = ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"
    sDestPOV = ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]"

    sSrcDIM = ".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"
    sDestDIM = ".C1#[None].C3#INP.C4#[None].I#[ICP None]"

    For each Acc in array("N19_L305E","N19_L455E")
        SourceAcc = Mid(Acc,5,Len(Acc)-4)

        If StrValue = "[Elimination]" Then

                HS.Exp "A#" & Acc & sDestDIM & ".C2#LR10 = A#" & SourceAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & StrPrevScenBEGBAL

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR25 = A#" & SourceAcc & sSrcDIM & ".C2#ACQ"

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR26 = A#" & SourceAcc & sSrcDIM & ".C2#DISPBUSIN"

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR90 = A#" & SourceAcc & sSrcPOV & " - A#" & Acc & sSrcDIM & ".C2#LR10"
        End If

        If bIsBase = False Then

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR150 = A#" & SourceAcc & sSrcPOV

            HS.Exp "A#" & Acc & sDestDIM & ".C2#LR200 = A#" & SourceAcc & sSrcPOV & " - A#" & Acc & sSrcDIM & ".C2#CHLOAN"
        End if
    Next

    If bDoTaxNotesCalcs = True And CInt(IntYear) < 2024 Then

        HS.Exp "A#N3C_5095L.C3#INP = A#N3C_4095A.C3#CUSTOM3_TOP"

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            If StrValue = "<Entity Currency>" and bIsBase = True Then
                HS.Exp "A#N3C_4300" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A" & sSrcPOV, StrEntity, TaxGroupEntity) & "-" & SumLegalBasesToGLEnt("A#N3C_5100L" & sSrcPOV, StrEntity, TaxGroupEntity)
            End If
        Else
            HS.Exp "A#N3C_4300" & sDestPOV & " = A#N3C_4100A" & sSrcPOV & " - A#N3C_5100L" & sSrcPOV
        End If

        If GL_Ent = True and StrValue = "<Entity Currency>" and bIsBase = True Then
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                LegalLevelEntity = TaxGroupEntity

                HS.Exp "A#N3C_NC3095" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A" & sSrcPOV, StrEntity, TaxGroupEntity) & "-" & SumLegalBasesToGLEnt("A#A195" & sSrcPOV, StrEntity, TaxGroupEntity)
                HS.Exp "A#N3C_NC3097" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_5100L" & sSrcPOV, StrEntity, TaxGroupEntity) & "-" & SumLegalBasesToGLEnt("A#L295" & sSrcPOV, StrEntity, TaxGroupEntity)
            Else
                LegalLevelEntity = LegalEntForStrEntity

                HS.Exp "A#N3C_NC3095" & sDestPOV & " = A#N3C_4100A" & sSrcPOV & " - " & SumLegalBasesToGLEnt("A#A195" & sSrcPOV, StrEntity, LegalEntForStrEntity)
                HS.Exp "A#N3C_NC3097" & sDestPOV & " = A#N3C_5100L" & sSrcPOV & " - " & SumLegalBasesToGLEnt("A#L295" & sSrcPOV, StrEntity, LegalEntForStrEntity)
            End If
        End If

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            If StrValue = "<Entity Currency>" and bIsBase = True Then
                HS.Exp "A#N3C_NC3093" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4100A" & sSrcPOV, StrEntity, TaxGroupEntity) & "-" & SumLegalBasesToGLEnt("A#N3C_4200" & sSrcPOV, StrEntity, TaxGroupEntity)
                HS.Exp "A#N3C_NC3094" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_5100L" & sSrcPOV, StrEntity, TaxGroupEntity) & "-" & SumLegalBasesToGLEnt("A#N3C_5200" & sSrcPOV, StrEntity, TaxGroupEntity)
            End If
        Else
            HS.Exp "A#N3C_NC3093" & sDestPOV & " = A#N3C_4100A" & sSrcPOV & " - A#N3C_4200" & sSrcPOV
            HS.Exp "A#N3C_NC3094" & sDestPOV & " = A#N3C_5100L" & sSrcPOV & " - A#N3C_5200" & sSrcPOV
        End If

        If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
            If StrValue = "<Entity Currency>" and bIsBase = True Then
                HS.Exp "A#N3C_NC3103" & sDestPOV & " = "&SumLegalBasesToGLEnt("A#N3C_4100A.C2#TAX_RECLASS" & sSrcDIM,StrEntity, TaxGroupEntity)
                HS.Exp "A#N3C_NC3104" & sDestPOV & " = "&SumLegalBasesToGLEnt("A#N3C_5100L.C2#TAX_RECLASS" & sSrcDIM,StrEntity, TaxGroupEntity)
            End If
        Else
            HS.Exp "A#N3C_NC3103" & sDestPOV & " = A#N3C_4100A.C2#TAX_RECLASS" & sSrcDIM
            HS.Exp "A#N3C_NC3104" & sDestPOV & " = A#N3C_5100L.C2#TAX_RECLASS" & sSrcDIM
        End If

        If CInt(IntYear) > (FirstYearWithData+1) Then

            If GL_Ent = True and StrValue = "<Entity Currency>" and bIsBase = True Then
                If TaxGroupEntity <> "" and SuperGLCalcActive = True Then
                    Hs.Exp  "A#N3C_NC3099" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#A195.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None].I#[ICP Top]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)& " - "&SumLegalBasesToGLEnt("A#N3C_4100A.C2#TAX_OPE" & sSrcDIM, StrEntity, TaxGroupEntity)
                    Hs.Exp  "A#N3C_NC3100" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#L295.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None].I#[ICP Top]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)& " - "&SumLegalBasesToGLEnt("A#N3C_5100L.C2#TAX_OPE" & sSrcDIM, StrEntity, TaxGroupEntity)
                Else
                    Hs.Exp  "A#N3C_NC3099" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#A195.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None].I#[ICP Top]." & StrPrevScenBEGBAL, StrEntity, LegalEntForStrEntity) & " - A#N3C_4100A.C2#TAX_OPE" & sSrcDIM
                    Hs.Exp  "A#N3C_NC3100" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#L295.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None].I#[ICP Top]." & StrPrevScenBEGBAL, StrEntity, LegalEntForStrEntity) & " - A#N3C_5100L.C2#TAX_OPE" & sSrcDIM
                End If
            End If
        End If

        If CInt(IntYear) > CInt(FirstYearWithData) and StrValue = "<Entity Currency>" and bIsBase = True Then
            If TaxGroupEntity <> "" and SuperGLCalcActive = True Then

                HS.Exp "A#N3C_NC3098" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4060A.C2#TAX_CHGEQ" & sSrcDIM, StrEntity, TaxGroupEntity) & " - " & _
                    SumLegalBasesToGLEnt("A#N3C_5060L.C2#TAX_CHGEQ" & sSrcDIM, StrEntity, TaxGroupEntity) & " - " & _
                    SumLegalBasesToGLEnt("A#L174" & sSrcPOV, StrEntity, TaxGroupEntity) & " + " & _
                    SumLegalBasesToGLEnt("A#L174.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)

                HS.Exp "A#N3C_NC3096" & sDestPOV & " = " & SumLegalBasesToGLEnt("A#N3C_4065A.C2#TAX_CHGEQ" & sSrcDIM, StrEntity, TaxGroupEntity) & " - " & _
                    SumLegalBasesToGLEnt("A#N3C_5065L.C2#TAX_CHGEQ" & sSrcDIM, StrEntity, TaxGroupEntity) & " - " & _
                    SumLegalBasesToGLEnt("A#L177" & sSrcPOV, StrEntity, TaxGroupEntity) & " + " & _
                    SumLegalBasesToGLEnt("A#L177.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None]." & StrPrevScenBEGBAL, StrEntity, TaxGroupEntity)
            ElseIf GL_Ent = True Then

                HS.Exp "A#N3C_NC3098" & sDestPOV & " = (A#N3C_4060A.C2#TAX_CHGEQ" & sSrcDIM & "- A#N3C_5060L.C2#TAX_CHGEQ" & sSrcDIM & ")" & _
                    "- A#L174" & sSrcPOV & "+ A#L174.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None]." & StrPrevScenBEGBAL

                HS.Exp "A#N3C_NC3096" & sDestPOV & " = (A#N3C_4065A.C2#TAX_CHGEQ" & sSrcDIM & "- A#N3C_5065L.C2#TAX_CHGEQ" & sSrcDIM & ")" & _
                    "- A#L177" & sSrcPOV & "+ A#L177.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None]." & StrPrevScenBEGBAL
            End If
        End If
    End If

    HS.Exp "A#NC0547" & sDestPOV & " = A#N0520.C2#A_RECLASS" & sSrcDIM & " - A#N0520.C2#D_RECLASS" & sSrcDIM & " + A#N0513.C2#A_RECLASS" & sSrcDIM & " - A#N0513.C2#D_RECLASS" & sSrcDIM

    Call NoteACQ2Calcs("N0506", "A117", "OC09", "DC09", StrPrevScenBEGBAL)

    If CInt(IntYear) < 2021 Then

        HS.EXP "A#N0510" & sDestDIM & ".C2#C_EOP = A#A105" & sSrcPOV & " + A#A106" & sSrcPOV & " - A#N0510.C2#NOTE_ACQ2" & sSrcDIM
        Hs.Exp "A#N0510" & sDestDIM & ".C2#C_Balance = A#A105.C1#Custom1_Top.C2#Custom2_Top. " & StrPrevScenBEGBAL & " + A#A106.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL & " - A#N0510.C2#A_ACQ" & sSrcDIM & " + A#N0510.C2#D_ACD" & sSrcDIM
    End If

    If CInt(IntYear) < 2019 or (CInt(IntYear) = 2019 and CInt(IntCurPeriodNum) < 6) Then
        HS.EXP "A#NC0520.C2#C_EOP.C3#INP=A#A115.C1#Custom1_Top.C2#Custom2_Top.C3#CUSTOM3_TOP + A#A116.C1#Custom1_Top.C2#Custom2_Top.C3#CUSTOM3_TOP + A#A117.C1#Custom1_Top.C2#Custom2_Top.C3#CUSTOM3_TOP - A#N0520.C2#NOTE_ACQ2.C3#CUSTOM3_TOP"
        Hs.Exp  "A#NC0520.C2#C_Balance.C3#INP=A#A115.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL &_
        "+A#A116.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL & " +A#A117.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL & "-A#N0520.C2#A_ACQ+A#N0520.C2#D_ACD.C3#CUSTOM3_TOP"
    Else
        HS.EXP "A#NC0520" & sDestDIM & ".C2#C_EOP = A#A115" & sSrcPOV & " + A#A117" & sSrcPOV & " - A#N0520.C2#NOTE_ACQ2" & sSrcDIM
        Hs.Exp "A#NC0520" & sDestDIM & ".C2#C_Balance = A#A115.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL & " + A#A117.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL & "-A#N0520.C2#A_ACQ" & sSrcDIM & " + A#N0520.C2#D_ACD" & sSrcDIM
    End If

    HS.EXP "A#NC0520" & sDestDIM & ".C2#C_CAPEX = A#OC50" & sSrcPOV & " - A#N0520.C2#A_INCR" & sSrcDIM & " - A#N0520.C2#A_INCI" & sSrcDIM
    HS.EXP "A#NC0520" & sDestDIM & ".C2#C_DISPOSAL = A#DC50" & sSrcPOV & " - A#N0520.C2#A_DECR" & sSrcDIM & " + A#N0520.C2#D_DECR" & sSrcDIM

    HS.EXP "A#NC0513" & sDestDIM & ".C2#C_EOP = A#A116" & sSrcPOV & " - A#N0513.C2#NOTE_ACQ2" & sSrcDIM
    Hs.Exp "A#NC0513" & sDestDIM & ".C2#C_Balance = A#A116.C1#Custom1_Top.C2#Custom2_Top." & StrPrevScenBEGBAL & " - A#N0513.C2#A_ACQ" & sSrcDIM & " + A#N0513.C2#D_ACD" & sSrcDIM

    HS.Exp "A#NC0656" & sDestPOV & " = A#N0601.C2#A_RECLASS" & sSrcDIM & " - A#N0601.C2#D_RECLASS" & sSrcDIM & " + A#N0602.C2#A_RECLASS" & sSrcDIM & " - A#N0602.C2#D_RECLASS" & sSrcDIM & " + A#N0603.C2#A_RECLASS" & sSrcDIM & " - A#N0603.C2#D_RECLASS" & sSrcDIM & " + A#N0605.C2#A_RECLASS" & sSrcDIM & " + A#N0606.C2#A_RECLASS" & sSrcDIM

    Call NoteACQ2Calcs("N0601", "A122", "OC03", "DC03", StrPrevScenBEGBAL)

    Call NoteACQ2Calcs("NC0602", "A125", "OC04", "DC04", StrPrevScenBEGBAL)
    Call NoteACQ2Calcs("N0603", "A135", "OC06", "DC06", StrPrevScenBEGBAL)
    Call NoteACQ2Calcs("N0605", "A155", "OC18", "DC18", StrPrevScenBEGBAL)
    Call NoteACQ2Calcs("N0606", "A157", "OC19", "DC19", StrPrevScenBEGBAL)

    HS.Exp "A#NC0710" & sDestPOV & " = A#N0701.C2#A_RECLASS" & sSrcDIM & " - A#N0701.C2#D_RECLASS" & sSrcDIM & " + A#N0702.C2#A_RECLASS" & sSrcDIM & " - A#N0702.C2#D_RECLASS" & sSrcDIM

    Call NoteACQ2Calcs("N0701", "A126", "OC05", "DC05", StrPrevScenBEGBAL)
    Call NoteACQ2Calcs("N0702", "A136", "OC07", "DC07", StrPrevScenBEGBAL)

        For Each sAcc In Array("N1201", "N1202", "N1203", "N1208", "N1209")
            HS.Clear "A#" & sAcc & ".C2#WITH0_1"
        Next

        HS.Exp "A#N1201" & sDestDIM & ".C2#WITH0_1 = A#L325E" & sSrcPOV & " + A#L305E" & sSrcPOV
        HS.Exp "A#N1202" & sDestDIM & ".C2#WITH0_1 = A#L326" & sSrcPOV

        HS.Exp "A#N1208" & sDestDIM & ".C2#WITH0_1 = A#L345E" & sSrcPOV & " + A#L365E" & sSrcPOV

    HS.Exp "A#NC1226" & sDestPOV & " = A#N1201.C2#LTDEBT" & sSrcDIM & " - (A#L215E" & sSrcPOV & " + A#L325E" & sSrcPOV & " + A#L305E" & sSrcPOV & ")"
    HS.Exp "A#NC1227" & sDestPOV & " = A#N1202.C2#LTDEBT" & sSrcDIM & " - A#L225" & sSrcPOV & " - A#L326" & sSrcPOV

    HS.Exp "A#NC1229" & sDestPOV & " = A#N1208.C2#LTDEBT" & sSrcDIM & " - A#L265" & sSrcPOV & " - A#L255E" & sSrcPOV & " - A#L345E" & sSrcPOV & " - A#L365E" & sSrcPOV& " - A#L264" & sSrcPOV

    If IntCurPeriodNum = 12 Then

        HS.Exp "A#N13_Liabilities.C2#PS96 = A#N13_Liabilities.C2#PS95 + A#N13_Liabilities.C2#PS93 + A#N13_Liabilities.C2#PS99"

        HS.Exp "A#N13_Liabilities.C2#PS100" & sDestDIM & " = A#N13_Liabilities.C2#PS96" & sSrcDIM & " - A#L173" & sSrcPOV

    End If

    HS.Exp "A#N1612" & sDestPOV & " = A#L360E" & sSrcPOV
    HS.Exp "A#N1617" & sDestPOV & " = A#L345E" & sSrcPOV
    HS.Exp "A#N1619" & sDestPOV & " = A#L379" & sSrcPOV

    If hs.value.member = "[Elimination]" Then
        HS.Exp "A#N1621" & sDestPOV & " = A#L355E" & sSrcPOV & " + A#L365E" & sSrcPOV
    End if

    HS.Exp "A#NC1614" & sDestPOV & " = A#N1614" & sSrcPOV & " - A#L355E" & sSrcPOV & " - A#L379" & sSrcPOV & " - A#L360E" & sSrcPOV & " - A#L365E" & sSrcPOV

    HS.Exp "A#N0408" & sDestPOV & " = A#L348" & sSrcPOV
    HS.Exp "A#NC0404" & sDestPOV & " = A#N0404" & sSrcPOV & " - A#A315" & sSrcPOV & " + A#L348" & sSrcPOV

    HS.Exp "A#NC2121" & sDestPOV & " = A#N2110" & sSrcPOV & " - A#RM56" & sSrcPOV & " - A#RM56I" & sSrcPOV
    HS.Exp "A#NC2122" & sDestPOV & " = A#N2120" & sSrcPOV & " - A#RM58" & sSrcPOV & " - A#RM58I" & sSrcPOV

    HS.Exp "A#N2802" & sDestPOV & " = A#RM17" & sSrcPOV
    HS.Exp "A#N2803" & sDestPOV & " = A#RM59" & sSrcPOV

    N2807 = HS.GetCell("A#N2807" & sSrcPOV)
    If N2807 <> 0 Then
        N2801 = HS.GetCell("A#N2801" & sSrcPOV)
        If N2801 = 0 Then
            HS.Exp "A#NC2807" & sDestPOV & " = " & N2807
        End If
    End If

    HS.Exp "A#NC2910" & sDestPOV & " = A#N2910.C2#REPREC" & sSrcDIM & " - A#A177E" & sSrcPOV & " - A#A337E" & sSrcPOV

    If CInt(IntCurPeriodNum) = 12 Then

        HS.Exp "A#N35101" & sDestPOV & " = A#L225" & sSrcPOV & " + A#L326" & sSrcPOV

        HS.Exp "A#N35131" & sDestPOV & " = A#N0701" & sSrcPOV
        HS.Exp "A#N35132" & sDestPOV & " = A#N0702" & sSrcPOV

        HS.Exp "A#N35144" & sDestPOV & " = A#N0704.C2#A_DECR" & sSrcDIM & " - A#N0704.C2#D_DECR" & sSrcDIM & " - A#N19_L225.C2#LR37" & sSrcDIM & "- A#N19_L326.C2#LR37" & sSrcDIM

    End If

    If CInt(IntCurPeriodNum) = 12 Then

            HS.Exp "A#N35201" & sDestPOV & " = A#A177E" & sSrcPOV & " + A#A337E" & sSrcPOV

        If bIsBase = True Then HS.Exp "A#NC35201" & sDestPOV & " = A#N35201" & sSrcPOV & " - (A#N35202" & sSrcPOV & " + A#N35203" & sSrcPOV &")"
    End If
End Sub

Sub NoteACQ2Calcs(sDestAcc, sAssetAcc, sCapexAcc, sDispAcc, sPrevScenBEGBAL)
    sSrcPOV = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcDIM = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sDestDIM = ".I#[ICP None].C1#[None].C3#INP.C4#[None]"
    sSrcPrevScenBEGBAL = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & sPrevScenBEGBAL

    sSrcAcc = sDestAcc
    If sDestAcc = "NC0602" Then
        sSrcAcc = "N0602"
    End If

    HS.EXP "A#" & sDestAcc & sDestDIM & ".C2#C_EOP = A#" & sAssetAcc & sSrcPOV & " - A#" & sSrcAcc & ".C2#NOTE_ACQ2" & sSrcDIM
    Hs.Exp "A#" & sDestAcc & sDestDIM & ".C2#C_Balance = A#" & sAssetAcc & sSrcPrevScenBEGBAL & " - A#" & sSrcAcc & sSrcDIM & ".C2#A_ACQ + A#" & sSrcAcc & ".C2#D_ACD" & sSrcDIM
    If sDestAcc <> "N0701" and sDestAcc <> "N0702" Then
        HS.EXP "A#" & sDestAcc & sDestDIM & ".C2#C_CAPEX = A#" & sCapexAcc & sSrcPOV & " - A#" & sSrcAcc & sSrcDIM & ".C2#A_INCR - A#" & sSrcAcc & ".C2#A_INCI" & sSrcDIM
    Else
        HS.EXP "A#" & sDestAcc & sDestDIM & ".C2#C_CAPEX = A#" & sCapexAcc & sSrcPOV & " - A#" & sSrcAcc & sSrcDIM & ".C2#A_INCR - A#" & sSrcAcc & ".C2#A_INCI" & sSrcDIM    & "- A#" & sSrcAcc & ".C2#A_LEASE" & sSrcDIM
    End If
    HS.EXP "A#" & sDestAcc & sDestDIM & ".C2#C_DISPOSAL = A#" & sDispAcc & sSrcPOV & " - A#" & sSrcAcc & sSrcDIM & ".C2#A_DECR + A#" & sSrcAcc & ".C2#D_DECR" & sSrcDIM
End Sub

Sub MonthlyNotesBaseCons(StrPrevScenYEnd,IntCurPeriodNum,IntYear,bIsBase)

    If IntYear > 2022 And bIsBase = True Then
        sDestPOV = ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]"
        sSrcPOV = ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
        HS.Exp "A#N3008" & sDestPOV & " = A#RM57" & sSrcPOV
        HS.Exp "A#NC3008" & sDestPOV & " = A#RM57" & sSrcPOV & " - A#N3010" & sSrcPOV
    End If

    If IntYear > 2020 And bIsBase = True Then

        Set DataUnit=HS.OpenDataUnit("A#ACQ_1650.C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            If dData <> 0 Then
                Hs.Clear "A#ACQ_1700.I#[ICP None].C1#[None].C2#" & StrC2 & ".C3#ACQ_DISP_INP.C4#[None]"

            End If
            If dData = 1 Then
                ACQ_year = GetUD(StrC2, "Custom2", "ACQDIVY")

                If CInt(ACQ_year) = CInt(IntYear) Then
                    Set DataUnit2=HS.OpenDataUnitSorted("A#ACQ_TYPE.C1#CUSTOM1_TOP.C2#" & StrC2 & ".C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]","Custom4","Ascending")
                    NumItems2 = DataUnit2.GetNumItems
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount_2, StrICP_2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData_2)

                        If dData_2 = 1 Then
                            HS.Exp "A#ACQ_1700.I#[ICP None].C1#[None].C2#" & StrC2 & ".C3#ACQ_DISP_INP.C4#[None] = A#ACQ_PERCENT_TOTAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4_2
                        End If
                    Next
                End If

                If CInt(ACQ_year) < CInt(IntYear) Then
                    Set DataUnit2=HS.OpenDataUnitSorted("A#ACQ_TYPE.C1#CUSTOM1_TOP.C2#" & StrC2 & ".C3#CUSTOM3_TOP.C4{ACQ_TIMES.[Base]}.I#[ICP Top]","Custom4","Ascending")
                    NumItems2 = DataUnit2.GetNumItems
                    bACQFound = False
                    For j = 0 To NumItems2 - 1
                        Call DataUnit2.GetItem(j, StrAccount_2, StrICP_2, StrC1_2, StrC2_2, StrC3_2, StrC4_2, dData_2)

                        If dData_2 = 11 Then
                            HS.Exp "A#ACQ_1700.I#[ICP None].C1#[None].C2#" & StrC2 & ".C3#ACQ_DISP_INP.C4#[None] = A#ACQ_PERCENT_TOTAL.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#" & StrC4_2
                            bACQFound = True
                        End If
                    Next
                    If bACQFound = False Then
                        HS.Exp "A#ACQ_1700.I#[ICP None].C1#[None].C2#" & StrC2 & ".C3#ACQ_DISP_INP.C4#[None] = A#ACQ_1700.I#[ICP Top].C1#CUSTOM1_TOP.C2#" & StrC2 & ".C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.P#Last.Y#PRIOR"
                    End If
                End If

            ElseIf dData = 2 Then

                HS.Exp "A#ACQ_1700.I#[ICP None].C1#[None].C2#" & StrC2 & ".C3#ACQ_DISP_INP.C4#[None] = 100"
            End If
        Next
    End If

    For each acq in HS.Custom2.List("ACQ","[Base]")
        ACQ_year = GetUD(acq, "Custom2", "ACQDIVY")
        If (Int(ACQ_year) = Int(IntYear) or Int(ACQ_year) + 1 = Int(IntYear)) And IntYear > 2017 Then
            sSrcPOV = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#" & acq & ".C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
            sDestPOV = ".I#[ICP None].C1#[None].C2#" & acq & ".C3#ACQ_DISP_INP.C4#[None]"

            HS.Exp "A#ACQ_2010" & sDestPOV & " = A#A118" & sSrcPOV
            HS.Exp "A#ACQ_2020" & sDestPOV & " = A#A160" & sSrcPOV

            HS.Exp "A#ACQ_2025" & sDestPOV & " = A#A170" & sSrcPOV & " - A#ACQ_1000" & sSrcPOV&" * A#ACQ_1600" & sSrcPOV

            HS.Exp "A#ACQ_2030" & sDestPOV & " = A#A300" & sSrcPOV

            HS.Exp "A#ACQ_2040" & sDestPOV & " = A#A179" & sSrcPOV & " + A#A189" & sSrcPOV & " + A#A362E" & sSrcPOV & " + A#A361" & sSrcPOV & " + A#A371" & sSrcPOV

            HS.Exp "A#ACQ_2050" & sDestPOV & " = A#A169" & sSrcPOV & " + A#A351" & sSrcPOV
            HS.Exp "A#ACQ_2060" & sDestPOV & " = A#A480" & sSrcPOV
            HS.Exp "A#ACQ_2070" & sDestPOV & " = A#A195" & sSrcPOV

            HS.Exp "A#ACQ_2080" & sDestPOV & " = -A#L300" & sSrcPOV & " - A#L490" & sSrcPOV & " + A#L237" & sSrcPOV & " + A#L328" & sSrcPOV & " + A#L457" & sSrcPOV & " + A#L480" & sSrcPOV & " + A#L295" & sSrcPOV & " + A#ACQ_1500" & sSrcPOV

            HS.Exp "A#ACQ_2090" & sDestPOV & " = -A#L237" & sSrcPOV & " - A#L328" & sSrcPOV & " - A#L457" & sSrcPOV
            HS.Exp "A#ACQ_2100" & sDestPOV & " = -A#L295" & sSrcPOV

            If bIsBase = True Then
                HS.Exp "A#ACQ_2500" & sDestPOV & " = ((100 - A#ACQ_1700" & sSrcPOV & ") / 100) * (A#A495" & sSrcPOV & "- A#L300" & sSrcPOV & "- A#L490" & sSrcPOV & ")"
            End If

            HS.Exp "A#ACQ_2200" & sDestPOV & " = A#ACQ_2000" & sSrcPOV & "- A#ACQ_2500" & sSrcPOV

            HS.Exp "A#ACQ_3000" & sDestPOV & " = A#ACQ_1000" & sSrcPOV & "- A#ACQ_2200" & sSrcPOV

            HS.Exp "A#ACQ_3050" & sDestPOV & "  =    A#A105" & sSrcPOV &" + A#A106" & sSrcPOV

            HS.Exp "A#ACQ_7000" & sDestPOV & " = A#A107" & sSrcPOV

            HS.Exp "A#ACQ_3100" & sDestPOV & " = A#ACQ_3000" & sSrcPOV & " - A#A107" & sSrcPOV

            HS.Exp "A#ACQ_7500" & sDestPOV & " = A#A480" & sSrcPOV & " - A#L481" & sSrcPOV
        End If

        sDestPOV = ".I#[ICP None].C1#[None].C2#" & acq & ".C3#ACQ_DISP_INP.C4#[None]"
        If Int(ACQ_year) = Int(IntYear) And IntYear > 2017 Then

            HS.Exp "A#ACQ_8000" & sDestPOV & " = A#ACQ_1000" & sSrcPOV & "- A#ACQ_1500" & sSrcPOV & "- A#A480" & sSrcPOV & "+ A#L481" & sSrcPOV

        ElseIf Int(ACQ_year) > Int(IntYear) And IntYear > 2017 Then

            HS.Exp "A#ACQ_8000" & sDestPOV & " = (A#ACQ_1000" & sSrcPOV & "- A#ACQ_1500" & sSrcPOV & "- A#A480" & sSrcPOV & ")" & _
                " - (A#ACQ_1000." & StrPrevScenYEnd & sSrcPOV & "- A#ACQ_1500." & StrPrevScenYEnd & sSrcPOV & "- A#A480." & StrPrevScenYEnd & sSrcPOV & ")"
        End If
    Next
End Sub

Sub MonthlyNotes(StrPrevScenYEnd,IntCurPeriodNum, IntYear, bIsBase, StrEntity, LegalEntForStrEntity, GL_Ent)

    If HS.Custom2.IsBase("","DISPBUSIN") = False Then
        For each dis in HS.Custom2.List("DISPBUSIN","[Base]")

            sSrcPOV = ".C1#CUSTOM1_TOP.C2#" & dis & ".C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]"
            sDestPOV = ".C1#[None].C2#" & dis & ".C3#ACQ_DISP_INP.I#[ICP None]"

            PercentOwned = HS.GetCell("A#DIV_1800" & sSrcPOV)
            PercentSold = HS.GetCell("A#DIV_1700" & sSrcPOV)
            PercentLeft = PercentOwned - PercentSold

            DIS_year = GetUD(dis, "Custom2", "ACQDIVY")

            If CInt(DIS_year) = CInt(IntYear) or CInt(DIS_year) + 1 = CInt(IntYear) Then

                If CInt(IntYear) <= 2021 And bIsBase = True Then
                    HS.Exp "A#DIV_2000" & sDestPOV & " = (A#A495" & sSrcPOV & "- A#L300" & sSrcPOV & "- A#L490" & sSrcPOV & _
                           "+ A#L480" & sSrcPOV & "- A#DIV_1500" & sSrcPOV & ") * A#DIV_1700" & sSrcPOV & " / 100"
                End If

                HS.Exp "A#DIV_2005" & sDestPOV & " = A#A107" & sSrcPOV
                HS.Exp "A#DIV_2010" & sDestPOV & " = A#A118" & sSrcPOV
                HS.Exp "A#DIV_2020" & sDestPOV & " = A#A160" & sSrcPOV

                HS.Exp "A#DIV_2025" & sDestPOV & " = A#A170" & sSrcPOV

                HS.Exp "A#DIV_2030" & sDestPOV & " = A#A300" & sSrcPOV

                HS.Exp "A#DIV_2040" & sDestPOV & " = A#A179" & sSrcPOV & " + A#A189" & sSrcPOV & " + A#A362E" & sSrcPOV & " + A#A361" & sSrcPOV & " + A#A371" & sSrcPOV & " + A#DIV_1500" & sSrcPOV

                HS.Exp "A#DIV_2050" & sDestPOV & " = A#A169" & sSrcPOV & " + A#A351" & sSrcPOV
                HS.Exp "A#DIV_2060" & sDestPOV & " = A#A480" & sSrcPOV
                HS.Exp "A#DIV_2070" & sDestPOV & " = A#A195" & sSrcPOV

                HS.Exp "A#DIV_2080" & sDestPOV & " = -A#L300" & sSrcPOV & " - A#L490" & sSrcPOV & " + A#L237" & sSrcPOV & " + A#L328" & sSrcPOV & " + A#L457" & sSrcPOV & " + A#L480" & sSrcPOV & " + A#L295" & sSrcPOV

                HS.Exp "A#DIV_2090" & sDestPOV & " = -A#L237" & sSrcPOV & " - A#L328" & sSrcPOV & " - A#L457" & sSrcPOV
                HS.Exp "A#DIV_2100" & sDestPOV & " = -A#L295" & sSrcPOV

                If bIsBase = True And CDbl(PercentLeft) > 0  Then

                    If CDbl(PercentLeft) < 20 Then

                        HS.Exp "A#DIV_2500" & sDestPOV & " = A#DIV_2001" & sSrcPOV & " * " & PercentLeft & " / 100"
                    End If

                    If CDbl(PercentLeft) >= 20 and PercentLeft < 50 Then

                        HS.Exp "A#DIV_2600" & sDestPOV & " =  A#DIV_2001" & sSrcPOV & " * " & PercentLeft & " / 100"
                    End If
                End If

                HS.Exp "A#DIV_2700" & sDestPOV & " = A#DIV_1000" & sSrcPOV & "- A#DIV_2001" & sSrcPOV & "- A#DIV_2400" & sSrcPOV & "+ A#DIV_2500" & sSrcPOV & "+ A#DIV_2600" & sSrcPOV

                HS.Exp "A#DIV_2900" & sDestPOV & " = A#DIV_2700" & sSrcPOV & "- A#DIV_2800" & sSrcPOV & "- A#DIV_2850" & sSrcPOV
            End If

            If Int(DIS_year) = Int(IntYear) Then

                HS.Exp "A#DIV_8000" & sDestPOV & " = A#DIV_1000" & sSrcPOV & "- A#DIV_1500" & sSrcPOV & "- A#A480" & sSrcPOV
            ElseIf Int(DIS_year) + 1 = Int(IntYear) Then

                HS.Exp "A#DIV_8000" & sDestPOV & " = (A#DIV_1500" & sSrcPOV & " - A#DIV_1500" & sSrcPOV & "." & StrPrevScenYEnd & ") * -1"
            End If
        Next
    End If

    If IntYear >= 2024 And bIsBase = True And GL_Ent = True Then

        For each acc in hs.account.list("N40_L180","[Base]")
            SourceAcc = Replace(acc,"N40_","")

            dAccData = SumLegalBasesToGLEnt("A#" & SourceAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]." & StrPrevScenYEnd, StrEntity, LegalEntForStrEntity)
            If dAccData <> 0 Then
                Hs.Exp "A#" & acc & ".C1#[None].C2#HFM_LC.C3#INP.C4#[None].I#[ICP None] = " & dAccData
            End If

            curr_End_Rate = HS.GetRate("V#EUR.A#END_RATES")
            HS.Exp "A#" & acc & ".C2#HFM_EUR.C3#INP.C4#[None] = A#" & acc & ".C2#HFM_LC.C3#CUSTOM3_top.C4#[None] * " & curr_End_Rate
            HS.Exp "A#" & acc & ".C2#GAAP_EUR.C3#INP.C4#[None] = A#" & acc & ".C2#GAAP_LC.C3#CUSTOM3_top.C4#[None] * " & curr_End_Rate

        Next
    End If

End Sub

Sub CashFlowBaseEntityandELIM(StrScenario,StrPrevScenYEnd,EstimationScenario,ByVal bUseActualRules,StrPeriod, IntYear, IntCurPeriodNum,ToBeSoldEntity,StrCurrFcstYear,Str1stFcstPeriod, StrEntity)

    If ToBeSoldEntity = True Then Exit Sub
    StrPrevValSource = ""
    StrValue = UCASE(Hs.Value.Member())

    If bUseActualRules = False and StrValue = "[ELIMINATION]" Then
        bRollForward = GetRollForwardInfo(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)
    End If

    If Instr(StrScenario,"STRATEGY") > 0 Then bUseActualRules = False

    If StrScenario = "BUDGET" and StrPeriod = "Jan" and IntYear > 2015 And StrValue = "[ELIMINATION]" Then
        StrPrevValSource = ".S#BUDGET_FORECAST"
    ElseIf EstimationScenario = True And StrValue = "[ELIMINATION]" And StrPeriod = "Jan" Then
        FirstFcstYear = CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)
        If CInt(FirstFcstYear) = CInt(IntYear) and StrPeriod = "Jan" Then

            If StrScenario = "FORECAST" Then

                    StrPrevValSource = ".S#ACTUAL"

            ElseIf Left(StrScenario, 12) <> "FORECAST_DEC" Then
                StrPrevValSource = ".S#ACTUAL"
            End If
        End If
    End If

    aSrcCustom3 = Array("CUSTOM3_TOP")
    If StrScenario = "ACTUAL" And CInt(IntYear) > (CInt(FirstYearWithData)+3) Then
        aSrcCustom3 = Array("C3_NET_OF_ACQ", "ACQ_Total")
        If CInt(IntYear) < 2022 Then
            aSrcCustom3 = Array("C3TOPwoACQ", "ACQ_Total")
        End If
    End If

    For Each sSrcC3 In aSrcCustom3
        sDestC3 = "INP"
        sPrevScenBEGBAL = StrPrevScenYEnd & ".C3#BEGBALtot"
        If sSrcC3 = "ACQ_Total" Then
            sDestC3 = "ACQ"
            sPrevScenBEGBAL = StrPrevScenYEnd & ".C3#ACQ_Total"
        ElseIf sSrcC3 <> "CUSTOM3_TOP" Then
            sPrevScenBEGBAL = StrPrevScenYEnd & ".C3#BegBalwoACQ"
        End If

        sSrcPOV = ".I#[ICP Top].C2#CUSTOM2_TOP.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        sDestPOV = ".I#[ICP None].C2#[None].C3#" & sDestC3 & ".C4#[None]"
        sSrcPrevScenBEGBAL = ".I#[ICP Top].C2#CUSTOM2_TOP.C4#CUSTOM4_TOP." & sPrevScenBEGBAL

        sSrcDIM = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        sDestDIM = ".I#[ICP None].C1#[None].C2#[None].C3#" & sDestC3 & ".C4#[None]"

        HS.Exp "A#CF_R70" & sDestPOV & " = A#RM70" & sSrcPOV
        HS.Exp "A#CF73" & sDestPOV & " = A#CL100" & sSrcPOV
        HS.Exp "A#CF115" & sDestPOV & " = -A#R846.C2#ASSCO_JV.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"

        HS.Exp "A#CF119" & sDestPOV & " = -A#CL184" & sSrcPOV

        If CInt(IntYear) > 2018 Then
            HS.Exp "A#CF120" & sDestPOV & " = -A#OC20" & sSrcPOV & " + A#OC12" & sSrcPOV & " + A#OC65" & sSrcPOV & " + A#OC16" & sSrcPOV
        Else
            HS.Exp "A#CF120" & sDestPOV & " = -A#OC20" & sSrcPOV & " + A#OC12" & sSrcPOV & " + A#OC65" & sSrcPOV
        End If

        If bUseActualRules = True Then
            HS.Exp "A#CF151" & sDestPOV & " = -A#RM68" & sSrcPOV

            If IntYear > 2018 Then
                HS.Exp "A#CF153" & sDestPOV & " = A#OC20" & sSrcPOV & " - A#OC12" & sSrcPOV & " - A#OC65" & sSrcPOV & "  - A#OC16" & sSrcPOV
            Else
                HS.Exp "A#CF153" & sDestPOV & " = A#OC20" & sSrcPOV & " - A#OC12" & sSrcPOV & " - A#OC65" & sSrcPOV
            End If
        End If

        If bUseActualRules = False Then
            If StrPeriod = "Jan" Then
                HS.Exp "A#CF154" & sDestPOV & " = A#DC20" & sSrcPOV & " - A#DC65" & sSrcPOV
            Else
                HS.Exp "A#CF154" & sDestPOV & " = (A#DC20.W#Periodic" & sSrcPOV & " - A#DC65.W#Periodic" & sSrcPOV & ") + A#CF154.P#Prior" & sSrcPOV
            End If
        End If

        If bUseActualRules = True Then HS.Exp "A#CF256" & sDestPOV & " = A#L165.C2#RET_SBP.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"

        HS.Exp "A#CF301" & sDestDIM & " = A#R812E" & sSrcDIM
        HS.Exp "A#CF303" & sDestDIM & " = A#R812I" & sSrcDIM
        HS.Exp "A#CF305" & sDestDIM & " = -A#R813E" & sSrcDIM
        HS.Exp "A#CF307" & sDestDIM & " = -A#R814" & sSrcDIM

        HS.Exp "A#CF311" & sDestDIM & " = -A#R813I" & sSrcDIM
        HS.Exp "A#CF312" & sDestDIM & " = -A#R817" & sSrcDIM
        HS.Exp "A#CF324" & sDestDIM & " = A#R832E" & sSrcDIM
        HS.Exp "A#CF325" & sDestDIM & " = A#R832I" & sSrcDIM
        HS.Exp "A#CF326" & sDestDIM & " = -A#R833E" & sSrcDIM
        HS.Exp "A#CF327" & sDestDIM & " = -A#R833I" & sSrcDIM
        HS.Exp "A#CF331" & sDestDIM & " = -A#R931" & sSrcDIM
        HS.Exp "A#CF332" & sDestDIM & " = -A#R934" & sSrcDIM
        HS.Exp "A#CF342" & sDestDIM & " = -A#R935" & sSrcDIM

        If IntYear < 2023 Then
            HS.Exp "A#CF344" & sDestDIM & " = -A#R936" & sSrcDIM
        End If
        HS.Exp "A#CF341" & sDestDIM & " = A#R933" & sSrcDIM
        HS.Exp "A#CF343" & sDestDIM & " = -A#R932" & sSrcDIM
        HS.Exp "A#CF361" & sDestDIM & " = A#R842E" & sSrcDIM
        HS.Exp "A#CF363" & sDestDIM & " = A#R842A.C1#CUSTOM1_TOP.C2#ASSCO_JV.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        HS.Exp "A#CF365" & sDestDIM & " = A#R842I" & sSrcDIM
        HS.Exp "A#CF367" & sDestDIM & " = -A#L165.C1#CUSTOM1_TOP.C2#RET_DPE.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        HS.Exp "A#CF369" & sDestDIM & " = -A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPI.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        HS.Exp "A#CF381" & sDestDIM & " = A#R816" & sSrcDIM
        HS.Exp "A#CF382" & sDestDIM & " = A#R816I" & sSrcDIM
        HS.Exp "A#CF383" & sDestDIM & " = A#R822" & sSrcDIM
        HS.Exp "A#CF385" & sDestDIM & " = A#R823" & sSrcDIM

        HS.Exp "A#CF409" & sDestDIM & " = A#R846.C1#CUSTOM1_TOP.C2#ASSCO_JV.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        HS.Exp "A#CF459" & sDestDIM & " = -A#R862" & sSrcDIM
        HS.Exp "A#CF411" & sDestDIM & " = A#R941" & sSrcDIM
        HS.Exp "A#CF423" & sDestDIM & " = A#L160" & sSrcDIM & " - A#CL160" & sSrcDIM
        HS.Exp "A#CF426" & sDestDIM & " = -A#L165.C1#CUSTOM1_TOP.C2#RET_SBP.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        HS.Exp "A#CF437" & sDestDIM & " = -A#R861" & sSrcDIM
        HS.Exp "A#CF450" & sDestDIM & " = A#R850" & sSrcDIM
        HS.Exp "A#CF451" & sDestDIM & " = A#R852E" & sSrcDIM
        HS.Exp "A#CF453" & sDestDIM & " = A#R852I" & sSrcDIM
        HS.Exp "A#CF455" & sDestDIM & " = -A#R853E" & sSrcDIM
        HS.Exp "A#CF457" & sDestDIM & " = -A#R853I" & sSrcDIM
        HS.Exp "A#CF476" & sDestDIM & " = A#R83" & sSrcDIM
        Hs.Exp "A#CF477" & sDestDIM & " = A#L480" & sSrcDIM & " - A#L480.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL480" & sSrcDIM
        HS.Exp "A#CF478" & sDestDIM & " = A#R872I" & sSrcDIM
        HS.Exp "A#CF479" & sDestDIM & " = -A#R873I" & sSrcDIM

        HS.Exp "A#CF605" & sDestDIM & " = A#A175E" & sSrcDIM
        HS.Exp "A#CF607" & sDestDIM & " = A#A177E" & sSrcDIM
        HS.Exp "A#CF608" & sDestDIM & " = A#A178" & sSrcDIM
        HS.Exp "A#CF615" & sDestDIM & " = A#A335E" & sSrcDIM
        HS.Exp "A#CF617" & sDestDIM & " = A#A337E" & sSrcDIM
        HS.Exp "A#CF618" & sDestDIM & " = A#A338" & sSrcDIM
        HS.Exp "A#CF625" & sDestDIM & " = A#A345I" & sSrcDIM
        HS.Exp "A#CF627" & sDestDIM & " = A#A410" & sSrcDIM
        HS.Exp "A#CF630" & sDestDIM & " = A#A415" & sSrcDIM
        HS.Exp "A#CF635" & sDestDIM & " = A#A455E" & sSrcDIM
        HS.Exp "A#CF640" & sDestDIM & " = A#A455I" & sSrcDIM
        HS.Exp "A#CF645" & sDestDIM & " = A#A475" & sSrcDIM

        HS.Exp "A#CF710" & sDestDIM & " = A#L215E" & sSrcDIM
        HS.Exp "A#CF720" & sDestDIM & " = A#L225" & sSrcDIM

        HS.Exp "A#CF730" & sDestDIM & " = A#L305E" & sSrcDIM
        HS.Exp "A#CF740" & sDestDIM & " = A#L315I" & sSrcDIM

        HS.Exp "A#CF745" & sDestDIM & " = A#L325E" & sSrcDIM
        HS.Exp "A#CF750" & sDestDIM & " = A#L326" & sSrcDIM

        HS.Exp "A#CF760" & sDestDIM & " = A#L455E" & sSrcDIM
        HS.Exp "A#CF765" & sDestDIM & " = A#L455I" & sSrcDIM
        HS.Exp "A#CF770" & sDestDIM & " = A#L475" & sSrcDIM

        Hs.Exp "A#CF812" & sDestDIM & " = -(A#A177E" & sSrcDIM & " - A#A177E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA177E" & sSrcDIM
        Hs.Exp "A#CF813" & sDestDIM & " = -(A#A178" & sSrcDIM & " - A#A178.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA178" & sSrcDIM
        Hs.Exp "A#CF817" & sDestDIM & " = -(A#A337E" & sSrcDIM & " - A#A337E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA337E" & sSrcDIM
        Hs.Exp "A#CF818" & sDestDIM & " = -(A#A338" & sSrcDIM & " - A#A338.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA338" & sSrcDIM

        HS.Exp "A#CF856" & sDestDIM & " = A#R824" & sSrcDIM
        HS.Exp "A#CF857" & sDestDIM & " = A#R825" & sSrcDIM

        HS.Exp "A#CF917" & sDestDIM & " = A#CA480" & sSrcDIM & " - A#CA410" & sSrcDIM
        HS.Exp "A#CF920" & sDestDIM & " = A#A480" & sSrcDIM
        HS.Exp "A#CF110" & sDestPOV & " = A#RM68" & sSrcPOV

        HS.Exp "A#CF100" & sDestPOV & " = A#CF800" & sSrcPOV & " - A#CF700" & sSrcPOV

        If UCase(StrEntity) <> "KALMAR_DISCO" And UCase(StrEntity) <> "KALMAR_DISCO_ADJ" And UCase(StrEntity) <> "MCG_DISCO" And UCase(StrEntity) <> "MCG_DISCO_ADJ" Then

        If bUseActualRules = True Then
            Hs.Exp "A#CF121" & sDestPOV & " = -(A#A115" & sSrcPOV & " - A#A115" & sSrcPrevScenBEGBAL & ") + A#CA115" & sSrcPOV
            Hs.Exp "A#CF122" & sDestPOV & " = -(A#A117" & sSrcPOV & " - A#A117" & sSrcPrevScenBEGBAL & ") + A#CA117" & sSrcPOV
            Hs.Exp "A#CF123" & sDestPOV & " = -(A#A122" & sSrcPOV & " - A#A122" & sSrcPrevScenBEGBAL & ") + A#CA122" & sSrcPOV
            Hs.Exp "A#CF125" & sDestPOV & " = -(A#A125" & sSrcPOV & " - A#A125" & sSrcPrevScenBEGBAL & ") + A#CA125" & sSrcPOV
            If CInt(IntYear) > 2018 then
                Hs.Exp "A#CF127" & sDestPOV & " = -(A#A126" & sSrcPOV & " - A#A126" & sSrcPrevScenBEGBAL & ") + A#CA126" & sSrcPOV&" + A#OC05" & sSrcPOV  & "- A#DC05" & sSrcPOV
            Else
                Hs.Exp "A#CF127" & sDestPOV & " = -(A#A126" & sSrcPOV & " - A#A126" & sSrcPrevScenBEGBAL & ") + A#CA126" & sSrcPOV
            End If
            Hs.Exp "A#CF129" & sDestPOV & " = -(A#A135" & sSrcPOV & " - A#A135" & sSrcPrevScenBEGBAL & ") + A#CA135" & sSrcPOV
            If CInt(IntYear) > 2018 then
                Hs.Exp "A#CF131" & sDestPOV & " = -(A#A136" & sSrcPOV & " - A#A136" & sSrcPrevScenBEGBAL & ") + A#CA136" & sSrcPOV&" + A#OC07" & sSrcPOV  & "- A#DC07" & sSrcPOV
            Else
                Hs.Exp "A#CF131" & sDestPOV & " = -(A#A136" & sSrcPOV & " - A#A136" & sSrcPrevScenBEGBAL & ") + A#CA136" & sSrcPOV
            End If
            Hs.Exp "A#CF133" & sDestPOV & " = -(A#A137" & sSrcPOV & " - A#A137" & sSrcPrevScenBEGBAL & ")"
            Hs.Exp "A#CF139" & sDestPOV & " = -(A#A155" & sSrcPOV & " - A#A155" & sSrcPrevScenBEGBAL & ") + A#CA155" & sSrcPOV
            Hs.Exp "A#CF141" & sDestPOV & " = -(A#A157" & sSrcPOV & " - A#A157" & sSrcPrevScenBEGBAL & ") + A#CA157" & sSrcPOV
            Hs.Exp "A#CF147" & sDestPOV & " = -(A#A166E" & sSrcPOV & " - A#A166E" & sSrcPrevScenBEGBAL & ") + A#CA166E" & sSrcPOV
            Hs.Exp "A#CF149" & sDestPOV & " = -(A#A168" & sSrcPOV & " - A#A168" & sSrcPrevScenBEGBAL & ") + A#CA168" & sSrcPOV
        End If

        sSrcIOSUB = ".I#[ICP Top].C2#IO_SUB.C3#" & sSrcC3 & ".C4#CUSTOM4_TOP"
        sSrcPrevScenIOSUB = ".I#[ICP Top].C2#IO_SUB.C4#CUSTOM4_TOP." & sPrevScenBEGBAL

        Hs.Exp "A#CF171" & sDestPOV & " = -(A#A216" & sSrcIOSUB & " - A#A216" & sSrcPrevScenIOSUB & ") + A#CA216" & sSrcPOV
        Hs.Exp "A#CF173" & sDestPOV & " = -(A#A217" & sSrcIOSUB & " - A#A217" & sSrcPrevScenIOSUB & ") + A#CA217" & sSrcPOV
        Hs.Exp "A#CF175" & sDestPOV & " = -(A#A218" & sSrcIOSUB & " - A#A218" & sSrcPrevScenIOSUB & ") + A#CA218" & sSrcPOV
        Hs.Exp "A#CF177" & sDestPOV & " = -(A#A219" & sSrcIOSUB & " - A#A219" & sSrcPrevScenIOSUB & ") + A#CA219" & sSrcPOV
        Hs.Exp "A#CF179" & sDestPOV & " = -(A#A234" & sSrcIOSUB & " - A#A234" & sSrcPrevScenIOSUB & ") + A#CA234" & sSrcPOV
        Hs.Exp "A#CF181" & sDestPOV & " = -(A#A252" & sSrcIOSUB & " - A#A252" & sSrcPrevScenIOSUB & ") + A#CA252" & sSrcPOV
        Hs.Exp "A#CF183" & sDestPOV & " = -(A#A272E" & sSrcPOV & " - A#A272E" & sSrcPrevScenBEGBAL & ") + A#CA272E" & sSrcPOV

        If bUseActualRules = True Then
            Hs.Exp "A#CF187" & sDestPOV & " = -(A#A272I" & sSrcPOV & " - A#A272I" & sSrcPrevScenBEGBAL & ") + A#CA272I" & sSrcPOV
            Hs.Exp "A#CF195" & sDestPOV & " = -(A#A305I" & sSrcPOV & " - A#A305I" & sSrcPrevScenBEGBAL & ") + A#CA305I" & sSrcPOV
            Hs.Exp "A#CF211" & sDestPOV & " = -(A#A355I" & sSrcPOV & " - A#A355I" & sSrcPrevScenBEGBAL & ") + A#CA355I" & sSrcPOV
            Hs.Exp "A#CF225" & sDestPOV & " = A#L345I" & sSrcPOV & " - A#L345I" & sSrcPrevScenBEGBAL & " - A#CL345I" & sSrcPOV
            Hs.Exp "A#CF235" & sDestPOV & " = A#L335I" & sSrcPOV & " - A#L335I" & sSrcPrevScenBEGBAL & " - A#CL335I" & sSrcPOV
            Hs.Exp "A#CF253" & sDestPOV & " = A#L355I" & sSrcPOV & " - A#L355I" & sSrcPrevScenBEGBAL & " - A#CL355I" & sSrcPOV
            Hs.Exp "A#CF262" & sDestPOV & " = -(A#A375I" & sSrcPOV & " - A#A375I" & sSrcPrevScenBEGBAL & ") + A#CA375I" & sSrcPOV
            Hs.Exp "A#CF264" & sDestPOV & " = A#L375I" & sSrcPOV & " - A#L375I" & sSrcPrevScenBEGBAL & " - A#CL375I" & sSrcPOV
            Hs.Exp "A#CF265" & sDestPOV & " = A#L175" & sSrcPOV & " - A#L175" & sSrcPrevScenBEGBAL & " - A#CL175" & sSrcPOV
            Hs.Exp "A#CF155" & sDestPOV & " = A#L191" & sSrcPOV & " - A#L191" & sSrcPrevScenBEGBAL & " - A#CL191" & sSrcPOV
        End If

        If bUseActualRules = False and StrValue = "[ELIMINATION]" Then
            If bRollForward = True Then
                HS.EXP "A#CF187.C3#" & sDestC3 & " = A#CF187.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF195.C3#" & sDestC3 & " = A#CF195.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF211.C3#" & sDestC3 & " = A#CF211.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF225.C3#" & sDestC3 & " = A#CF225.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF235.C3#" & sDestC3 & " = A#CF235.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF253.C3#" & sDestC3 & " = A#CF253.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource

                HS.EXP "A#CF121.C3#" & sDestC3 & " = A#CF121.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF123.C3#" & sDestC3 & " = A#CF123.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF125.C3#" & sDestC3 & " = A#CF125.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
                HS.EXP "A#CF151.C3#" & sDestC3 & " = A#CF151.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
            End If

            HS.EXP "A#CF262.C3#" & sDestC3 & " = A#CF262.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
            HS.EXP "A#CF264.C3#" & sDestC3 & " = A#CF264.C3#" & sSrcC3 & ".P#CUR-1" & StrPrevValSource
        End If

        Hs.Exp "A#CF191" & sDestPOV & " = -(A#A305E" & sSrcPOV & " - A#A305E" & sSrcPrevScenBEGBAL & ") + A#CA305E" & sSrcPOV
        Hs.Exp "A#CF197" & sDestPOV & " = -(A#A315" & sSrcPOV & " - A#A315" & sSrcPrevScenBEGBAL & ") + A#CA315" & sSrcPOV
        Hs.Exp "A#CF199" & sDestPOV & " = -(A#A325" & sSrcPOV & " - A#A325" & sSrcPrevScenBEGBAL & ") + A#CA325" & sSrcPOV
        Hs.Exp "A#CF201" & sDestPOV & " = -(A#A185E" & sSrcPOV & " - A#A185E" & sSrcPrevScenBEGBAL & ") + A#CA185E" & sSrcPOV

        Hs.Exp "A#CF207" & sDestPOV & " = -(A#A355E" & sSrcPOV & " - A#A355E" & sSrcPrevScenBEGBAL & ") + A#CA355E" & sSrcPOV
        Hs.Exp "A#CF213" & sDestPOV & " = -(A#A357" & sSrcPOV & " - A#A357" & sSrcPrevScenBEGBAL & ") + A#CA357" & sSrcPOV
        Hs.Exp "A#CF206" & sDestPOV & " = -(A#A181" & sSrcPOV & " - A#A181" & sSrcPrevScenBEGBAL & ") + A#CA181" & sSrcPOV
        Hs.Exp "A#CF221" & sDestPOV & " = A#L345E" & sSrcPOV & " - A#L345E" & sSrcPrevScenBEGBAL & " - A#CL345E" & sSrcPOV
        Hs.Exp "A#CF231" & sDestPOV & " = A#L335E" & sSrcPOV & " - A#L335E" & sSrcPrevScenBEGBAL & " - A#CL335E" & sSrcPOV
        Hs.Exp "A#CF241" & sDestPOV & " = A#L245" & sSrcPOV & " - A#L245" & sSrcPrevScenBEGBAL & " - A#CL245" & sSrcPOV
        Hs.Exp "A#CF242" & sDestPOV & " = A#L173" & sSrcPOV & " - A#L173" & sSrcPrevScenBEGBAL & " - A#CL173" & sSrcPOV
        Hs.Exp "A#CF243" & sDestPOV & " = A#L255E" & sSrcPOV & " - A#L255E" & sSrcPrevScenBEGBAL & " - A#CL255E" & sSrcPOV
        Hs.Exp "A#CF247" & sDestPOV & " = A#L265" & sSrcPOV & " - A#L265" & sSrcPrevScenBEGBAL
        Hs.Exp "A#CF249" & sDestPOV & " = A#L355E" & sSrcPOV & " - A#L355E" & sSrcPrevScenBEGBAL & " - A#CL355E" & sSrcPOV

        Hs.Exp "A#CF252" & sDestPOV & " = A#L348" & sSrcPOV & " - A#L348" & sSrcPrevScenBEGBAL & " - A#CL348" & sSrcPOV
        Hs.Exp "A#CF255" & sDestPOV & " = A#L369" & sSrcPOV & " - A#L369" & sSrcPrevScenBEGBAL & " - A#CL369" & sSrcPOV
        Hs.Exp "A#CF257" & sDestPOV & " = A#L379" & sSrcPOV & " - A#L379" & sSrcPrevScenBEGBAL & " - A#CL379" & sSrcPOV
        Hs.Exp "A#CF258" & sDestPOV & " = A#L424" & sSrcPOV & " - A#L424" & sSrcPrevScenBEGBAL & " - A#CL424" & sSrcPOV
        Hs.Exp "A#CF254" & sDestPOV & " = A#L425" & sSrcPOV & " - A#L425" & sSrcPrevScenBEGBAL & " - A#CL425" & sSrcPOV
        Hs.Exp "A#CF261" & sDestPOV & " = -(A#A375E" & sSrcPOV & " - A#A375E" & sSrcPrevScenBEGBAL & ") + A#CA375E" & sSrcPOV
        Hs.Exp "A#CF263" & sDestPOV & " = A#L375E" & sSrcPOV & " - A#L375E" & sSrcPrevScenBEGBAL & " - A#CL375E" & sSrcPOV

        Hs.Exp "A#CF313" & sDestDIM & " = -(A#A360E" & sSrcDIM & " - A#A360E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA360E" & sSrcDIM
        Hs.Exp "A#CF317" & sDestDIM & " = -(A#A360I" & sSrcDIM & " - A#A360I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA360I" & sSrcDIM
        Hs.Exp "A#CF319" & sDestDIM & " = A#L360E" & sSrcDIM & " - A#L360E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL360E" & sSrcDIM
        Hs.Exp "A#CF323" & sDestDIM & " = A#L360I" & sSrcDIM & " - A#L360I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL360I" & sSrcDIM
        Hs.Exp "A#CF333" & sDestDIM & " = -(A#A362E" & sSrcDIM & " - A#A362E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA362E" & sSrcDIM
        Hs.Exp "A#CF335" & sDestDIM & " = A#L366E" & sSrcDIM & " - A#L366E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL366E" & sSrcDIM
        Hs.Exp "A#CF345" & sDestDIM & " = -(A#A195" & sSrcDIM & " -A#A195.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA195" & sSrcDIM
        Hs.Exp "A#CF347" & sDestDIM & " = A#L295" & sSrcDIM & " - A#L295.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL295" & sSrcDIM

        Hs.Exp "A#CF348" & sDestDIM & " = A#L177" & sSrcDIM & " - A#L177.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL177" & sSrcDIM
        Hs.Exp "A#CF349" & sDestDIM & " = A#L174" & sSrcDIM & " - A#L174.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL174" & sSrcDIM

        Hs.Exp "A#CF386" & sDestPOV & " = -(A#A188E" & sSrcPOV & " - A#A188E" & sSrcPrevScenBEGBAL & ") + A#CA188E" & sSrcPOV
        Hs.Exp "A#CF387" & sDestDIM & " = -(A#A376E" & sSrcDIM & " - A#A376E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA376E" & sSrcDIM
        Hs.Exp "A#CF388" & sDestDIM & " = -(A#A376I" & sSrcDIM & " - A#A376I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA376I" & sSrcDIM
        Hs.Exp "A#CF392" & sDestDIM & " = A#L249E" & sSrcDIM & " - A#L249E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL249E" & sSrcDIM
        Hs.Exp "A#CF389" & sDestDIM & " = A#L376E" & sSrcDIM & " - A#L376E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL376E" & sSrcDIM
        Hs.Exp "A#CF390" & sDestDIM & " = (A#L376I" & sSrcDIM & " - A#L376I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") - A#CL376I" & sSrcDIM
        Hs.Exp "A#CF391" & sDestDIM & " = A#L176" & sSrcDIM & " - A#L176.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL176" & sSrcDIM

        Hs.Exp "A#CF401" & sDestDIM & " = -(A#A165I" & sSrcDIM & " - A#A165I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA165I" & sSrcDIM
        Hs.Exp "A#CF403" & sDestDIM & " = -(A#A167A.C2#ASSCO_JV.C1#CUSTOM1_TOP.C3#" & sSrcC3 & " - A#A167A.C1#CUSTOM1_TOP.C2#ASSCO_JV." & sPrevScenBEGBAL & ") + A#CA167A" & sSrcDIM
        Hs.Exp "A#CF405" & sDestDIM & " = -(A#A167E" & sSrcDIM & " - A#A167E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA167E" & sSrcDIM
        Hs.Exp "A#CF408" & sDestDIM & " = -(A#A166A.C1#CUSTOM1_TOP.C2#ASSCO_JV.C3#" & sSrcC3 & " - A#A166A.C1#CUSTOM1_TOP.C2#ASSCO_JV." & sPrevScenBEGBAL & ") + A#CA166A" & sSrcDIM
        Hs.Exp "A#CF413" & sDestDIM & " = A#L205" & sSrcDIM & " - A#L205.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL205" & sSrcDIM

        Hs.Exp "A#CF415" & sDestDIM & " = A#L105.C2#EQUITY.C3#" & sSrcC3 & " - A#L105.C2#EQUITY." & sPrevScenBEGBAL & " - A#CL105" & sSrcDIM
        Hs.Exp "A#CF417" & sDestDIM & " = A#L115.C2#EQUITY.C3#" & sSrcC3 & " - A#L115.C2#EQUITY." & sPrevScenBEGBAL & " - A#CL115" & sSrcDIM

        Hs.Exp "A#CF419" & sDestDIM & " = A#L135.C1#CUSTOM1_TOP.C2#CTA.C3#" & sSrcC3 & " - A#L135.C1#CUSTOM1_TOP.C2#CTA." & sPrevScenBEGBAL & " - A#CL135" & sSrcDIM
        Hs.Exp "A#CF421" & sDestDIM & " = A#L155.C1#CUSTOM1_TOP.C2#EQUITY.C3#" & sSrcC3 & " - A#L155.C1#CUSTOM1_TOP.C2#EQUITY." & sPrevScenBEGBAL & " - A#CL155" & sSrcDIM

        Hs.Exp "A#CF425" & sDestDIM & " = A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#EQUITY.C3#" & sSrcC3 & " - A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#EQUITY." & sPrevScenBEGBAL & _
            "+ A#L166.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#" & sSrcC3 & " - A#L166.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & sPrevScenBEGBAL & _
            "+ A#L167.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#" & sSrcC3 & " - A#L167.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & sPrevScenBEGBAL & _
            "- A#CL165.C1#CUSTOM1_TOP.C2#EQUITY.C3#" & sSrcC3 & " - A#CL166.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#" & sSrcC3 & " + A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPE.C3#" & sSrcC3 & " + A#L165.I#[ICP Top].C1#CUSTOM1_TOP.C2#RET_DPI.C3#" & sSrcC3 & _
            "- A#CL165.C1#CUSTOM1_TOP.C2#RET_DPE.C3#" & sSrcC3 & " - A#CL165.C1#CUSTOM1_TOP.C2#RET_DPI.C3#" & sSrcC3 & " - A#L178.I#[ICP Top].C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#L160" & sSrcPrevScenBEGBAL

        Hs.Exp "A#CF431" & sDestDIM & " = -(A#A105" & sSrcDIM & " - A#A105.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA105" & sSrcDIM

        Hs.Exp "A#CF433" & sDestDIM & " = -(A#A106" & sSrcDIM & " - A#A106.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA106" & sSrcDIM

        Hs.Exp "A#CF435" & sDestDIM & " = -(A#A116" & sSrcDIM & " -A#A116.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA116" & sSrcDIM
        Hs.Exp "A#CF461" & sDestDIM & " = -(A#A365E" & sSrcDIM & " -A#A365E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA365E" & sSrcDIM

        Hs.Exp "A#CF465" & sDestDIM & " = -(A#A365I" & sSrcDIM & " - A#A365I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA365I" & sSrcDIM
        Hs.Exp "A#CF466" & sDestDIM & " = -(A#A164" & sSrcDIM & " - A#A164.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA164" & sSrcDIM
        Hs.Exp "A#CF469" & sDestDIM & " = A#L365E" & sSrcDIM & " - A#L365E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL365E" & sSrcDIM
        If IntYear < 2022 or (IntYear = 2022 and IntCurPeriodNum < 6) Then
            Hs.Exp "A#CF473" & sDestDIM & " = A#L365I" & sSrcDIM & " - A#L365I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL365I" & sSrcDIM
            Hs.Exp "A#CF473" & sDestDIM & " = A#L264" & sSrcDIM & " - A#L264.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL264" & sSrcDIM
        Else
            Hs.Exp "A#CF473" & sDestDIM & " = A#L365I" & sSrcDIM & " - A#L365I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL365I" & sSrcDIM
            Hs.Exp "A#CF467" & sDestDIM & " = A#L264" & sSrcDIM & " - A#L264.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL264" & sSrcDIM
        End If

        Hs.Exp "A#CF811" & sDestDIM & " = -(A#A175E" & sSrcDIM & " - A#A175E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA175E" & sSrcDIM
        Hs.Exp "A#CF815" & sDestDIM & " = -(A#A335E" & sSrcDIM & " - A#A335E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA335E" & sSrcDIM
        Hs.Exp "A#CF819" & sDestDIM & " = -(A#A345I" & sSrcDIM & " - A#A345I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA345I" & sSrcDIM
        Hs.Exp "A#CF821" & sDestDIM & " = -(A#A410" & sSrcDIM & " - A#A410.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & ") + A#CA410" & sSrcDIM

        Hs.Exp "A#CF831" & sDestDIM & " = A#L215E" & sSrcDIM & " - A#L215E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL215E" & sSrcDIM

        If IntYear > 2018 Then
            Hs.Exp "A#CF835" & sDestDIM & " = A#L225" & sSrcDIM & " - A#L225.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL225" & sSrcDIM  & " - A#OC16" & sSrcDIM & " + A#DC16" & sSrcDIM
        Else
            Hs.Exp "A#CF835" & sDestDIM & " = A#L225" & sSrcDIM & " - A#L225.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL225" & sSrcDIM
        End If

        Hs.Exp "A#CF839" & sDestDIM & " = A#L305E" & sSrcDIM & " - A#L305E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL305E" & sSrcDIM
        Hs.Exp "A#CF843" & sDestDIM & " = A#L315I" & sSrcDIM & " - A#L315I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL315I" & sSrcDIM
        Hs.Exp "A#CF845" & sDestDIM & " = A#L325E" & sSrcDIM & " - A#L325E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL325E" & sSrcDIM
        Hs.Exp "A#CF847" & sDestDIM & " = A#L326" & sSrcDIM & " - A#L326.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL326" & sSrcDIM

        Hs.Exp "A#CF851" & sDestDIM & " = A#L455E" & sSrcDIM & " - A#L455E.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL455E" & sSrcDIM
        Hs.Exp "A#CF853" & sDestDIM & " = A#L455I" & sSrcDIM & " - A#L455I.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL455I" & sSrcDIM
        Hs.Exp "A#CF855" & sDestDIM & " = A#L475" & sSrcDIM & " - A#L475.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL & " - A#CL475" & sSrcDIM

        End If

        Hs.Exp "A#CF69" & sDestDIM & " = A#CF100.C1#CUSTOM1_TOP" & sSrcPrevScenBEGBAL
        Hs.Exp "A#CF905" & sDestDIM & " = A#A480.C1#CUSTOM1_TOP.I#[ICP Top]." & sPrevScenBEGBAL

        HS.Exp "A#CF71" & sDestDIM & " = -A#CF500" & sSrcDIM
        HS.Exp "A#CF910" & sDestDIM & " = A#CF905" & sSrcDIM

            Hs.Exp "A#CF266" & sDestPOV & " = -(A#A187E" & sSrcPOV & " - A#A187E" & sSrcPrevScenBEGBAL & ") + A#CA187E" & sSrcPOV
            Hs.Exp "A#CF267" & sDestPOV & " = A#L248E" & sSrcPOV & " - A#L248E" & sSrcPrevScenBEGBAL & " - A#CL248E" & sSrcPOV
            Hs.Exp "A#CF251" & sDestPOV & " = A#L246" & sSrcPOV & " - A#L246" & sSrcPrevScenBEGBAL & " - A#CL246" & sSrcPOV
            Hs.Exp "A#CF269" & sDestPOV & " = A#L247" & sSrcPOV & " - A#L247" & sSrcPrevScenBEGBAL & " - A#CL247" & sSrcPOV

    Next
End Sub

Sub CashFlowEntityCurrencyAndElim(StrPrevScenYEnd,ToBeSoldEntity,StrScenario,IntYear)

    If ToBeSoldEntity = True Then Exit Sub

    aSrcCustom3 = Array("CUSTOM3_TOP")
    If StrScenario = "ACTUAL" And CInt(IntYear) > (CInt(FirstYearWithData)+3) Then
        aSrcCustom3 = Array("C3_NET_OF_ACQ", "ACQ_Total")
    End If

    If ToBeSoldEntity = FALSE Then
        For Each sSrcC3 In aSrcCustom3
            sDestC3 = "INP"
            sPrevScenBEGBAL = StrPrevScenYEnd & ".C3#BEGBALtot"
            If sSrcC3 = "ACQ_Total" Then
                sDestC3 = "ACQ"
                sPrevScenBEGBAL = StrPrevScenYEnd & ".C3#ACQ_Total"
            ElseIf sSrcCustom3 <> "CUSTOM3_TOP" Then
                sPrevScenBEGBAL = StrPrevScenYEnd & ".C3#BEGBALwoACQ"
            End If

            sDestPOV = ".I#[ICP None].C1#[None].C2#[None].C3#" & sDestC3
            sSrcPOV = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#" & sSrcC3
            sSrcPrevY = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP." & sPrevScenBEGBAL

            HS.Exp "A#CF71" & sDestPOV & " = -A#CF500" & sSrcPOV
            HS.Exp "A#CF65" & sDestPOV & " = A#CF100" & sSrcPOV & " - A#CF69C" & sSrcPOV & " - A#CF71" & sSrcPOV & " - A#CF73" & sSrcPOV & " + A#CF856" & sSrcPOV & " + A#CF857" & sSrcPOV
            HS.Exp "A#CF925" & sDestPOV & " = A#CF917" & sSrcPOV & " + A#CF915" & sSrcPOV & " + A#CF910" & sSrcPOV & " - A#CF920" & sSrcPOV & " - A#CF906" & sSrcPOV

            Hs.Exp "A#A495AVG" & sDestPOV & " = A#A495" & sSrcPrevY & " - A#A175E" & sSrcPrevY & " - A#A335E" & sSrcPrevY & " - A#A345I" & sSrcPrevY & "-A#A410" & sSrcPrevY & "-A#A415" & sSrcPrevY & " - A#A455E" & sSrcPrevY & " - A#A455I" & sSrcPrevY & " - A#A475" & sSrcPrevY & _
                " -(A#A495" & sSrcPOV & " - A#A175E" & sSrcPOV & " - A#A335E" & sSrcPOV & " - A#A345I" & sSrcPOV & " - A#A410" & sSrcPOV & " - A#A415" & sSrcPOV & " - A#A455E" & sSrcPOV & " - A#A455I" & sSrcPOV & " - A#A475" & sSrcPOV & ")"

            Hs.Exp "A#L495AVG" & sDestPOV & " = A#L495" & sSrcPOV & " - A#L215E" & sSrcPOV & " - A#L225" & sSrcPOV & " - A#L305E" & sSrcPOV & " - A#L315I" & sSrcPOV & " - A#L325E" & sSrcPOV & " - A#L326" & sSrcPOV & " - A#L455E" & sSrcPOV & " - A#L455I" & sSrcPOV & " - A#L475" & sSrcPOV & _
                " - (A#L495" & sSrcPrevY & " - A#L215E" & sSrcPrevY & " - A#L225" & sSrcPrevY & " - A#L305E" & sSrcPrevY & " - A#L315I" & sSrcPrevY & " - A#L325E" & sSrcPrevY & " - A#L326" & sSrcPrevY & " - A#L455E" & sSrcPrevY & " - A#L455I" & sSrcPrevY & " - A#L475" & sSrcPrevY & ")"

            HS.Exp "A#CF495help" & sDestPOV & " = -(A#L178" & sSrcPOV & " + A#L160" & sSrcPOV & ") + A#CL100" & sSrcPOV & " + A#CF_R70" & sSrcPOV & " + A#CF110" & sSrcPOV & " + A#CF120" & sSrcPOV & " + A#CF151" & sSrcPOV & " + A#CF153" & sSrcPOV & " + A#CF301" & sSrcPOV & " + A#CF303" & sSrcPOV & " + A#CF305" & sSrcPOV & " + A#CF307" & sSrcPOV & " + A#CF311" & sSrcPOV & " + A#CF331" & sSrcPOV & " + A#CF341" & sSrcPOV & " + A#CF343" & sSrcPOV & _
                " + A#CF361" & sSrcPOV & " + A#CF363" & sSrcPOV & " + A#CF365" & sSrcPOV & " + A#CF381" & sSrcPOV & " + A#CF382" & sSrcPOV & " + A#CF383" & sSrcPOV & " + A#CF385" & sSrcPOV & " + A#CF411" & sSrcPOV & " + A#CF437" & sSrcPOV & " + A#CF324" & sSrcPOV & " + A#CF325" & sSrcPOV & " + A#CF326" & sSrcPOV & " + A#CF327" & sSrcPOV & " + A#CF451" & sSrcPOV & " + A#CF453" & sSrcPOV & " + A#CF455" & sSrcPOV & " + A#CF457" & sSrcPOV & " + A#A495AVG" & sSrcPOV & " + A#L495AVG" & sSrcPOV
        Next
    End If
End Sub

Function CashFlowBegBal(StrPrevScenBEGBAL, sSrcC3)
    If sSrcC3 <> "CUSTOM3_TOP" Then
        sLeftString = Left(StrPrevScenBEGBAL, InStr(StrPrevScenBEGBAL, ".C3#")-1)
        sMidString = Right(StrPrevScenBEGBAL, Len(StrPrevScenBEGBAL) - InStr(StrPrevScenBEGBAL, ".C3#"))
        sRightString = ""
        If InStr(sMidString, ".") > 0 Then
            sRightString = Right(sMidString, Len(sMidString) - InStr(sMidString, ".")+1)
        End If

        If sSrcC3 = "ACQ_Total" Then

            sPrevScenBEGBAL = sLeftString & ".C3#ACQ_Total" & sRightString
        Else
            sPrevScenBEGBAL = sLeftString & ".C3#BEGBALwoACQ" & sRightString
        End If

        CashFlowBegBal = sPrevScenBEGBAL
    Else
        CashFlowBegBal = StrPrevScenBEGBAL
    End If
End Function

Sub Validations(StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,strApp,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,RLogger_Act,strParent,StrValue,StrPrevScenBEGBAL)

    rLoggerCounter = 0

    If StrScenario = "ACTUAL" Then
        IsValidationActive = CheckIsValidationActive(IntCurPeriodNum,IntYear,Str1stFcstPeriod,StrCurrFcstYear)
        If IsValidationActive = False Then

            Exit Sub
        End If
    End If

    EntUD = GetUD(StrEntity, "Entity", "")
    If Instr(EntUD,"/CloseStartDate:") > 0 or (Instr(EntUD,"/ClosedInAct/") > 0 and Ucase(StrScenario) = "ACTUAL") or (Instr(EntUD,"/ClosedInEst/") > 0 and Ucase(StrScenario) = "FORECAST") Then Exit Sub

    If StrScenario = "ACTUAL" Then
        EntitiesnotValidatedList = array("ADMIN_ENTITY","FLAG_ENTITY","NMAP_ICP")
    Else
        EntitiesnotValidatedList = array("ADMIN_ENTITY","FLAG_ENTITY","NMAP_ICP")
    End If
    If IsItemInList(StrEntity,EntitiesnotValidatedList) = True Then exit Sub

    StrRevLvForPhase1 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,1)
    Phase1RevLvNumber = ConvertReviewStatus(StrRevLvForPhase1)

    iMinRevLevel = 1

    If Phase1RevLvNumber < iMinRevLevel Or Phase1RevLvNumber > 9 Then
        StrRevLvForPhase2 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,2)
        Phase2RevLvNumber = ConvertReviewStatus(StrRevLvForPhase2)

        If Phase2RevLvNumber < iMinRevLevel Or Phase2RevLvNumber > 9 Then
            StrRevLvForPhase3 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,3)
            Phase3RevLvNumber = ConvertReviewStatus(StrRevLvForPhase3)

            If Phase3RevLvNumber < iMinRevLevel or Phase3RevLvNumber > 9 Then
                Exit Sub
            End If
        End If
    ElseIf bIsBase = FALSE Then

        StrRevLvForPhase2 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,2)
        Phase2RevLvNumber = ConvertReviewStatus(StrRevLvForPhase2)
    End If

    Avg_Rate = HS.GetRate("V#EUR.A#AVG_RATES")
    End_Rate = HS.GetRate("V#EUR.A#END_RATES")
    TransRate_USD = HS.GetRate("V#USD.A#AVG_RATES")

    If Avg_Rate = 0 then exit Sub

    If bIsBase = true Then
        ValToleranceAccount = "ValToleranceForBaseEnt"
    Else
        ValToleranceAccount = "ValToleranceForParentEnt"
    End If
    ToleranceEUR = HS.GetCell("A#"&ValToleranceAccount&".E#[None].V#EUR.C4#[None]")

    LegalLevel = False

    If HS.Scenario.Member() <> "NORSU_ACTUAL" Then
        If InStr(EntUD,"/LE/") > 0 or Instr(EntUD,"/GroupElimEnt/") > 0 Then LegalLevel = True
    Else
        If InStr(EntUD,"/LE/") > 0 or InStr(EntUD,"/NORSULEGAL/") > 0 or Instr(EntUD,"/GroupElimEnt/") > 0 Then LegalLevel = True
    End If

    StrQuarterMonth = GetQuarterMonth(StrPeriod)

    If bIsBase = False Then

        For each ValAcc in HS.Account.List("ValidationAccounts","[Base]")
            ValidLV = GetUD(ValAcc, "Account", "ValidAt")

            If ValidLv = "All" Or (ValidLV = "Legal" And LegalLevel = True) Then
                For each ValCounter in HS.Custom3.List("ValCounters","[Base]")
                    HS.Clear "A#"&ValAcc&".C3#"&ValCounter
                Next
                HS.Clear "A#"&ValAcc&".C3#ValOutcome"
            End If
        Next

        For each ValErrCounterAcc in hs.Account.List("ProcessControlValidationAccounts","[Base]")
            If Instr(ValErrCounterAcc,"ValErrCounter") > 0 Then
                Hs.Clear "A#"&ValErrCounterAcc

                Hs.Exp "A#"&ValErrCounterAcc&" = A#Store_"&ValErrCounterAcc
            End If
        Next
    End If

    HS.Clear "C3#CurrLevelVal"

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call CopyValidationComments(StrScenario)
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If UCASE(StrScenario) = "ACTUAL" Then
        If bIsBase = True Then
            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_SAP_Adjustment_Validations()
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If StrScenario = "BUDGET" or StrScenario = "FORECAST" Then
        If StrPeriod = "Dec" Then
            If bIsBase = "True" Then
                If RLogger_Act = 2 then rLoggerTimerStart = Timer
                Call EST_SoftEstimationInvestmentValidations()
                If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
            End If
        End If
    End If

    If StrScenario = "FORECAST" and bUseActualRules = False Then
        If bIsBase = "True" and StrEntity <> "[None]" Then
            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call EST_SoftEstimationClosedEntityDataValidation(StrEntity,IntCurPeriodNum,StrPeriod,IntYear,Str1stFcstPeriod,StrCurrFcstYear)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If Ucase(StrScenario) = "ACTUAL" Then

        Call ActualValidations(bIsBase, LegalLevel, StrPeriod, IntCurPeriodNum, StrEntity, Avg_Rate, End_Rate, StrBA, EntUD,strApp,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,IntYear,StrScenario,strParent,StrValue,StrPrevScenBEGBAL,RLogger_Act)
    End If

    If Ucase(StrScenario) = "ACTUAL" Then
        If bIsBase = True Then
            If (CInt(IntYear) = 2015 and CInt(IntCurPeriodNum) > 4) or CInt(IntYear) > 2015 Then
                If RLogger_Act = 2 then rLoggerTimerStart = Timer
                Call GatherICPValidationCommentsIntoICPTop()
                If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
            End If
        End If
    End If

    If RLogger_Act = 2 then rLoggerTimerStart = Timer

    OverrideAll = HS.GetCell("A#ValGeneralOverride.E#[None].V#EUR.C3#ValByPass.C4#[None]")
    OverrideEntity = HS.GetCell("A#ValEntityOverride.C3#ValByPass.C4#[None]")

    If ABS(OverrideAll) <> 1 and ABS(OverrideEntity) <> 1 Then
        ValC3List = array("C3#2ndValOutcome","C3{ValidationTechnical.[Base]}")

        GeneralValidationAccByPass = HS.GetCell("A#ValidationAccounts.E#[None].V#[None].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ValByPass.C4#[None].I#[ICP None]")
        If GeneralValidationAccByPass <> 0 Then
            bGeneralValidationAccByPass = True
            Call CheckGeneralValidationAccByPassList(GeneralValidationAccByPassList)
        Else
            bGeneralValidationAccByPass = False
        End If

        bSupportScenario = False
        If HS.Scenario.IsBase("FORECAST_SUPPORT", StrScenario) Then
            bSupportScenario = True
        End If

        For each ValC3 in ValC3List

            If StrScenario = "FORECAST" or StrScenario = "BUDGET" Then
                Set DataUnit = HS.OpenDataUnit(ValC3)
            Else
                Set DataUnit = HS.OpenDataUnit(ValC3&".C4#[None]")
            End If

            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1

                Call DataUnit.GetItem(i, sValAcc, sICP, sCustom1, sCustom2, C3ToProcess, sCustom4, ValOutcome)

                If ValOutcome <> 0 Then
                    PhaseForAcc = HS.GetSubmissionPhase("A#"&sValAcc&".I#"&sICP&".C1#"&sCustom1&".C2#"&sCustom2&".C3#"&C3ToProcess&".C4#"&sCustom4)
                    RevLvForAcc = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,PhaseForAcc)

                    If RevLvForAcc <> "Not Started" And RevLvForAcc <> "First Pass" Then

                        NeedsToBeValidated = False
                        If C3ToProcess = "2ndValOutcome" or C3ToProcess = "2ndValOutcome2" and bIsBase = True Then
                            NeedsToBeValidated = True
                        ElseIf C3ToProcess = "ValOutcome" or C3ToProcess = "2ndValCounter" Then
                            NeedsToBeValidated = ValidationNeeded(sValAcc,bIsBase,LegalLevel)
                        End If

                        If NeedsToBeValidated = True Then
                            NoGenTolerance = False
                            ValidateSpecial = True
                            ToleranceLOCAL_ForValAcc = 0

                            AccType = HS.Account.AccountType(sValAcc)
                            If Ucase(AccType) = "ASSET" or Ucase(AccType) = "LIABILITY" Then
                                ToleranceTransRate = End_Rate
                            Else
                                ToleranceTransRate = Avg_Rate
                            End If

                            ToleranceLocalCurr = 0
                            If ToleranceEUR <> 0 Then ToleranceLocalCurr = ToleranceEUR / ToleranceTransRate

                            If Abs(ValOutcome) <= ToleranceLocalCurr Then

                                If C3ToProcess = "2ndValCounter" Then
                                    NoGenTolerance = True
                                Else
                                    AccUD = GetUD(sValAcc, "Account", "")
                                    If InStr(AccUD,"/NoGenTolerance/") > 0 Then
                                        NoGenTolerance = True
                                    Else
                                        NoGenTolerance = False
                                    End If
                                End If
                            End If

                            If Abs(ValOutcome) > ToleranceLocalCurr or NoGenTolerance = True Then

                                If C3ToProcess = "2ndValCounter" Then
                                    bValidationNeeded = True
                                Else
                                    bValidationNeeded = ValidateValAcc(sValAcc,ValOutcome)
                                End If

                                If bValidationNeeded = True Then

                                    ValByPass = HS.GetCell("A#" &sValAcc&".C3#ValByPass.C1#CUSTOM1_TOP.C2#"&sCustom2&".C4#"&sCustom4)

                                    If ABS(ValByPass) = 0 Then
                                        PhaseNo = PhaseForAcc
                                        If bSupportScenario = TRUE Then
                                            PhaseNo = 1
                                        End If

                                        If PhaseNo <> 0 Then

                                            bAccountValidationByPass = False
                                            If bGeneralValidationAccByPass = True Then
                                                If IsItemInList(sValAcc,GeneralValidationAccByPassList) = True Then
                                                    bAccountValidationByPass = True
                                                End If
                                            End If

                                            If bGeneralValidationAccByPass = False Or bAccountValidationByPass = False Then
                                                If C3ToProcess <> "2ndValOutcome" and C3ToProcess <> "2ndValOutcome2" Then
                                                    bProceed = True

                                                    If C3ToProcess = "2ndValCounter" Then
                                                        CommentVal = False
                                                        If Instr(sValAcc,"CV") > 0 Then CommentVal = True

                                                        If CommentVal = True Then

                                                            sComment = ""
                                                            If LegalLevel = True and bIsBase = False Then
                                                                If Instr(GetUD(sValAcc, "Account", ""),"/CommentAtBase/") > 0 Then
                                                                    LegalEnt = HS.Entity.Member()
                                                                    For each BaseEnt in Hs.Entity.List(LegalEnt,"[Base]")
                                                                        If Instr(GetUD(BaseEnt, "Entity", ""),"/CloseStartDate:") = 0 Then

                                                                            CommentRequiredData = HS.GetCell("A#"&sValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CommentRequired.C4#[None].I#[ICP TOP].E#"&BaseEnt&".V#<Entity Currency>")
                                                                            If CommentRequiredData <> 0 Then
                                                                                sComment = HS.GetCellText("A#"&sValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP TOP].E#"&BaseEnt&".V#<Entity Currency>")
                                                                                If len(sComment) < 10 Then Exit For
                                                                            End If
                                                                        End If
                                                                    Next
                                                                Else
                                                                    sComment = HS.GetCellText("A#"&sValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP TOP]")
                                                                End If
                                                            Else
                                                                sComment = HS.GetCellText("A#"&sValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP TOP]")
                                                            End If

                                                            If len(sComment) >= 10 Then
                                                                bProceed = False
                                                            End If

                                                            HS.Exp "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#CommentRequired.C4#"&sCustom4&".I#"&sICP&" = 1 "

                                                            HS.Exp "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#CommentAmount.C4#"&sCustom4&".I#"&sICP&" = 999999999 "
                                                        End If

                                                    End If

                                                    If bProceed = True Then

                                                        If C3ToProcess = "2ndValCounter" And bIsBase = True Then
                                                            HardVal = False
                                                        Else
                                                            HardVal = HS.Account.IsBase("HardValidations",sValAcc)
                                                        End If

                                                        If HardVal = True Then

                                                            HS.Exp "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#HardValCounter_Ph"&PhaseNo&".C4#"&sCustom4&".I#"&sICP&" = 1 "

                                                            CurrPOV = "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#HardValCounter_Ph"&PhaseNo&".C4#"&sCustom4&".I#"&sICP

                                                            If CurrPOV <> PrevPOV Then
                                                                HS.Exp "A#ValErrCounter_Ph"&PhaseNo&".C1#[None].C2#[none].C3#INP.C4#[None].I#[ICP None] = " & _
                                                                       "A#ValErrCounter_Ph"&PhaseNo&".C1#[None].C2#[none].C3#INP.C4#[None].I#[ICP None] + 1 "

                                                            End If

                                                            PrevPOV = "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#HardValCounter_Ph"&PhaseNo&".C4#"&sCustom4&".I#"&sICP
                                                        Else

                                                            HS.Exp "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#SoftValCounter_Ph"&PhaseNo&".C4#"&sCustom4&".I#"&sICP&" = 1 "

                                                            HS.Exp "A#SoftValErrCounter = A#SoftValErrCounter + 1 "

                                                        End If
                                                    End If
                                                Else
                                                    If C3ToProcess = "2ndValOutcome" Then
                                                        CounterTarget = "2ndValCounter"
                                                    ElseIf C3ToProcess = "2ndValOutcome2" Then
                                                        CounterTarget = "2ndValCounter2"
                                                    End If
                                                    HS.Exp "A#"&sValAcc&".C1#"&sCustom1&".C2#"&sCustom2&".C3#"&CounterTarget&".C4#"&sCustom4&".I#"&sICP&" = 1 "

                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

            Next
        Next
    End If

    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If RLogger_Act = 2 then rLoggerTimerStart = Timer

    bIsAMER_CA = False
    If bIsBase = True Then

        bIsAMER_CA = HS.Entity.IsBase("AMER_CA",StrEntity)
    End If

    For Each C3Mbr In Array("HardValCounter_Ph1", "SoftValCounter_Ph1")
        Set DataUnit = HS.OpenDataUnit("A{IC_MatchingValidations.[Base]}.C3#"&C3Mbr&".C4#[None]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, sValAcc, sICP, sCustom1, sCustom2, sCustom3, sCustom4, dData)

            If HS.IsZero(dData) = FALSE Or C3Mbr = "HardValCounter_Ph1" Then
                HS.Exp "A#"&sValAcc&".I#"&sICP&".C1#"&sCustom1&".C2#"&sCustom2&".C3#"&sCustom3&".C4#C4_EUR = "&dData
                If bIsAMER_CA = True Then

                    HS.Exp "A#"&sValAcc&".I#"&sICP&".C1#"&sCustom1&".C2#"&sCustom2&".C3#"&sCustom3&".C4#C4_USD = "&dData
                End If
            End If
        Next
    Next

    If Ucase(StrScenario) = "ACTUAL" Then
        If bIsBase = True Then
            HS.Exp "A#ACQ_IC_MATCHING_ERROR_V.C1#[None].C2#[None].C3#HardValCounter_Ph1.C4#[None].I#[ICP None] = A#ActuaHardAcqlCValidations_Tolearance10.C1#CUSTOM1_TOP.C2#ACQTOT.C3#HardValCounter.C4#[None].I#[ICP Top]"
            nError = HS.GetCell("A#ACQ_IC_MATCHING_ERROR_V.C1#[None].C2#[None].C3#HardValCounter_Ph1.C4#[None].I#[ICP None]")
            If nError > 0 Then
                HS.Exp "A#ACQ_IC_MATCHING_ERROR_V.C1#[None].C2#[None].C3#ValOutcome.C4#[None].I#[ICP None] = 999999999"
                Call PopulateValidationLevels("ACQ_IC_MATCHING_ERROR_V","A#ACQ_IC_MATCHING_ERROR_V.C1#[None].C2#[None]")
            End If
        End If
    End If

    If bIsBase = False Then
        If Phase1RevLvNumber < 1 Then
            Hs.Clear "A#ValErrCounter_Ph1"
        End If
        If Phase2RevLvNumber < 1 Then
            Hs.Clear "A#ValErrCounter_Ph2"
        End If
    End If

    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call GEN_ValidatioByPassCheck(StrEntity,StrScenario,StrPeriod,bIsBase, LegalLevel)
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

End Sub

Sub ActualValidations(bIsBase, LegalLevel, StrPeriod, IntCurPeriodNum, StrEntity, Avg_Rate, End_Rate, StrBA, EntUD,strApp,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,IntYear,StrScenario,strParent,StrValue,StrPrevScenBEGBAL,RLogger_Act)
    rLoggerCounter = 0

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call ACT_ActualNewSpecialValidations(bIsBase,LegalLevel,StrPeriod,IntCurPeriodNum,StrEntity,End_Rate,IntYear,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,StrBA)
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call ACT_ActualHardAccValidations(bIsBase, LegalLevel, StrBA, "ActualOldSpecialValidations")
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If IntCurPeriodNum Mod 12 = 0 Then

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardAccValidations(bIsBase, LegalLevel, StrBA, "ActualHardAnnualNoteAccValidations")
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call ACT_ActualHardAccValidations(bIsBase, LegalLevel, StrBA, "ActualHardMonthlyNoteAccValidations")
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If IntCurPeriodNum Mod 3 = 0 Then

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardAccValidations(bIsBase, LegalLevel, StrBA, "ActualHardQuarterlyNoteAccValidations")
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If LegalLevel = True or bIsBase = True Then

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNoteCustomValidations(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNoteACQ2Validations(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteVal_DisposalsReported(bIsBase, LegalLevel, "ActHardNoteVal_DisposedAccDepreciationBiggerThanDisposedAcqCost")
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteVal_DisposalsReported(bIsBase, LegalLevel, "ActHardNoteVal_DisposalReportedInAcqCostAndNotReportedInAccDepr")
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteVal_DisposalsReported(bIsBase, LegalLevel, "ActHardNoteVal_DisposalReportedInAccDeprAndNotReportedInAcqCost")
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteValReportedAsPositive(bIsBase, LegalLevel, "ActHardNoteVal_A_DecrReportedAsPositive")
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteValReportedAsPositive(bIsBase, LegalLevel, "ActHardNoteVal_D_DecrReportedAsPositive")
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteVal_DecrNotReported(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActHardNoteVal_DEPREmissing(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote3Validations(LegalLevel, bIsBase, UCase(StrPeriod), StrEntity,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,StrPrevScenBEGBAL,IntYear,IntCurPeriodNum)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If (CInt(IntYear) >= 2022 And UCase(strApp) <> "CARGOHFM") Or CInt(IntYear) > 2022 Then
                If RLogger_Act = 2 then rLoggerTimerStart = Timer
                Call ACT_ActualHardNoteNTValidations(LegalLevel, bIsBase, UCase(StrPeriod), StrEntity,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,StrPrevScenBEGBAL,IntYear,IntCurPeriodNum)
                If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
            End If

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote4Validations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear,SuperGL_Ent)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote15CValidations(LegalLevel, bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote15CValidations2(LegalLevel, bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote15CValidations3(LegalLevel, bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote15C_PROV_MIN_Validations(LegalLevel, bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_RealEstateValidations(LegalLevel, bIsBase, UCase(StrPeriod))
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote14_19Validations(LegalLevel,bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If IntCurPeriodNum Mod 12 = 0 and (bIsBase = True or LegalLevel = True) Then

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ActualHardNote13Validations(LegalLevel,bIsBase,StrEntity,bDoYearlyCalc)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsBase = True or LegalLevel = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardCommentValidations(Avg_Rate,StrPeriod, bIsBase, LegalLevel,IntYear,IntCurPeriodNum)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsBase = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardPeriodicChangeCommentValidations(Avg_Rate,StrPeriod,LegalLevel,bIsBase)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call ACT_ActualHardSpecialCommentValidations(Avg_Rate,StrPeriod,StrEntity,StrBA,IntCurPeriodNum,LegalLevel,bIsBase,EntUD,IntYear)
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If bIsBase = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardHeadcountCommentValidations(Avg_Rate,StrPeriod,StrEntity,StrBA, LegalLevel, bIsBase)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsBase = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_COP_CommentValidations(Avg_Rate,StrPeriod,StrEntity,StrBA, LegalLevel, bIsBase)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call Act_ActualHardEnterAsPositiveCommentValidations(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardC2AdjCommentValidations(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardC2Note20CommentValidations(bIsBase, LegalLevel,StrPeriod)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNoteCurrPeriodDifferThanZeroButNoDataInPrev4Q(bIsBase,LegalLevel,IntCurPeriodNum)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If bIsBase = True Then

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardCAPEXValidations()
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHardInventoryValidations()
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call  ACT_ActualHardPC99andCBS99Validations(StrEntity,LegalLevel,bIsBase)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If bIsBase = True or LegalLevel = True Then

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualEnterAsPositiveQuarterlyValidations(LegalLevel,bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualSignCheckValidations("ActualEnterAsNegativeQuarterlyValidations", FALSE,LegalLevel,bIsBase,SuperGL_Ent)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If IntCurPeriodNum = 12 Then
        If bIsBase = True or LegalLevel = True Then
            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualEnterAsPositiveYearlyValidations(LegalLevel,bIsBase)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If bIsBase = True Then

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualSignCheckValidations("ActualEnterAsPositiveValidations", TRUE,LegalLevel,bIsBase,SuperGL_Ent)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualSignCheckValidations("ActualEnterAsNegativeValidations", FALSE,LegalLevel,bIsBase,SuperGL_Ent)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualSignCheckAllMembersValidations("ActualEnterAsPositiveAllMembersCommentValidations", TRUE,LegalLevel,bIsBase)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ICValidations(StrEntity,bIsBase,StrPeriod,IntYear,StrBA,strApp)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualHard_NMAPValidations()
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If bIsBase = True and IntCurPeriodNum Mod 3 = 0 Then

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualDataNotReportedValidations(bIsBase,LegalLevel,IntCurPeriodNum)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualDataNotReportedValidations_2(bIsBase,LegalLevel,IntCurPeriodNum)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    End If

    If IntCurPeriodNum Mod 3 = 0 And StrPeriod <> "Mar" Then
        If LegalLevel = True or bIsBase = True Then
            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualHardNote20C2Validations(bIsBase, LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If bIsBase = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call IFRS_LocalGAAPHard_HardCodedValidations(StrEntity,IntYear,IntCurPeriodNum, bIsBase, LegalLevel)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            If StrPeriod <> "Mar" Then

                If RLogger_Act = 2 then rLoggerTimerStart = Timer
                Call ACT_ActualSoftYTDCheckValidations(bIsBase,LegalLevel)
                If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
            End If
        End If
    End If

    If StrPeriod = "Jun" or StrPeriod = "Sep" or StrPeriod = "Dec" Then
        If LegalLevel = True or bIsBase = True Then
            If RLogger_Act = 2 then rLoggerTimerStart = Timer
            Call ACT_ActualSoftQ2Q4PrevQdataCheckValidations(bIsBase,LegalLevel)
            If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
        End If
    End If

    If LegalLevel = True or bIsBase = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_ActualSoftCurrPeriodZeroButDataInPrevY(bIsBase,LegalLevel,IntCurPeriodNum)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            Call SoftSpecificNoteCommentValidations(bIsBase,LegalLevel,IntCurPeriodNum)
        End If
    End If

    If RLogger_Act = 2 then rLoggerTimerStart = Timer
    Call ActualSoftSpecialValidations(LegalLevel,IntCurPeriodNum,bIsBase)
    If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

    If bIsBase = True Then
        If RLogger_Act = 2 then rLoggerTimerStart = Timer
        Call ACT_CheckLegalLevelValidationStatus(bIsBase,LegalLevel,StrEntity,EntUD,StrScenario,StrPeriod)
        If RLogger_Act = 2 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "
    End If

End Sub

Function CheckIsValidationActive(IntCurPeriodNum,IntYear,Str1stFcstPeriod,StrCurrFcstYear)

    Validate_nMonths_Back = 6
    Validate_nMonths_Forward = 6

    Redim ValidYearPeriod(100)

    If CInt(Str1stFcstPeriod) = 1 Then
        ReportingPeriod = 12
        ReportingYear = CInt(StrCurrFcstYear) - 1
    Else
        ReportingPeriod = CInt(Str1stFcstPeriod) - 1
        ReportingYear = CInt(StrCurrFcstYear)
    End If

    c = 0 : w = 0 : g = 0 : Counter = 0
    For i = 1 to Validate_nMonths_Forward
        If c = 0 Then
            fp = ReportingPeriod + i
            If fp <= 12 Then
                fy = ReportingYear
            Else
                fy = ReportingYear + 1
                fp = 1
            End If

            ValidYearPeriod(Counter) = fy&"_"&fp
            Counter = Counter + 1
            c = c + 1
        Else
            fp = fp + 1
            If fp <= 12 Then

                ValidYearPeriod(Counter) = fy&"_"&fp
                Counter = Counter + 1

            Else
                fp2 = 1 + w
                If fp2 = 1 Then fy2 = fy + 1
                If fp2 <= 12 Then

                    ValidYearPeriod(Counter) = fy2&"_"&fp2
                    Counter = Counter + 1
                    w = w + 1
                Else
                    fp3 = 1 + g
                    If fp3 = 1 Then fy3 = fy + 1
                    If fp3 <= 12 Then

                        ValidYearPeriod(Counter) = fy3&"_"&fp3
                        Counter = Counter + 1
                    Else

                    End If
                    g = g + 1
                End If
            End If
        End If
    Next

    c = 0     :    d = 0     :    e = 0

    For i = Validate_nMonths_Back to 1 Step - 1
        If c = 0 Then

            ValidYearPeriod(Counter) = ReportingYear&"_"&ReportingPeriod
            c = c + 1
            Counter = Counter + 1
        Else
            p = ReportingPeriod - c
            If p >= 1 Then

                ValidYearPeriod(Counter) = ReportingYear&"_"&p
                c = c + 1
                Counter = Counter + 1
            Else
                p2 = 12 - d
                y2 = CInt(ReportingYear) - 1
                If p2 >= 1 Then

                    ValidYearPeriod(Counter) = y2&"_"&p2
                    d = d + 1
                    Counter = Counter + 1
                Else
                    p3 = 12 - e
                    y3 = CInt(ReportingYear) - 2
                    If p3 >= 1 Then

                        ValidYearPeriod(Counter) = y3&"_"&p3
                        e = e + 1
                        Counter = Counter + 1
                    Else

                    End If
                End If
            End If
        End If
    Next

    PrevReportingYear = ReportingYear - 1
    If IsItemInList(PrevReportingYear&"_12",ValidYearPeriod) = False Then

        ValidYearPeriod(Counter) = PrevReportingYear&"_12"
        Counter = Counter + 1
    End If

    Redim Preserve ValidYearPeriod(Counter-1)

    If IsItemInList(IntYear&"_"&IntCurPeriodNum,ValidYearPeriod) = True Then CheckIsValidationActive = True Else CheckIsValidationActive = False
End Function

Sub CopyValidationComments(StrScenario)

    If StrScenario = "ACTUAL" Then

        Set DataUnit = HS.OpenDataUnit("C3#CopyComments")
        NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                If dData <> 0 Then
                    PhaseForAcc = HS.GetSubmissionPhase("A#"&StrAccount&".I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4)

                    If CInt(PhaseForAcc) = 1 Then
                        CommentPOV = "A#"&StrAccount&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].P#Prior"
                    ElseIf CInt(PhaseForAcc) = 2 Then
                        CommentPOV = "A#"&StrAccount&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].P#Cur-3"
                    End If

                    PrevComment = HS.GetCellTextWithLabel(CommentPOV,"[Default]")

                    HS.SetCellTextWithLabel "A#"&StrAccount&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None]", "[Default]", PrevComment

                    HS.Clear "A#"&StrAccount&".I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#"&StrC3&".C4#"&StrC4
                End If
            Next
    End If
End Sub

Sub ACT_SAP_Adjustment_Validations()

    Set DataUnit = HS.OpenDataUnit("C3#ADJ")
    NumItems = DataUnit.GetNumItems

    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If dData <> 0 And HS.Account.IsCalculated(StrAccount) = FALSE Then
            AccUD = GetUD(StrAccount, "Account", "")
            If Instr(AccUD,"/SAP_LOAD/") > 0 or Instr(AccUD,"/SAP_HR_LOAD/") > 0 Then

                AccType = HS.Account.AccountType(StrAccount)
                If UCase(AccType) = "EXPENSE" Then InputData = -1 Else InputData = 1

                StrPOV = "A#"&StrAccount&".I#"&StrICP&".C1#"&StrC1&".C2#"&StrC2&".C3#ADJUSTED.C4#"&StrC4
                Call HS.SetDataWithPOV(StrPOV, InputData, False)
            End If
        End If
    Next
End Sub

Sub ACT_ActualHardCommentValidations(Avg_Rate,StrPeriod, bIsBase, LegalLevel,IntYear,IntCurPeriodNum)
    ActualHardCommentValidationsList = HS.Account.List("ActualHardCommentValidations","[Base]")

    For each CommentValAcc in ActualHardCommentValidationsList
        Validate = ValidationNeeded(CommentValAcc,bIsBase,LegalLevel)

        If Validate = True Then

            ValidPeriod = True
            If StrPeriod <> "Mar" and StrPeriod <> "Jun" and StrPeriod <> "Sep" and StrPeriod <> "Dec" Then
                SubmissionGroup = HS.Account.SubmissionGroup(CommentValAcc)
                If CInt(SubmissionGroup) > 1 Then
                    ValidPeriod = False
                End If
            End If

            If ValidPeriod = True Then
                C2ToCheck = GetUD(CommentValAcc, "Account", "ValC2")
                If C2ToCheck <> "" Then
                    StrC2ToCheck = C2ToCheck
                Else
                    StrC2ToCheck = "CUSTOM2_TOP"
                End if

                PrimaryAcc = MID(CommentValAcc,1,InstrRev(CommentValAcc,"_")-1)

                Set DataUnit = HS.OpenDataUnit("A#" & PrimaryAcc &".C1#CUSTOM1_TOP.C2#"&StrC2ToCheck&".C3#CUSTOM3_TOP.C4#[None].I#[ICP TOP]")
                NumItems = DataUnit.GetNumItems

                For i = 0 To NumItems - 1
                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                    If dData <> 0 Then

                        Call ValidationCommentCheck(CommentValAcc, dData, LegalLevel, bIsBase)
                    End if
                Next
            End If
        End If
    Next
End Sub

Sub ACT_ActualHardPeriodicChangeCommentValidations(Avg_Rate,StrPeriod,LegalLevel,bIsBase)

    ActualHardCommentValidationsList = HS.Account.List("ActualHardPeriodicChangeCommentValidations","[Base]")

    For each CommentValAcc in ActualHardCommentValidationsList

        PrimaryAcc = Mid(CommentValAcc,1,Len(CommentValAcc)-3)
        If Right(CommentValAcc, 3) = "3CV" Then
            PrimaryAcc = Mid(CommentValAcc,1,Len(CommentValAcc)-4)
        End If

        CurrData = HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        PrevData = HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Last.Y#Prior")

        CheckACQ_BS = Array("A105_CV","A165I_CV","A167A_CV","A166E_CV")
        If IsItemInList(CommentValAcc,CheckACQ_BS) = True Then
            CurrData = CurrData - HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#ACQ.C3#CUSTOM3_TOP.C4#[None]")
        End If

        bValidateChange = TRUE

        If CommentValAcc = "A126_3CV" Or CommentValAcc = "A136_3CV" Or CommentValAcc = "L225_3CV" Then
            bValidateChange = False

            If StrPeriod <> "Jan" Then
                PrevData = HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Prior")
            End If

            If CommentValAcc = "L225_3CV" Then
                PrimaryAcc2 = "L326"
                CurrData2 = HS.GetCell("A#"&PrimaryAcc2&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                PrevData2 = HS.GetCell("A#"&PrimaryAcc2&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Prior")

                CurrData = CurrData + CurrData2
                PrevData = PrevData + PrevData2
            End If
        End If

        PeriodicChange = CurrData - PrevData
        If (PeriodicChange <> 0 And bValidateChange = TRUE) Or (PeriodicChange > -0.1 And PeriodicChange < 0.1 And bValidateChange = FALSE) Then
            If Int(PeriodicChange) = 0 Then PeriodicChange = CurrData

            If PeriodicChange <> 0 Then

                Call ValidationCommentCheck(CommentValAcc, PeriodicChange, LegalLevel, bIsBase)
            End If
        End If
    Next
End Sub

Sub ACT_ActualHardC2AdjCommentValidations(bIsBase,LegalLevel)
    ActualHardC2AdjCommentValidationsList = HS.Account.List("ActualHardC2AdjCommentValidations","[Base]")

    For each CommentValAcc in ActualHardC2AdjCommentValidationsList

        PrimaryAcc = MID(CommentValAcc,1,Instr(CommentValAcc,"_")-1)

        ValOutcomeTarget = CheckC3TargetForValidation(CommentValAcc,LegalLevel,bIsBase)

        HS.Exp "A#"&CommentValAcc&".C2#[None].C3#"&ValOutcomeTarget&" = A#"&PrimaryAcc&".C2#A_ADJ.C3#CUSTOM3_TOP - A#"&PrimaryAcc&".C2#D_ADJ.C3#CUSTOM3_TOP"
        dData = HS.GetCell("A#"&CommentValAcc&".I#[ICP Top].C1#[None].C2#[None].C3#"&ValOutcomeTarget&".C4#[None]")

        If dData <> 0 Then
            If ValidateValAccAndGenTolerance(CommentValAcc,dData,bIsBase) = True Then
                Call PopulateValidationLevels(CommentValAcc, "A#"&CommentValAcc&".C2#[None]")

                If ValOutcomeTarget = "ValOutcome" Then

                    sComment = HS.GetCellText("A#"&CommentValAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None]")

                    StrPOV_CommentRequired = "A#"&CommentValAcc&".C1#[None].C2#[None].C3#CommentRequired.C4#[None].I#[ICP None]"
                       Call HS.SetDataWithPOV(StrPOV_CommentRequired, 1, False)
                    StrPOV_CommentAmount = "A#"&CommentValAcc&".C1#[None].C2#[None].C3#CommentAmount.C4#[None].I#[ICP None]"
                       Call HS.SetDataWithPOV(StrPOV_CommentAmount, dData, False)
                End If

                If (len(sComment) >= 10 and LegalLevel = True) Then

                    HS.Clear "A#"&CommentValAcc&".C2#[None].C3#ValOutcome"
                End If
            End If
        End If
    Next
End Sub

Sub ACT_ActualHardC2Note20CommentValidations(bIsBase,LegalLevel,StrPeriod)
    ActualHardC2Note20CommentValidationsList = HS.Account.List("ActualHardC2Note20CommentValidations", "[Base]")

    For Each CommentValAcc In ActualHardC2Note20CommentValidationsList
        PrimaryAcc = MID(CommentValAcc, 1, Instr(CommentValAcc, "_")-1)

        sSrcPeriod = ".Y#PRIOR.P#LAST"
        If CommentValAcc = "N2022_2CV" Or CommentValAcc = "N2024_2CV" Or CommentValAcc = "N2026_2CV" Or CommentValAcc = "N2029_2CV" Or CommentValAcc = "N2038_2CV" Then
            sSrcPeriod = ".P#CUR-3"
        End If

        If CommentValAcc = "N2026_3CV" Or CommentValAcc = "N2029_3CV" Then

            If CommentValAcc = "N2026_3CV" Then
                sCompAcc = "N2080"
            ElseIf CommentValAcc = "N2029_3CV" Then
                sCompAcc = "N2090"
            End If

            Set DataUnit=HS.OpenDataUnit("A#" & sCompAcc & ".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top].W#QTD")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, sAccount, sICP, sC1, sC2, sC3, sC4, dData)
                If HS.IsZero(dData) = FALSE Then
                    dBSValue = HS.GetCell("A#" & PrimaryAcc & ".C1#CUSTOM1_TOP.C2#" & sC2 & ".C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")

                    If HS.IsZero(dBSValue) = TRUE And dData > 0 Then
                        Call ValidationCommentCheck(CommentValAcc, dData, LegalLevel, bIsBase)
                    End If
                End If
            Next
        Else
            Set DataUnit=HS.OpenDataUnit("A#" & PrimaryAcc & ".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]" & sSrcPeriod)
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, sAccount, sICP, sC1, sC2, sC3, sC4, dData)
                If HS.IsZero(dData) = FALSE And sC2 <> "ARHI" And sC2 <> "JRHI" Then
                    dValue = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#" & sC2 & ".C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")

                    If HS.IsZero(dValue) = TRUE Then

                        If ValidateValAccAndGenTolerance(CommentValAcc,dData,bIsBase) = True Then

                            Call ValidationCommentCheck(CommentValAcc, dData, LegalLevel, bIsBase)

                        End If
                    End If
                End If
            Next
        End If
    Next
End Sub

Sub ACT_ActualHardCAPEXValidations()
    Set DataUnit = HS.OpenDataUnit("A{CAPEX.[Base]}.C3#CUSTOM3_TOP")
    NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            If dData < 0 Then
                ValAcc = StrAccount&"_V"
                If StrAccount = "OC21" or StrAccount = "OC98" or StrAccount = "OC100" or StrAccount = "OC26" or StrAccount = "OC40" or StrAccount = "DC40" or StrAccount = "OC45" or StrAccount = "OC66" or StrAccount = "DC66" or StrAccount = "OC07" or StrAccount = "OC05" or StrAccount = "DC67" Then

                Else

                    If Hs.Account.IsBase(ActualHardC2AdjCommentValidations,ValAcc) = False Then
                        Call WriteTofile("Error in validations: CAPEX account "&StrAccount&" does not have validation account specified")
                        Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#"&StrC1&".C2#"&StrC2&".C4#[None].I#"&StrICP)
                    Else

                        Call PopulateValidationAccountWithC1(ValAcc, dData, StrC1)
                    End If
                End If
            End if
        Next
End Sub

Sub ACT_ActualHardNoteACQ2Validations(bIsBase,LegalLevel)
    For each ValAcc in HS.Account.List("ActualHardNoteACQ2Validations","[Base]")
        PrimaryAcc = Mid(ValAcc,1,Instr(ValAcc,"_")-1)

        ValOutcomeTarget = CheckC3TargetForValidation(ValAcc,LegalLevel,bIsBase)

        Value_A = Hs.GetCell("A#"&PrimaryAcc&".C1#CUSTOM1_TOP.C2#A.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        Value_D = Hs.GetCell("A#"&PrimaryAcc&".C1#CUSTOM1_TOP.C2#D.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

        If Value_A < 0 and Value_D < 0 Then
            If Value_A < Value_D Then
                HS.Exp "A#"&ValAcc&".C1#[None].C2#[None].C3#"&ValOutcomeTarget&" = "&Value_A
                Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#[None].C2#[None]")
            Else
                HS.Exp "A#"&ValAcc&".C1#[None].C2#[None].C3#"&ValOutcomeTarget&" = "&Value_D
                Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#[None].C2#[None]")
            End If
        ElseIf Value_A < 0 Then
            HS.Exp "A#"&ValAcc&".C1#[None].C2#[None].C3#"&ValOutcomeTarget&" = "&Value_A
            Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#[None].C2#[None]")
        ElseIf Value_D < 0 Then
            HS.Exp "A#"&ValAcc&".C1#[None].C2#[None].C3#"&ValOutcomeTarget&" = "&Value_D
            Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#[None].C2#[None]")
        End If
    Next
End Sub

Sub ACT_ActualHardInventoryValidations()
    For each InvValAcc in Hs.Account.List("ActualHardInventoryValidations","[Base]")

        If HS.Account.IsBase("ActInvVal_Net_Ext",InvValAcc) Then
            C2ToValidate = "Net_Ext"
        ElseIf HS.Account.IsBase("ActInvVal_Net_Int",InvValAcc) Then
            C2ToValidate = "Net_Int"
        End If

        PrimaryAcc = Mid(InvValAcc,1,Instr(InvValAcc,"_")-1)

        Set DataUnit = HS.OpenDataUnit("A#"&PrimaryAcc&".C2#"&C2ToValidate&".C3#CUSTOM3_TOP.I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                If dData < 0 Then

                    Call PopulateValidationAccountWithC1(InvValAcc, dData, StrC1)
                End If
            Next
    Next
End Sub

Sub ACT_ActualHardPC99andCBS99Validations(StrEntity,LegalLevel,bIsBase)

    If HS.Entity.IsBase("MACGREGOR",StrEntity) Then
        For each ValAcc in HS.Account.List("ActualHardPC99andCBS99Validations","[Base]")
            PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
            C1ToValidate = GetUD(ValAcc, "Account", "ValC1")

            dData = HS.GetCell("A#"&PrimaryAcc&".C1#"&C1ToValidate&".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If dData <> 0 Then

                Call CheckValidationComment(ValAcc, dData, LegalLevel, bIsBase, dData)
            End If
        Next
    End If
End Sub

Sub ACT_ActualHardSpecialCommentValidations(Avg_Rate,StrPeriod,StrEntity,StrBA,IntCurPeriodNum,LegalLevel,bIsBase,EntUD,IntYear)
    End_Rate = HS.GetRate("V#EUR.A#END_RATES")
    Tolerance100_EndRate = 100 / End_Rate

    sSrcPOV = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcDIM = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcNONE = ".E#[None].V#[None].C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]"
    sSrcPrevY = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#BEGBALtot.C4#CUSTOM4_TOP.Y#PRIOR.P#LAST"

    Validate = ValidationNeeded("EQ_CHANGE_CV",bIsBase,LegalLevel)
    If Validate = True Then

        sSum = 0

        sSum = sSum + HS.GetCell("A#L190" & sSrcPrevY)
        sSum = sSum - HS.GetCell("A#L190" & sSrcPOV)
        sSum = sSum + HS.GetCell("A#L190.C2#ACQ" & sSrcDIM)
        sSum = sSum - HS.GetCell("A#L190.C2#DISPBUSIN" & sSrcDIM)

        L165_DivInt = HS.GetCell("A#L165.C2#RET_DPI" & sSrcDIM)
        L165_DivExt = HS.GetCell("A#L165.C2#RET_DPE" & sSrcDIM)
        L178_PrevY = HS.GetCell("A#L178" & sSrcPrevY)

        Total_EQ_Change = sSum - L165_DivInt - L165_DivExt + L178_PrevY

        If Total_EQ_Change <> 0  Then

            Call CheckValidationComment("EQ_CHANGE_CV", Total_EQ_Change, LegalLevel, bIsBase, Total_EQ_Change)
        End If
    End If

    If bIsBase = True Then

        iCounter = 0
        ReDim aPercents(11)
        For Each sPercentAcc In Array("N15092b", "N15091b", "N15090b", "N15080b", "N15081b", "N15082b", "N15083b", "N15084b", "N15085b", "N15086b", "N15087b", "N15089b")
            aPercents(iCounter) = HS.GetCell("A#" & sPercentAcc & sSrcNONE) / 100
            iCounter = iCounter + 1
        Next

        iSum = 0
        iCounter = 0
        For Each sAcc In Array("A357", "A315", "AR18", "AR11", "AR12", "AR13", "AR14", "AR15", "AR16", "AR19", "AR17", "AR22")
            iSum = iSum + (HS.GetCell("A#" & sAcc & sSrcPOV) * aPercents(iCounter))
            iCounter = iCounter + 1
        Next

        A325 = HS.GetCell("A#A325" & sSrcPOV)
        Change = iSum * 0.8

        If Change > -A325 Then

            Call ValidationCommentCheck("A325_CV", Change, LegalLevel, bIsBase)
        End If
    End If

    If bIsBase = True Then
        RM35 = HS.GetCell("A#RM35" & sSrcPOV)
        A325_PrevY = HS.GetCell("A#A325" & sSrcPOV & ".Y#Prior.P#Last")
        A325 = HS.GetCell("A#A325" & sSrcPOV)
        A325_ACQ = HS.GetCell("A#A325.C1#CUSTOM1_TOP.C2#ACQ.C3#CUSTOM3_TOP.C4#[None].I#[ICP None]")

        Change = RM35 - (A325_PrevY + A325_ACQ - A325)
        If Change <> 0 Then

            Call ValidationCommentCheck("RM35_CV", Change, LegalLevel, bIsBase)
        End If
    End If

    For Each sAccount In Array("RM93", "HC004", "MORBADJT", "RM67", "L175", "RM16", "A234", "A325")
        If (IntCurPeriodNum Mod 3 = 0 Or (sAccount <> "A234" And sAccount <> "A325")) And (Instr(EntUD,"/HEDGE/") = 0 Or (sAccount <> "L175" And sAccount <> "RM16")) Then
            bValidate = TRUE

            If bValidate = TRUE Then
                Call ACT_ActualHardDataCommentValidation(bIsBase, LegalLevel, sAccount)
            End If
        End If
    Next

    If bIsBase = True Then
        dData = HS.GetCell("A#HC004.C1#CBS99.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        dData2 = HS.GetCell("A#HC004.C1#CBS98.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        Total = dData + dData2
        If Total <> 0 Then
            Call CheckValidationComment("HC004_2CV", dData, LegalLevel, bIsBase, dData)
        End If
    End If

    If bIsBase = True Then
        dData = HS.GetCell("A#RM93.C1#CBS99.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        dData2 = HS.GetCell("A#RM93.C1#CBS98.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        Total = dData + dData2
        If Total <> 0 Then
            Call ValidationCommentCheck("RM93_2CV", dData, LegalLevel, bIsBase)
        End If
    End If

    If CInt(IntCurPeriodNum) <> 1 Then Call ACT_ActualHardDataReportedCommentValidation(bIsBase, LegalLevel, "RM69")

    If IntCurPeriodNum > 1 Then

        dDataPrevMonth = HS.GetCell("A#RM91.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Prior")
        If dDataPrevMonth <> 0 Then Call ACT_ActualHardDataReportedCommentValidation(bIsBase, LegalLevel, "RM91")

        dDataPrevMonth = HS.GetCell("A#RM92.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Prior")
        If dDataPrevMonth <> 0 Then Call ACT_ActualHardDataReportedCommentValidation(bIsBase, LegalLevel, "RM92")
    End If

    If IntCurPeriodNum Mod 3 = 0 Then

        Call ACT_ActualHardLegalCommentValidation(bIsBase, LegalLevel, "N0520_2CV")
        Call ACT_ActualHardLegalCommentValidation(bIsBase, LegalLevel, "N0520_3CV")
    End If

    If StrPeriod = "Mar" or StrPeriod = "Jun" or StrPeriod = "Sep" or StrPeriod = "Nov" Then
        Validate = ValidationNeeded("R873I_CV",bIsBase,LegalLevel)
        If Validate = True Then

            Call ACT_ActualHardDataChangedCommentValidation(bIsBase, LegalLevel, "R873I")
        End If
    End If

    If bIsBase Then
        For Each sAccount In Array("A355E", "L355E")
            Call ACT_ActualHardDataChangedCommentValidation(bIsBase, LegalLevel, sAccount)
        Next
        Call ACT_ActualHardDataChangedCommentValidation(bIsBase, LegalLevel, Array("L425","L247"))
    End If

    If bIsBase Then
        If Instr(EntUD,"/HEDGE/") > 0 Then
            RM16 = HS.GetCell("A#RM16" & sSrcPOV)
            RM17 = HS.GetCell("A#RM17" & sSrcPOV)
            If RM16 <> 0 and RM17 = 0 Then
                If ValidateValAccAndGenTolerance("RM17_CV",RM16,bIsBase) = True Then

                    Call CheckValidationComment("RM17_CV", "999999999", LegalLevel, bIsBase, "999999999")
                End If
            End If
        End If
    End If

    If bIsBase Then
        RM01E = HS.GetCell("A#RM01E" & sSrcPOV)
        If RM01E <> 0 Then
            R82NET = HS.GetCell("A#R82NET" & sSrcPOV)
            If R82NET <> 0 Then

                sSum = 0
                For Each sAcc In Array("RM60", "RM16", "RM17", "RM59")
                    If sSum = 0 Then
                        sSum = HS.GetCell("A#" & sAcc & sSrcPOV)
                    End If
                Next

                If RM01E <> 0 and R82NET <> 0 and sSum = 0 Then
                    If ValidateValAccAndGenTolerance("R82NET_CV",RM01E,bIsBase) = True or ValidateValAccAndGenTolerance("R82NET_CV",R82NET,bIsBase) = True Then
                        sSum = RM01E + R82NET

                        Call CheckValidationComment("R82NET_CV", "999999999", LegalLevel, bIsBase, sSum)
                    End If
                End If
            End If
        End If
    End If

    If bIsBase Then
        RM16 = 0
        RM17 = 0
        RM59 = 0
        BS_TOTAL = 0

        RM60 = HS.GetCell("A#RM60" & sSrcPOV)
        If RM60 = 0 Then
            RM16 = HS.GetCell("A#RM16" & sSrcPOV)
            RM17 = HS.GetCell("A#RM17" & sSrcPOV)
            RM59 = HS.GetCell("A#RM59" & sSrcPOV)

            If RM16 <> 0 Or (RM17 <> 0 And RM59 <> 0) Then

                For Each sAcc In Array("A189", "A361", "L251", "L377", "L175")
                    BS_TOTAL = BS_TOTAL + HS.GetCell("A#" & sAcc & sSrcPOV)
                    BS_TOTAL = BS_TOTAL + HS.GetCell("A#" & sAcc & sSrcPOV & ".P#PRIOR")
                Next

            End If
        End If

        If BS_TOTAL = 0 and RM60 = 0 and (RM16 <> 0 or RM17 <> 0 and RM59 <> 0) Then
            If ValidateValAccAndGenTolerance("RM60_CV",RM16,bIsBase) = True or ValidateValAccAndGenTolerance("RM60_CV",RM17,bIsBase) = True or ValidateValAccAndGenTolerance("RM60_CV",RM59,bIsBase) = True Then
                sSum = RM16 + RM17 + RM59

                Call CheckValidationComment("RM60_CV", "999999999", LegalLevel, bIsBase, sSum)
            End If
        End If
    End If

    If StrEntity <> "MNLD" Then

        For Each sAccount In Array("A188E", "A376E", "L249E", "L376E")
            Call ACT_ActualHardDataCommentValidation(bIsBase, LegalLevel, sAccount)
        Next
    End If

    If bIsBase And IntCurPeriodNum Mod 3 = 0 Then
        EntDefCurr = HS.Entity.DefCurrency(StrEntity)
        If EntDefCurr <> "EUR" Then
            sSum = 0
            R825 = HS.GetCell("A#R825" & sSrcPOV)
            If R825 = 0 Then

                For Each sAcc In Array("A169", "A351", "L457", "L215E", "L325E")
                    sSum = sSum + HS.GetCell("A#" & sAcc & sSrcPOV)
                    sSum = sSum - HS.GetCell("A#" & sAcc & sSrcPOV & ".P#PRIOR")
                Next
            End If

            If R825 = 0 and sSum <> 0 Then

                Call ValidationCommentCheck("R825_CV", sSum, LegalLevel, bIsBase)
            End If
        End If
    End If

    If LegalLevel = TRUE Then
        iValue = HS.GetCell("A#Reporting_deadline_flag.E#[None].I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        If HS.IsZero(iValue) = FALSE Then
            StrRevLvForPhase = HS.ReviewStatusUsingPhaseID("S#ACTUAL.P#" & StrPeriod & ".E#" & StrEntity, iValue)
            PhaseRevLVNumber = ConvertReviewStatus(StrRevLvForPhase)

            dData = 0
            If PhaseRevLVNumber >= 3 Then
                dData = HS.GetCell("A#Reporting_deadline_flag.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
            End If

            If PhaseRevLVNumber > 0 And PhaseRevLVNumber < 3 Or HS.IsZero(dData) = FALSE Then

                HS.Exp "A#Reporting_deadline_flag.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None] = " & iValue

                Call CheckValidationComment("ReportingLate_CV", "999999999", LegalLevel, bIsBase, iValue)
            End If
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If bIsBase = True or LegalLevel = TRUE Then

            For Each sAcc In Array("N1103", "N1609")
                dData = HS.GetCell("A#" & sAcc & sSrcPOV)
                If sAcc = "N1103" Then
                    dValue = HS.GetCell("A#N1114" & sSrcPOV)
                Else
                    dValue = HS.GetCell("A#N1614" & sSrcPOV)
                End If

                If dData >= Tolerance100_EndRate and dData >= (dValue * 0.75) Then
                    Call ValidationCommentCheck(sAcc & "_CV", dData, LegalLevel, bIsBase)
                End If
            Next
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 and bIsBase = True Then
        Redim AccList(1,3)
        AccList(0,0) = "A175E"        :        AccList(1,0) = "A335E"
        AccList(0,1) = "A177E"        :        AccList(1,1) = "A337E"
        AccList(0,2) = "L215E"        :        AccList(1,2) = "L325E"
        AccList(0,3) = "L225"        :        AccList(1,3) = "L326"

        For i = 0 to 3
            Acc1 = AccList(0,i)
            Acc2 = AccList(1,i)
            dData1 = HS.GetCell("A#" & Acc1 & sSrcPOV)
            dData2 = HS.GetCell("A#" & Acc2 & sSrcPOV)
            If dData1 <> 0 and dData2 = 0 Then
                ValAcc = Acc1&"_2CV"
                Call ValidationCommentCheck(ValAcc, dData1, LegalLevel, bIsBase)
            End If
        Next
    End If

    If IntCurPeriodNum Mod 3 = 0 and bIsBase = True Then
        If Instr(EntUD,"/HEDGE/") > 0 Then
            N2807 = HS.GetCell("A#N2807" & sSrcPOV)
            If N2807 = 0 Then
                Call ValidationCommentCheck("N2807_CV", 9999999999, LegalLevel, bIsBase)
            End If
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = TRUE or bIsBase = True Then
            Percent1 = 0.8
            Percent2 = 0.001

            For Each sAcc In Array("N2036", "N2037")
                dData = HS.GetCell("A#" & sAcc & sSrcPOV)
                If sAcc = "N2036" Then
                    dValue = HS.GetCell("A#N2024" & sSrcPOV)
                Else
                    dValue = HS.GetCell("A#N2025" & sSrcPOV)
                End If

                Comp = -Percent1 * dValue * Percent2
                If dData > Comp Then
                    Diff = dData - Comp
                    Call ValidationCommentCheck(sAcc & "_CV", Diff, LegalLevel, bIsBase)
                End If
            Next
        End if
    End If

    If IntCurPeriodNum = 12 and bIsBase = True Then
        L173 = HS.GetCell("A#L173" & sSrcPOV)
        L173PrevY = HS.GetCell("A#L173" & sSrcPOV & ".P#LAST.Y#PRIOR")
        A181 = HS.GetCell("A#A181" & sSrcPOV)
        L245 = HS.GetCell("A#L245" & sSrcPOV)

        Movement = L173 - L173PrevY
        If Movement = 0 and ( A181 > 0 or L245 > 0 ) Then
            If A181 > 0 Then x = A181 Else x = L245
            Call ValidationCommentCheck("L173_CV", x, LegalLevel, bIsBase)
        End If
    End If

    If IntCurPeriodNum >= 2 and bIsBase = True Then
        R814_PRIOR = HS.GetCell("A#R814.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#PRIOR")
        R814_CURR = HS.GetCell("A#R814.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If R814_CURR <= R814_PRIOR Then
            Call ValidationCommentCheck("R814_CV", R814_PRIOR, LegalLevel, bIsBase)
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = TRUE or bIsBase = True Then
            N3012 = HS.GetCell("A#N3012.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            N0704 = HS.GetCell("A#N0704.C1#CUSTOM1_TOP.C2#D_IMPT.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If N3012 < N0704 Then
                Call ValidationCommentCheck("N3012_CV", N0704, LegalLevel, bIsBase)
            End If
        End If
    End If

    If bIsBase = True And IntCurPeriodNum <= 6 Then
        MTOTOBCY = HS.GetCell("A#MTOTOBCY.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        MTOTOBCY1 = HS.GetCell("A#MTOTOBCY1.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If (MTOTOBCY1 < 1 Or MTOTOBCY1 > 1) And (MTOTOBCY > -1 And MTOTOBCY < 1) Then
            Call ValidationCommentCheck("MTOTOBCY_CV", MTOTOBCY1, LegalLevel, bIsBase)
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = TRUE or bIsBase = True Then

            RM10 = HS.GetCell("A#RM10.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            RM70 = HS.GetCell("A#RM70.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            L300 = HS.GetCell("A#A179.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            L490 = HS.GetCell("A#A400.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            L470 = HS.GetCell("A#A430.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

            If CInt(IntYear) > 2024 Then
                N3641 = HS.GetCell("A#N3641.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#LAST.Y#PRIOR")
                N3622 = HS.GetCell("A#N3622.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                If N3622 = 0 Then
                    Call ValidationCommentCheck("N3622_2V", N3641, LegalLevel, bIsBase)
                End If
            End If

            N3642 = HS.GetCell("A#N3642.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If N3642 > ((L300 + L490 + L470) * 0.5 ) Then
                Call ValidationCommentCheck("N3642_2V", N3642, LegalLevel, bIsBase)
            End If

            N3651 = HS.GetCell("A#N3651.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If N3651 > RM10 Then
                Call ValidationCommentCheck("N3651_2V", N3651, LegalLevel, bIsBase)
            End If

            N3652 = HS.GetCell("A#N3652.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            A495 = HS.GetCell("A#A495.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If N3652 > A495 Then
                Call ValidationCommentCheck("N3652_2V", N3652, LegalLevel, bIsBase)
            End If

            N3661 = HS.GetCell("A#N3661.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If N3661 > (RM10 - RM70) Then
                Call ValidationCommentCheck("N3661_2V", N3661, LegalLevel, bIsBase)
            End If

            N3662 = HS.GetCell("A#N3662.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If N3662 > ((L300 + L490 + L470) * 0.5 ) Then
                Call ValidationCommentCheck("N3662_2V", N3662, LegalLevel, bIsBase)
            End If

        End If
    End If

End Sub

Sub ACT_ActualHardHeadcountCommentValidations(Avg_Rate,StrPeriod,StrEntity,StrBA,LegalLevel,bIsBase)
    For each Acc in hs.Account.List("ActualHardHeadcountCommentValidations","[Base]")
        SourceAcc = mid(Acc,1,len(Acc)-3)

        CurrHC = HS.GetCell("A#"&SourceAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        PrevMonthHC = HS.GetCell("A#"&SourceAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Prior")

        Difference = PrevMonthHC - CurrHC
        If PrevMonthHC = 0 and CurrHC <> 0 then
            Mov = 1
        ElseIf PrevMonthHC = 0 and CurrHC = 0 then
            Mov = 0
        Else
            Mov = abs(Difference / PrevMonthHC)
        End If

        If Mov >= 0.2 Then
            Mov = Mov * 100

            Call CheckValidationComment(Acc, Mov, LegalLevel, bIsBase, Mov)
        End If
    Next
End Sub

Sub ACT_COP_CommentValidations(Avg_Rate,StrPeriod,StrEntity,StrBA, LegalLevel, bIsBase)

    For each ValAcc in HS.Account.List("COP_CommentValidations","[Base]")
        Acc = Mid(ValAcc,1,Instr(ValAcc,"_")-1)
        C1 = Mid(ValAcc,Instr(ValAcc,"_")+1,InStrRev(ValAcc,"_")-Instr(ValAcc,"_")-1)

        dData = HS.GetCell("A#"&Acc&".C1#"&C1&".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If dData <> 0 Then
            Call CheckValidationComment(ValAcc, dData, LegalLevel, bIsBase, dData)
        End If
    Next
End Sub

Sub ACT_ActualSignCheckValidations(sAccountHierarchy, bPositive,LegalLevel,bIsBase,SuperGL_Ent)

    If sAccountHierarchy = "ActualEnterAsPositiveValidations" Then
        bSweden = FALSE
        If HS.Entity.Isbase("SWEDEN", "") = True Then
            bSweden = TRUE
        End If
    End If

    For each ValAcc in HS.Account.List(sAccountHierarchy, "[Base]")
        bValidate = TRUE

        If ValAcc = "L366E_V" Or ValAcc = "A362E_V" Then
            If bSweden = TRUE Then
                bValidate = FALSE
            End If
        End If

        If SuperGL_Ent = True Then
            If ValAcc = "A195_V" Or ValAcc = "L295_V" Then
                bValidate = FALSE
            End If
        End If

        If bValidate = TRUE Then
            Call ACT_ActualSignCheckValidation(ValAcc, bPositive, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualSignCheckValidation(ValAcc, bPositive,LegalLevel,bIsBase)
    DetailC2Check = GetUD(ValAcc, "Account", "ValC2")

    If ValAcc = "RM69_V" Then
        SourcePOV = Left(ValAcc, len(ValAcc)-2)
    ElseIf ValAcc = "A325_V" Then
        SourcePOV = Left(ValAcc, len(ValAcc)-2) & ".C2#CUSTOM2_TOP"
    ElseIf DetailC2Check <> "" Then
        SourcePOV = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)& ".C2#"&DetailC2Check&".I#[ICP Top]"
    Else

        SourcePOV = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)& ".C2#Custom2_TOP.I#[ICP Top]"
    End If

    sC1TopMember = HS.Account.C1Top(ValAcc)
    If sC1TopMember = "" Then sC1TopMember = "[None]"
    If sC1TopMember = "[None]" Then
        StrSourceC1POV = ".C1#CUSTOM1_TOP"
    Else
        StrSourceC1POV = ""
    End If

    Set DataUnit = HS.OpenDataUnit("A#" & SourcePOV & StrSourceC1POV & ".C3#CUSTOM3_TOP")
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
           Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

        If (dData < 0 And bPositive = TRUE) Or (dData > 0 And bPositive = FALSE) Then
            sCustom1 = StrC1
            sCustom2 = StrC2
            sICP = StrICP
            If ValAcc = "A325_V" Then
                sCustom2 = "[None]"
            Else
                sCustom2 = "[None]"
                sICP = "[ICP None]"
            End If

            If StrSourceC1POV = ".C1#CUSTOM1_TOP" Then
                StrTargerC1 = "[None]"
            Else
                StrTargerC1 = sCustom1
            End If

            bValidation = TRUE

            If StrAccount = "MOBE" And StrC1 = "POC" Then
                bValidation = FALSE
            End If

            If bValidation = TRUE Then
                C3Target = CheckC3TargetForValidation(ValAcc,LegalLevel,bIsBase)
                StrPOV = "A#" & ValAcc & ".C1#" & StrTargerC1 & ".C2#" & sCustom2 & ".C3#"&C3Target&".C4#[None].I#" & sICP
                Call HS.SetDataWithPOV(StrPOV, dData, False)
                Call PopulateValidationLevels(ValAcc,"A#" & ValAcc & ".C1#" & StrTargerC1 & ".C2#" & sCustom2 & ".C4#[None].I#" & sICP)
            End If
        End If
    Next
End Sub

Sub ACT_ActualSignCheckAllMembersValidations(sAccountHierarchy, bPositive,LegalLevel,bIsBase)
    For each ValAcc in HS.Account.List(sAccountHierarchy, "[Base]")
        sRollDimension = GetUD(ValAcc, "Account", "RollDimension")

        SourcePOV = "A#" & Left(ValAcc,Instr(ValAcc,"_")-1)
        If Instr(sRollDimension,"C1") > 0 Then
            SourcePOV = SourcePOV & ".C1{CUSTOM1_TOP.[Base]}"
        Else
            SourcePOV = SourcePOV & ".C1#CUSTOM1_TOP"
        End If
        If Instr(sRollDimension,"C2") > 0 Then
            SourcePOV = SourcePOV & ".C2{CUSTOM2_TOP.[Base]}"
        Else
            SourcePOV = SourcePOV & ".C2#CUSTOM2_TOP"
        End If
        If Instr(sRollDimension,"C3") > 0 Then
            SourcePOV = SourcePOV & ".C3{CUSTOM3_TOP.[Base]}"
        Else
            SourcePOV = SourcePOV & ".C3#CUSTOM3_TOP"
        End If
        If Instr(sRollDimension,"C4") > 0 Then
            SourcePOV = SourcePOV & ".C4{CUSTOM4_TOP.[Base]}"
        Else
            SourcePOV = SourcePOV & ".C4#CUSTOM4_TOP"
        End If
        If Instr(sRollDimension,"ICP") > 0 Then
            SourcePOV = SourcePOV & ".I{[ICP Top].[Base]}"
        Else
            SourcePOV = SourcePOV & ".I#[ICP Top]"
        End If
        If Instr(sRollDimension,"V_Periodic") > 0 Then
            SourcePOV = SourcePOV & ".W#Periodic"
        End If

        dCurrentValue = 0
        bValidation = FALSE
        Set DataUnit = HS.OpenDataUnit(SourcePOV)
        NumItems = DataUnit.GetNumItems

        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            If (dData < dCurrentValue And bPositive = TRUE) Or (dData > dCurrentValue And bPositive = FALSE) Then
                dCurrentValue = dData
                bValidation = TRUE
            End If
        Next

        If bValidation = TRUE Then
            If right(ValAcc,2) <> "CV" Then
                C3Target = CheckC3TargetForValidation(ValAcc,LegalLevel,bIsBase)
                StrPOV = "A#" & ValAcc & ".C1#[None].C2#[None]" & ".C3#" & C3Target & ".C4#[None].I#[ICP None]"
                Call HS.SetDataWithPOV(StrPOV, dCurrentValue, False)
                Call PopulateValidationLevels(ValAcc,"A#" & ValAcc & ".C1#[None].C2#[None].C4#[None].I#[ICP None]")
            Else
                Call ValidationCommentCheck(ValAcc, dCurrentValue, LegalLevel, bIsBase)
            End If
        End If
    Next
End Sub

Sub ACT_ActualEnterAsPositiveQuarterlyValidations(LegalLevel,bIsBase)
    For each ValAcc in Hs.Account.List("ActualEnterAsPositiveQuarterlyValidations","[Base]")
        bValidate = TRUE
        If ValAcc = "N15170_V" Then

            dData = HS.GetCell("A#NC1578_V.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None]")
            If HS.IsZero(dData) = TRUE Then
                bValidate = FALSE
            End If
        End If

        If bValidate = TRUE Then
            Call ACT_ActualSignCheckValidation(ValAcc, TRUE,LegalLevel,bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualEnterAsPositiveYearlyValidations(LegalLevel,bIsBase)

    For each ValAcc in Hs.Account.List("ActualEnterAsPositiveYearlyValidations","[Base]")
        Call ACT_ActualSignCheckValidation(ValAcc, TRUE,LegalLevel,bIsBase)
    Next
End Sub

Sub EST_SoftEstimationClosedEntityDataValidation(StrEntity,IntCurPeriodNum,StrPeriod,IntYear,Str1stFcstPeriod,StrCurrFcstYear)

    EntUD = GetUD(StrEntity, "Entity", "CloseStartDate")

        If EntUD <> "" Then
            CloseStartMonth = left(EntUD,3)
            CloseStartMonthNo = GetPeriodNumber(CloseStartMonth)
            CloseStartYear = right(EntUD,4)

            If CInt(CloseStartYear) >= CInt(StrCurrFcstYear) Then

                If (CInt(IntYear) = CInt(StrCurrFcstYear) and CInt(IntCurPeriodNum) >= CInt(CloseStartMonthNo)) or CInt(IntYear) > CInt(StrCurrFcstYear) Then
                    For each ValAcc in HS.Account.list("SoftEstimationClosedEntityDataValidation","[Base]")

                            PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
                            dData = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].W#Periodic")

                            If dData <> 0 Then

                                Call PopulateValidationAccountWithC1(ValAcc, dData, "[None]")

                            End If

                    Next
                End If
            End If
        End If

End Sub

Sub EST_SoftEstimationInvestmentValidations()
    HS.Exp "A#Investment_Total_V.C1#[None].C2#[None].C3#ValOutcome = A#Investment_Total.C1#CUSTOM1_TOP.C2#INV_CURR_Y.C3#CUSTOM3_TOP - A#OC20.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"
    Call PopulateValidationLevels("Investment_Total_V","A#Investment_Total_V.C1#[None].C2#[None]")
End Sub

Sub ACT_ActualNewSpecialValidations(bIsBase,LegalLevel,StrPeriod,IntCurPeriodNum,StrEntity,End_Rate,IntYear,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,StrBA)

    bIsGL = FALSE
    If bIsBase = TRUE And InStr(StrEntity, "ADJ") = 0 And InStr(StrEntity, "ELIM") = 0 Then
        EntUD = GetUD(sEntity, "Entity", "")

        If IsActiveGL(EntUD,IntYear,IntCurPeriodNum,HS.Scenario.member()) = True Then
            bIsGL = TRUE
        End If
    End If

    sSrcPrevY_TAX_ADJ = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#TAX_ADJ.C4#CUSTOM4_TOP.Y#Prior.P#LAST"
    sSrcPOV = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcDIM = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcPrevY = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#BEGBALtot.C4#CUSTOM4_TOP.Y#Prior.P#LAST"

    If bIsGL = TRUE Then

        SumTaxGroup = False
        If SuperGLCalcActive = True Then
            If TaxGroupEntity <> "" and SuperGL_Ent = True Then
                SumTaxGroup = True
            End If
        End If

        If SumTaxGroup = False Then
            R935 = HS.GetCell("A#R935" & sSrcPOV)
        Else
            R935 = SumLegalBasesToGLEnt("A#R935" & sSrcPOV, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            R936 = HS.GetCell("A#R936" & sSrcPOV)
        Else
            R936 = SumLegalBasesToGLEnt("A#R936" & sSrcPOV, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            A195 = HS.GetCell("A#A195" & sSrcPOV)
        Else
            A195 = SumLegalBasesToGLEnt("A#A195" & sSrcPOV, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            A195Pre = HS.GetCell("A#A195" & sSrcPrevY) + HS.GetCell("A#A195.C2#ACQTOT" & sSrcDIM) - HS.GetCell("A#A195.C2#DISPBUSINTOT" & sSrcDIM)
        Else
            A195Pre = SumLegalBasesToGLEnt("A#A195" & sSrcPrevY, StrEntity, TaxGroupEntity)    + SumLegalBasesToGLEnt("A#A195.C2#ACQTOT" & sSrcDIM, StrEntity, TaxGroupEntity) - SumLegalBasesToGLEnt("A#A195.C2#DISPBUSINTOT" & sSrcDIM, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            L295 = HS.GetCell("A#L295" & sSrcPOV)
        Else
            L295 = SumLegalBasesToGLEnt("A#L295" & sSrcPOV, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            L295Pre = HS.GetCell("A#L295" & sSrcPrevY) + HS.GetCell("A#L295.C2#ACQTOT" & sSrcDIM) - HS.GetCell("A#L295.C2#DISPBUSINTOT" & sSrcDIM)
        Else
            L295Pre = SumLegalBasesToGLEnt("A#L295" & sSrcPrevY, StrEntity, TaxGroupEntity)    + SumLegalBasesToGLEnt("A#L295.C2#ACQTOT" & sSrcDIM, StrEntity, TaxGroupEntity) - SumLegalBasesToGLEnt("A#L295.C2#DISPBUSINTOT" & sSrcDIM, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            L174 = HS.GetCell("A#L174" & sSrcPOV)
        Else
            L174 = SumLegalBasesToGLEnt("A#L174" & sSrcPOV, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            L174Pre = HS.GetCell("A#L174" & sSrcPrevY)
        Else
            L174Pre = SumLegalBasesToGLEnt("A#L174" & sSrcPrevY, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            L177 = HS.GetCell("A#L177" & sSrcPOV)
        Else
            L177 = SumLegalBasesToGLEnt("A#L177" & sSrcPOV, StrEntity, TaxGroupEntity)
        End If

        If SumTaxGroup = False Then
            L177Pre = HS.GetCell("A#L177" & sSrcPrevY)
        Else
            L177Pre = SumLegalBasesToGLEnt("A#L177" & sSrcPrevY , StrEntity, TaxGroupEntity)
        End If

        FormulaResult = A195Pre-L295Pre-A195+L295-R935-R936+L174-L174Pre+L177-L177Pre

        Call PopulateValidationAccount("DEF_TAX_V", FormulaResult, LegalLevel, bIsBase)
    End If

    If bIsBase = True Then

        Call ACT_ActualSignCheckValidation("RM69_V", FALSE,LegalLevel,bIsBase)
    End If

    If LegalLevel = True or bIsBase = True Then

        Call DataCheckValidation("L480", LegalLevel, bIsBase)
    End If

    If bIsBase = True Then

        Call ACT_ActualSignCheckValidation("A325_V", FALSE,LegalLevel,bIsBase)
    End If

    If StrPeriod = "Dec" Then
        If LegalLevel = True or bIsBase = True Then

                For Each sAccount In Array("N1210", "N1205", "N1206", "N1207")
                    If sAccount = "N1210" Then
                        sSrcAccount = "N1209"
                    ElseIf sAccount = "N1205" Then
                        sSrcAccount = "N1201"
                    ElseIf sAccount = "N1206" Then
                        sSrcAccount = "N1202"
                    ElseIf sAccount = "N1207" Then
                        sSrcAccount = "N1203"
                    End If

                    dValue = HS.GetCell("A#" & sSrcAccount & sSrcPOV)
                    If dValue > 0 Then
                        dValue = HS.GetCell("A#" & sAccount & sSrcPOV)
                        If dValue <= 0 Then

                            Call PopulateValidationAccount(sAccount & "_V", "999999999", LegalLevel, bIsBase)
                        End If
                    End If
                Next

            RM92 = HS.GetCell("A#RM92" & sSrcPOV)
            N0230 = HS.GetCell("A#N0230" & sSrcPOV)
            LocalTolerance = 5 / HS.GetRate("V#EUR.A#AVG_RATES")

            If RM92 > LocalTolerance and N0230 = 0 Then
                N0204 = HS.GetCell("A#N0204" & sSrcPOV)
                N0218 = HS.GetCell("A#N0218"& sSrcPOV)
                If N0204 = 0 and N0218 = 0 Then
                    Call PopulateValidationAccount("N0204_V", "999999999", LegalLevel, bIsBase)
                End If
            End If

                N1206 = HS.GetCell("A#N1206" & sSrcDIM & ".C2#LTDEBT")
                N1202 = HS.GetCell("A#N1202" & sSrcDIM & ".C2#LTDEBT")
                formula = 0.5 * N1202

                If N1206 > formula or (    N1206 <> 0 and N1202 = 0 ) Then
                    Call PopulateValidationAccount("N1206_2V", "999999999", LegalLevel, bIsBase)
                End If

                N1203 = HS.GetCell("A#N1203" & sSrcDIM & ".C2#LTDEBT")
                N1207 = HS.GetCell("A#N1207" & sSrcDIM & ".C2#LTDEBT")
                formula = 0.5 * N1203
                If N1207 > formula or (    N1207 <> 0 and N1203 = 0 ) Then
                    Call PopulateValidationAccount("N1207_2V", "999999999", LegalLevel, bIsBase)
                End If

        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            For Each sAccount In Array("N2920","N2239","N2259")
                If sAccount = "N2920" Then
                    sSrcAccount = "N2910"

                ElseIf sAccount = "N2239" Then
                    sSrcAccount = "N2230"
                ElseIf sAccount = "N2259" Then
                    sSrcAccount = "N2250"
                End If
                dValue = HS.GetCell("A#" & sSrcAccount & sSrcPOV)
                If sAccount = "N2239" or sAccount = "N2259" Then

                    dValue = dValue + HS.GetCell("A#" & sSrcAccount & sSrcPOV & ".Y#PRIOR.P#LAST")
                End If

                If dValue > 0 Then
                    dValue = HS.GetCell("A#" & sAccount & sSrcPOV)
                    If dValue <= 0 Then

                        Call PopulateValidationAccount(sAccount & "_V", "999999999", LegalLevel, bIsBase)
                    End If
                End If
            Next
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            For Each sAcc In Array("N1731", "N1732")
                dOpe = 0
                dCur = 0

                sBalAcc = "N1727" & Right(sAcc, 1)
                dData = HS.GetCell("A#" & sBalAcc & sSrcPOV)
                If dData <= 0 Then
                    dOpe = HS.GetCell("A#" & sAcc & sSrcPOV & ".Y#Prior.P#Last")
                    dCur = HS.GetCell("A#" & sAcc & sSrcPOV)
                End If

                If (dOpe + dCur) > 0 And dData <= 0 Then

                    Call PopulateValidationAccount(sBalAcc & "_V", "999999999", LegalLevel, bIsBase)
                End If
            Next
        End If
    End If

    If bIsBase and StrEntity <> "MNLD" Then

        Call DataCheckValidation("L176", LegalLevel, bIsBase)
    End If

    If bIsBase Then
        R822 = HS.GetCell("A#R822" & sSrcPOV)
        R823 = HS.GetCell("A#R823" & sSrcPOV)

        If R822 <> 0 Or R823 <> 0 Then
            PeriodstoCheck = array(12,1,2,3,4,5,6,7,8,9,10,11,12)
            Counter = 0
            For each PerNo in PeriodstoCheck
                If CInt(PerNo) <= CInt(IntCurPeriodNum) or Counter = 0 Then
                    Perlabel = GetPeriodLabel(PerNo)

                    If Counter = 0 Then PerPOV = sSrcPOV & ".Y#Prior.P#" & Perlabel Else PerPOV = sSrcPOV & ".P#" & Perlabel

                    sSUM = 0
                    For Each sAcc In Array("A188E", "A376E", "A376I", "L249E", "L376E", "L376I", "L176")
                        sSUM = sSUM + HS.GetCell("A#" & sAcc & PerPOV)
                    Next

                    TotalSum = TotalSum + sSUM
                    Counter = Counter + 1
                End If
            Next
        End If

        If R822 <> 0 and TotalSum = 0 Then

            Call PopulateValidationAccount("R822_V", R822, LegalLevel, bIsBase)
        End If

        If R823 <> 0 and TotalSum = 0 Then
            Call PopulateValidationAccount("R823_V", R823, LegalLevel, bIsBase)
        End If

    End If

    If bIsBase = TRUE Then

        dData = 0

        For Each sC1SER07Member In Array("SER07_MG")
            dData = dData + HS.GetCell("A#MOBE.I#[ICP Top].C1#" & sC1SER07Member & ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        Next
        If HS.IsZero(dData) = FALSE Then
            dValue = HS.GetCell("A#SSS_ORDERBOOK" & sSrcPOV)
            If dData > dValue Then
                bValidate = ValidateValAccAndGenTolerance("SSS_ORDERBOOK_V", dData - dValue, bIsBase)
                If bValidate = TRUE Then
                    Call PopulateValidationAccount("SSS_ORDERBOOK_V", dData, LegalLevel, bIsBase)
                End If
            End If
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then

            NoteTotal = 0
            For Each sAcc In Array("N2003", "N2006", "N2015", "N2032")
                NoteTotal = NoteTotal + HS.GetCell("A#" & sAcc & sSrcPOV)
            Next

            RM01E = HS.GetCell("A#RM01E" & sSrcPOV)
            If NoteTotal > RM01E Then
                Call PopulateValidationAccount("N2003_3V", NoteTotal, LegalLevel, bIsBase)
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N2009 = HS.GetCell("A#N2009" & sSrcPOV)
            N2012 = HS.GetCell("A#N2012" & sSrcPOV)
            RM28 = HS.GetCell("A#RM28" & sSrcPOV)
            NoteTotal = N2009 + N2012
            If NoteTotal > RM28 Then
                Call PopulateValidationAccount("N2009_3V", NoteTotal, LegalLevel, bIsBase)
            End if
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N2018 = HS.GetCell("A#N2018" & sSrcPOV)
            RM53 = HS.GetCell("A#RM53" & sSrcPOV)
            If N2018 > RM53 Then
                Call PopulateValidationAccount("N2018_3V", N2018, LegalLevel, bIsBase)
            End if
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N2022 = HS.GetCell("A#N2022" & sSrcPOV)
            A169 = HS.GetCell("A#A169" & sSrcPOV)
            A335E = HS.GetCell("A#A335E" & sSrcPOV)
            A337E = HS.GetCell("A#A337E" & sSrcPOV)
            A338 = HS.GetCell("A#A338" & sSrcPOV)
            AssetTotal = A169 + A335E + A337E + A338
            If N2022 > AssetTotal Then
                Call PopulateValidationAccount("N2022_3V", N2022, LegalLevel, bIsBase)
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N2026 = HS.GetCell("A#N2026" & sSrcPOV)
            A305E = HS.GetCell("A#A305E" & sSrcPOV)
            If N2026 > A305E Then
                Call PopulateValidationAccount("N2026_3V", N2026, LegalLevel, bIsBase)
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N2029 = HS.GetCell("A#N2018" & sSrcPOV)
            L345E = HS.GetCell("A#RM53" & sSrcPOV)
            If N2029 > L345E Then
                Call PopulateValidationAccount("N2029_3V", N2029, LegalLevel, bIsBase)
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N2038 = HS.GetCell("A#N2038" & sSrcPOV)
            A325 = HS.GetCell("A#A325" & sSrcPOV)
            If N2038 < A325 Then
                Call PopulateValidationAccount("N2038_3V", N2038, LegalLevel, bIsBase)
            End If

            If N2038 > 0 Then
                Call PopulateValidationAccount("N2038_4V", N2038, LegalLevel, bIsBase)
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If bIsBase = True Then

            NotesTotal = 0

            For Each sAcc In Array("N0520", "N0610")
                NotesTotal = NotesTotal + HS.GetCell("A#" & sAcc & ".C2#D_IMPT" & sSrcDIM)
            Next

            N3013 = HS.GetCell("A#N3013" & sSrcPOV)
            If N3013 > NotesTotal Then
                Call PopulateValidationAccount("N3013_V", N3013, LegalLevel, bIsBase)
            End If
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            A170 = HS.GetCell("A#A170.C2#ACQTOT" & sSrcDIM)
            A165I = HS.GetCell("A#A165I.C2#ACQTOT" & sSrcDIM)
            A168 = HS.GetCell("A#A168.C2#ACQTOT" & sSrcDIM)
            N0910 = HS.GetCell("A#N0910.C2#CACQ" & sSrcDIM)
            N0910_2 = HS.GetCell("A#N0910.C2#CACQEQ" & sSrcDIM)
            N0911 = HS.GetCell("A#N0911.C2#CACQ" & sSrcDIM)
            N0901 = HS.GetCell("A#N0901.C2#CACQ" & sSrcDIM)
            dData = A170 - A165I - A168 - N0910 + N0910_2 - N0911 - N0901
            If dData <> 0 Then
                Call PopulateValidationAccount("N0904_V",dData, LegalLevel, bIsBase)
            End If
        End if
    End If

    If bIsBase = True Then
        dData = HS.GetCell("A#STOTOBCY4.C1#SSS.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If dData <> 0 Then
            Call PopulateValidationAccount("STOTOBCY_V",dData, LegalLevel, bIsBase)
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            dData = HS.GetCell("A#N01500.C2#PROV_RECLASS" & sSrcDIM)
            If dData <> 0 Then
                Call PopulateValidationAccount("N01500_V",dData, LegalLevel, bIsBase)
            End If
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            dData = HS.GetCell("A#N14_A500.C2#RC32" & sSrcDIM)
            If dData <> 0 Then
                Call PopulateValidationAccount("N14_A500_2V",dData, LegalLevel, bIsBase)
            End If
        End If
    End If

    If bIsBase = True Then

        Set DataUnit = HS.OpenDataUnit("A#MTOTOBCY4.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

            If HS.IsZero(dData) = FALSE Then
                Call PopulateValidationAccountWithC1("MTOTOBCY_V", dData, StrC1)
            End If
        Next
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            If CInt(IntYear) > 2019 or (CInt(IntYear) = 2019 and CInt(IntCurPeriodNum) >= 6) Then
                LR310 = HS.GetCell("A#N19_L225.C1#CUSTOM1_TOP.C2#LR310.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                If LR310 <> 0 Then
                    Call PopulateValidationAccount("N19_L225_6V", LR310, LegalLevel, bIsBase)
                End If

                LR310 = HS.GetCell("A#N19_L326.C1#CUSTOM1_TOP.C2#LR310.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                If LR310 <> 0 Then
                    Call PopulateValidationAccount("N19_L326_6V", LR310, LegalLevel, bIsBase)
                End If

                N19_L225_LR20 = HS.GetCell("A#N19_L225.C1#CUSTOM1_TOP.C2#LR20.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                N19_L326_LR20 = HS.GetCell("A#N19_L326.C1#CUSTOM1_TOP.C2#LR20.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                N0704_A_INCR = HS.GetCell("A#N0704.C1#CUSTOM1_TOP.C2#A_INCR.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                DIFF = N19_L225_LR20 + N19_L326_LR20 - N0704_A_INCR
                If DIFF <> 0 Then

                    Call ValidationCommentCheck("N19_LR20_CV", DIFF, LegalLevel, bIsBase)
                End If
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            If CInt(IntYear) > 2019 or (CInt(IntYear) = 2019 and CInt(IntCurPeriodNum) >= 12) Then
                N19_L225_LR32 = HS.GetCell("A#N19_L225.C1#CUSTOM1_TOP.C2#LR32.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                N19_L326_LR32 = HS.GetCell("A#N19_L326.C1#CUSTOM1_TOP.C2#LR32.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                N0704_A_LEASE = HS.GetCell("A#N0704.C1#CUSTOM1_TOP.C2#A_LEASE.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                DIFF = N19_L225_LR32 + N19_L326_LR32 + N0704_A_LEASE
                If DIFF <> 0 Then

                    Call ValidationCommentCheck("N19_LR32_CV", DIFF, LegalLevel, bIsBase)
                End If
            End If
        End if
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If LegalLevel = True or bIsBase = True Then
            N19_L225_OPE = HS.GetCell("A#N19_L225.C1#CUSTOM1_TOP.C2#LR10.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            N19_L326_OPE = HS.GetCell("A#N19_L326.C1#CUSTOM1_TOP.C2#LR10.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            OPE_TOTAL = N19_L225_OPE + N19_L326_OPE

            If OPE_TOTAL <> 0 Then
                N19_L326_LR30 = HS.GetCell("A#N19_L326.C1#CUSTOM1_TOP.C2#LR30.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                If N19_L326_LR30 = 0 Then
                    Call PopulateValidationAccount("N19_L326_7V", OPE_TOTAL, LegalLevel, bIsBase)
                End If
            End If
        End if
    End If

    If bIsBase = True Then
        L225 = HS.GetCell("A#L225.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        L326 = HS.GetCell("A#L326.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If L225 > 0 Or L326 > 0 Then
            R814 = HS.GetCell("A#R814.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If R814 <= 0 Then
                Call PopulateValidationAccount("R814_V", L225+L326, LegalLevel, bIsBase)
            End If
        End If
    End If

    If bIsBase = True Then
        HC004 = HS.GetCell("A#HC004.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If HC004 <> 0 Then
            RM91 = Round(HS.GetCell("A#RM91.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"))
            RM92 = Round(HS.GetCell("A#RM92.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]"))
            If RM91 = 0 or RM92 = 0 then
                Call PopulateValidationAccount("RM93_V", "999999999", LegalLevel, bIsBase)
            End If
        End If
    End If

    If IntCurPeriodNum Mod 3 = 0 Then
        If bIsBase = True or LegalLevel = True Then
            N15170 = HS.GetCell("A#N15170.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            N15172 = HS.GetCell("A#N15172.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If N15170 < N15172 Then
                Diff = N15170 - N15172
                Call PopulateValidationAccount("N15176_V", Diff, LegalLevel, bIsBase)
            End If
        End If
    End If

    If CInt(IntCurPeriodNum) = 12 Then
        If bIsBase = True Then
            N35151 = HS.GetCell("A#N35151.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            N35156 = HS.GetCell("A#N35156.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")

            N0704 = HS.GetCell("A#N0704.I#[ICP Top].C1#CUSTOM1_TOP.C2#NOTE_ACQ2.C3#CUSTOM3_TOP.C4#[None]")
            If N0704 > 0 and ((N35151 + N35156 ) = 0) Then

                Call PopulateValidationAccount("N35150_V", "999999999", LegalLevel, bIsBase)
            End If

            N1202 = HS.GetCell("A#N1202.I#[ICP Top].C1#CUSTOM1_TOP.C2#LTDEBT.C3#CUSTOM3_TOP.C4#[None]")
            N1206 = HS.GetCell("A#N1206.I#[ICP Top].C1#CUSTOM1_TOP.C2#LTDEBT.C3#CUSTOM3_TOP.C4#[None]")
            sum = N1202 + N1206
            If (sum > ((N35151 + N35156) * 1.1)) or (sum < ((N35151 + N35156) * 0.9)) Then
                Call PopulateValidationAccount("N35150_2V", "999999999", LegalLevel, bIsBase)
            End If

            N35152 = HS.GetCell("A#N35152.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If N35151 > 0 and N35152 < 0.5 Then
                Call PopulateValidationAccount("N35152_V", N35151, LegalLevel, bIsBase)
            End If

            N35153 = HS.GetCell("A#N35153.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If N35151 > 0 and N35153 <= 0 Then
                Call PopulateValidationAccount("N35153_V", N35151, LegalLevel, bIsBase)
            End If

            N35157 = HS.GetCell("A#N35157.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If N35156 > 0 and N35157 < 0.5 Then
                Call PopulateValidationAccount("N35157_V", N35156, LegalLevel, bIsBase)
            End If

            N35158 = HS.GetCell("A#N35158.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If N35156 > 0 and N35158 <= 0 Then
                Call PopulateValidationAccount("N35158_V", N35156, LegalLevel, bIsBase)
            End If
        End If
    End If

    If bIsBase = True Then
        A172 = HS.GetCell("A#A172.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        A172PrevY = HS.GetCell("A#A172.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].Y#PRIOR.P#LAST")
        L191 = HS.GetCell("A#L191.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        L191PrevY = HS.GetCell("A#L191.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].Y#PRIOR.P#LAST")
        OC13 = HS.GetCell("A#OC13.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        DC13 = HS.GetCell("A#DC13.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        Diff = A172 - A172PrevY - (L191 - L191PrevY) - (OC13 - DC13)
        If Diff <> 0 Then
            Call PopulateValidationAccount("OC13_2V", Diff, LegalLevel, bIsBase)
        End If
    End If

    If bIsBase = True Then
        If IntCurPeriodNum Mod 3 = 0 Then
            N3710 = HS.GetCell("A#N3710.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If N3710 > 0 Then
                N3720 = HS.GetCell("A#N3720.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                If N3720 = 0 Then
                    Call ValidationCommentCheck("N3720_CV", N3710, LegalLevel, bIsBase)

                End If
            End If
        End If
    End If

    If bIsBase = True Then
        If IntCurPeriodNum Mod 3 = 0 Then
            N3723 = HS.GetCell("A#N3723.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            N17270 = HS.GetCell("A#N17270.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            Diff = N3723 - N17270
            If Diff <> 0 Then
                Call PopulateValidationAccount("N3723_2V", Diff, LegalLevel, bIsBase)
            End If
        End If
    End If

    If bIsBase = True Then
        If IntCurPeriodNum Mod 3 = 0 Then
            N3730 = HS.GetCell("A#N3730.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            N0103 = HS.GetCell("A#N0103.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            Diff = N3730 - N0103
            If Diff <> 0 Then
                Call PopulateValidationAccount("N3730_2V", Diff, LegalLevel, bIsBase)
            End If
        End If
    End If

    If bIsBase = True Then
        For Each sValAcc In Hs.Account.List("Note39_DataVal","[Base]")
            sNoteAcc = Left(sValAcc,Len(sValAcc) - 2)
            sIsAcc = Right(sNoteAcc,4)

            If sValAcc = "N39_RM70_V" Then
                fIsVal = HS.GetCell("A#" & sIsAcc & ".I#[ICP Top].C1#TOTCOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                If fIsVal <> 0 Then
                    fNoteVal = HS.GetCell("A#" & sNoteAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                    If fNoteVal = 0 Then
                        Call PopulateValidationAccount(sValAcc, fIsVal, LegalLevel, bIsBase)
                    End If
                End If
            Else
                If sIsAcc = "RM32" Then
                    sIsAcc = "RM50"
                End If

                If sValAcc = "N39_RM32_V" Then
                    fValidationOutcome = HS.GetCell("A#" & sNoteAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]") + HS.GetCell("A#" & sIsAcc & ".I#[ICP Top].C1#TOTCOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                Else
                    fValidationOutcome = HS.GetCell("A#" & sNoteAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]") - HS.GetCell("A#" & sIsAcc & ".I#[ICP Top].C1#TOTCOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                End If
                If fValidationOutcome <> 0 Then
                    Call PopulateValidationAccount(sValAcc, fValidationOutcome, LegalLevel, bIsBase)
                End If
            End If
        Next
    End If

End Sub

Sub ACT_ActualHardAccValidations(bIsBase, LegalLevel, StrBA, sAccountList)

    For Each ValAcc in HS.Account.List(sAccountList, "[Base]")

        Validate = ValidationNeeded(ValAcc, bIsBase, LegalLevel)

        If Validate = True Then
            SourceAcc = mid(ValAcc,1,len(ValAcc)-2)

            ValOutcomeTarget = CheckC3TargetForValidation(ValAcc, LegalLevel, bIsBase)
            HS.Exp "A#"&ValAcc&".C1#[None].C2#[None].C3#"&ValOutcomeTarget&" = A#"&SourceAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP"

            dData = HS.GetCell("A#" & ValAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#" & ValOutcomeTarget & ".C4#[None].I#[ICP Top]")
            If dData <> 0 Then
                Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#[None].C2#[None]")
            End If
        End If
    Next
End Sub

Sub ACT_ActualHardDataCommentValidation(bIsBase, LegalLevel, sAccount)
    If bIsBase = True Then
        If sAccount = "RM67" Then
            dData = HS.GetCellRealData("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].W#Periodic",bIsRealData)
            If bIsRealData = False Then dData = 0
        Else
            sCustom1 = "CUSTOM1_TOP"
            If sAccount = "RM93" Or sAccount = "HC004" Then
                sCustom1 = "PC99"
            End If
            dData = HS.GetCell("A#" & sAccount & ".C1#" & sCustom1 & ".C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        End If

        If dData <> 0 Then
            sValAccount = sAccount & "_CV"
            If sAccount = "A325" Then
                sValAccount = sAccount & "_2CV"
            End If

            If sAccount = "HC004" Or sAccount = "A234" Then
                Call CheckValidationComment(sAccount & "_CV", dData, LegalLevel, bIsBase, dData)
            Else
                Call ValidationCommentCheck(sValAccount, dData, LegalLevel, bIsBase)
            End If
        End If
    End If
End Sub

Sub ACT_ActualHardDataReportedCommentValidation(bIsBase, LegalLevel, sAccount)
    If bIsBase = True Then
        If sAccount = "RM91" or sAccount = "RM92" Then
            PrevData = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Prior")
            CurrData = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

        ElseIf sAccount = "RM69" Then
            PrevData = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Prior")
            CurrData = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

            iPeriodNum = HS.Period.Number()
        Else
            PrevData = HS.GetCellRealData("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Prior.W#Periodic",bIsRealDataPrev)
            CurrData = HS.GetCellRealData("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].W#Periodic",bIsRealDataCur)

            If bIsRealDataPrev = False Then PrevData = 0
            If bIsRealDataCur = False Then CurrData = 0
        End If

        If (CurrData = 0 And PrevData <> 0) Or (sAccount = "RM69" And PrevData < CurrData And iPeriodNum > 1) or ((sAccount = "RM91" or sAccount = "RM92") and (CurrData <= PrevData or (CurrData <> 0 and PrevData = 0)))  Then
            Call CheckValidationComment(sAccount & "_CV", (PrevData-CurrData), LegalLevel, bIsBase, "999999999")
        End If
    End If
End Sub

Sub ACT_ActualHardDataChangedCommentValidation(bIsBase, LegalLevel, sAccount)

    If IsArray(sAccount) = False Then
        dData = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If HS.Period.IsFirst = TRUE then
            dDataPrev = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Last.Y#Prior")
        Else
            dDataPrev = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Prior")
        End If
        AccToGenerateValAcc = sAccount
    Else
        dData = 0    :    dDataPrev = 0 : c = 0
        For each sAcc in sAccount
            dData = dData + HS.GetCell("A#" & sAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If HS.Period.IsFirst = TRUE then
                dDataPrev = dDataPrev + HS.GetCell("A#" & sAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Last.Y#Prior")
            Else
                dDataPrev = dDataPrev + HS.GetCell("A#" & sAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Prior")
            End If
            If c = 0 Then
                AccToGenerateValAcc = sAcc
            End If
            c = c + 1
        Next
    End if

    PeriodChange = dData - dDataPrev
    If PeriodChange <> 0 then
        If (dDataPrev = 0 and dData <> 0) Or AccToGenerateValAcc = "R873I" Then
            PercentChange = 1
        Else
            PercentChange = PeriodChange / dDataPrev
        End If

        If abs(PercentChange) >= 1 Then

            Call ValidationCommentCheck(AccToGenerateValAcc & "_CV", PeriodChange, LegalLevel, bIsBase)
        End If
    End If
End Sub

Sub ACT_ActualHardLegalCommentValidation(bIsBase, LegalLevel, sValAccount)
    If LegalLevel = True or bIsBase = True Then
        ValOutcomeTarget = CheckC3TargetForValidation(sValAccount, LegalLevel, bIsBase)

        sSourceAcc = "NC0520"
        If sValAccount = "N0520_2CV" Then
            sCustom2 = "C_CAPEX"
        ElseIf sValAccount = "N0520_3CV" Then
            sCustom2 = "C_DISPOSAL"
        Else
            sCustom2 = "CUSTOM2_TOP"
        End If

        dData = HS.GetCellRealData("A#" & sSourceAcc & ".C1#CUSTOM1_TOP.C2#" & sCustom2 & ".C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]",bIsRealData)
        If ValidateValAccAndGenTolerance(sValAccount, dData, bIsBase) = True Then

            If ValOutcomeTarget = "ValOutcome" Then
                sComment = HS.GetCellText("A#" & sValAccount & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP Top]")
                HS.Exp "A#" & sValAccount & ".C1#[None].C2#[None].C3#CommentRequired.C4#[None].I#[ICP None] = 1"
                HS.Exp "A#" & sValAccount & ".C1#[None].C2#[None].C3#CommentAmount.C4#[None].I#[ICP None] = " & dData
            End If

            If (len(sComment) < 10 and LegalLevel = True) or LegalLevel = False Then
                HS.Exp "A#" & sValAccount & ".C1#[None].C2#[None].C3#" & ValOutcomeTarget & " = " & dData
            End If
            Call PopulateValidationLevels(sValAccount,"A#" & sValAccount & ".C1#[None].C2#[None]")
        End If
    End If
End Sub

Sub ACT_ActualHardNoteCustomValidations(bIsBase,LegalLevel)
    For each ValAcc in HS.Account.List("ActualHardNoteCustomValidations","[Base]")

        SourceAcc = mid(ValAcc,1,len(ValAcc)-2)
        ValOutcomeTarget = CheckC3TargetForValidation(ValAcc,LegalLevel,bIsBase)

        For Each sC2Member In Array("C2_EOP", "C2_CAPEX", "C2_DISPOSAL", "C2_CFI")
            HS.Clear "A#" & ValAcc & ".C2#" & sC2Member & ".C3#" & ValOutcomeTarget
        Next

        HS.Exp "A#"&ValAcc&".C2#C2_EOP.C3#"&ValOutcomeTarget&" = A#"&SourceAcc&".C2#C_EOP.C3#CUSTOM3_TOP"
        dData = Hs.GetCell("A#"&ValAcc&".C1#CUSTOM1_TOP.C2#C2_EOP.C3#"&ValOutcomeTarget&".C4#[None].I#[ICP Top]")
        If dData <> 0 Then Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C2#C2_EOP")

        If ValAcc <> "NC0520_V" and ValAcc <> "NC0513_V" Then
            HS.Exp "A#"&ValAcc&".C2#C2_CAPEX.C3#"&ValOutcomeTarget&" = A#"&SourceAcc&".C2#C_CAPEX.C3#CUSTOM3_TOP"
            HS.Exp "A#"&ValAcc&".C2#C2_DISPOSAL.C3#"&ValOutcomeTarget&" = A#"&SourceAcc&".C2#C_DISPOSAL.C3#CUSTOM3_TOP"

            dData2 = Hs.GetCell("A#"&ValAcc&".C1#CUSTOM1_TOP.C2#C2_CAPEX.C3#"&ValOutcomeTarget&".C4#[None].I#[ICP Top]")
            dData3 = Hs.GetCell("A#"&ValAcc&".C1#CUSTOM1_TOP.C2#C2_DISPOSAL.C3#"&ValOutcomeTarget&".C4#[None].I#[ICP Top]")

            If dData2 <> 0 Then Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C2#C2_CAPEX")
            If dData3 <> 0 Then Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C2#C2_DISPOSAL")
        End If

    Next
End Sub

Sub ACT_ActualHardNoteCurrPeriodDifferThanZeroButNoDataInPrev4Q(bIsBase,LegalLevel,IntCurPeriodNum)

    For Each ValAcc In HS.Account.List("ActualHardNoteCurrPeriodDifferThanZeroButNoDataInPrev4Q", "[Base]")
        bValid = GetIsValidCalcFreq(ValAcc,IntCurPeriodNum)
        If bValid = True Then
            SourceAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
            ValOutcomeTarget = CheckC3TargetForValidation(ValAcc,LegalLevel,bIsBase)

            PrevQs = 0
            dData = HS.GetCell("A#" & SourceAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            If dData <> 0 Then

                PrevQs = HS.GetCell("A#" & SourceAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Cur-3" )
            End If

            If dData <> 0 And PrevQs = 0 Then
                Call ValidationCommentCheck(ValAcc, dData, LegalLevel, bIsBase)
            End If
        End If
    Next
End Sub

Sub ACT_ActualSoftYTDCheckValidations(bIsBase,LegalLevel)
    For each ValAcc in HS.Account.List("ActualSoftYTDCheckValidations","[Base]")
        PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
        PrevQValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Cur-3")

        If PrevQValue <> 0 Then
            CurrValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If CurrValue <= PrevQValue Then
                If CurrValue = 0 Then CurrValue = 999999999

                Call PopulateValidationAccount(ValAcc, CurrValue, LegalLevel, bIsBase)
            End If
        End If
    Next
End Sub

Sub ACT_ActualHardNote20C2Validations(bIsBase,LegalLevel)
    For Each ValAcc In HS.Account.List("ActualHardNote20C2Validations", "[Base]")
        PrimaryAcc = mid(ValAcc, 1, InStrRev(ValAcc, "_")-1)

        Set DataUnit=HS.OpenDataUnit("A#" & PrimaryAcc & ".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top].P#CUR-3")
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, sAccount, sICP, sC1, sC2, sC3, sC4, dData)
            If HS.IsZero(dData) = FALSE And sC2 <> "ARHI" And sC2 <> "JRHI" Then
                dValue = HS.GetCell("A#" & sAccount & ".C1#CUSTOM1_TOP.C2#" & sC2 & ".C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top]")

                If dValue < dData Then
                    Call PopulateValidationAccount(ValAcc, dData, LegalLevel, bIsBase)
                End If
            End If
        Next
    Next
End Sub

Sub ACT_ActualSoftQ2Q4PrevQdataCheckValidations(bIsBase,LegalLevel)

    For each ValAcc in HS.Account.List("ActualSoftQ2Q4PrevQdataCheckValidations","[Base]")
        PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
        DetailC2Check = GetUD(ValAcc, "Account", "ValC2")
        If DetailC2Check <> "" Then
            strC2 = DetailC2Check
        Else
            strC2 = "CUSTOM2_TOP"
        End If

        CurrValue = abs(HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#"&strC2&".C3#CUSTOM3_TOP.C4#[None]"))
        PrevQValue = abs(HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#"&strC2&".C3#CUSTOM3_TOP.C4#[None].P#Cur-3"))

        If CurrValue < PrevQValue Then
            If CurrValue = 0 Then CurrValue = PrevQValue
            Call PopulateValidationAccount(ValAcc, CurrValue, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualSoftCurrPeriodZeroButDataInPrevY(bIsBase,LegalLevel,IntCurPeriodNum)

    For each ValAcc in HS.Account.List("ActualSoftCurrPeriodZeroButDataInPrevY","[Base]")
        bValid = GetIsValidCalcFreq(ValAcc,IntCurPeriodNum)
        If bValid = True Then
            PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
            strC2 = "CUSTOM2_TOP"

            CurrValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#"&strC2&".C3#CUSTOM3_TOP.C4#[None]")
            PrevYValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#"&strC2&".C3#CUSTOM3_TOP.C4#[None].P#Last.Y#Prior")

            If CurrValue = 0 and PrevYValue <> 0 Then
                Call PopulateValidationAccount(ValAcc, PrevYValue, LegalLevel, bIsBase)
            End If
        End If
    Next
End Sub

Sub SoftSpecificNoteCommentValidations(bIsBase,LegalLevel,IntCurPeriodNum)

    For each ValAcc in HS.Account.List("SoftSpecificNoteCommentValidations","[Base]")

        PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
        strC2 = "CUSTOM2_TOP"

        PrevYValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#Last.Y#Prior")

        If PrimaryAcc = "N2251" Then
            CurrYearAcc = "N2259"
        ElseIf PrimaryAcc = "N2231" Then
            CurrYearAcc = "N2239"
        End If
        CurrValue = HS.GetCell("A#"&CurrYearAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")

        If CurrValue = 0 and PrevYValue <> 0 Then
            Call ValidationCommentCheck(ValAcc, "999999999", LegalLevel, bIsBase)
        End If

    Next
End Sub

Sub ACT_ActualDataNotReportedValidations(bIsBase,LegalLevel,IntCurPeriodNum)

    aAccList = CombineLists(HS.Account.List("ActualDataNotReportedValidations","[Base]"), Array("N2940_V"))

    For each ValAcc in aAccList
        If ValAcc = "N2932_V" Then

            N2910_OPE = HS.GetCell("A#N2910.Y#PRIOR.P#LAST.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            N0436 = HS.GetCell("A#N0436.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If (N2910_OPE <> 0 or N0436 <> 0) Then
                N2932 = HS.GetCell("A#N2932.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                Tot = N2910_OPE + N0436
                If N2932 = 0 Then
                    Call PopulateValidationAccount(ValAcc, Tot, LegalLevel, bIsBase)
                End If
            End If
        Else

            NoteAcc1 = GetUD(ValAcc, "Account", "ValSourceAcc")
            NoteAcc2 = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)

            a1 = HS.GetCell("A#" & NoteAcc1 & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If a1 <> 0 then
                a2 = HS.GetCell("A#" & NoteAcc2 & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                If a2 = 0 Then
                    Call PopulateValidationAccount(ValAcc, a1, LegalLevel, bIsBase)
                End If
            End If
        End If
    Next
End Sub

Sub ACT_ActualDataNotReportedValidations_2(bIsBase,LegalLevel,IntCurPeriodNum)

    For each ValAcc in HS.Account.List("ActualDataNotReportedValidations_2","[Base]")

        NoteAcc1 = GetUD(ValAcc, "Account", "ValSourceAcc")
        NoteAcc2 = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)

        a1 = HS.GetCell("A#" & NoteAcc2 & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If a1 <> 0 then
            a2 = HS.GetCell("A#" & NoteAcc1 & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If a2 = 0 Then
                Call PopulateValidationAccount(ValAcc, a1, LegalLevel, bIsBase)
            End If
        End If

    Next
End Sub

Sub ACT_ActHardNoteVal_DisposalsReported(bIsBase, LegalLevel, sAccountHierarchy)
    For Each NoteValAcc in HS.Account.List(sAccountHierarchy, "[Base]")
        NoteAcc = MID(NoteValAcc,1,Instr(NoteValAcc,"_")-1)

        D_DECR = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#D_DECR.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        A_DECR = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#A_DECR.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

        bValidate = TRUE
        If A_DECR <> 0 And D_DECR = 0 And sAccountHierarchy = "ActHardNoteVal_DisposalReportedInAcqCostAndNotReportedInAccDepr" Then

            dValue = A_DECR
        ElseIf D_DECR <> 0 And A_DECR = 0 And sAccountHierarchy = "ActHardNoteVal_DisposalReportedInAccDeprAndNotReportedInAcqCost" Then

            dValue = D_DECR
        ElseIf D_DECR > A_DECR And sAccountHierarchy = "ActHardNoteVal_DisposedAccDepreciationBiggerThanDisposedAcqCost" Then

            dValue = D_DECR - A_DECR
        Else
            bValidate = FALSE
        End If

        If bValidate = TRUE Then

            Call ValidationCommentCheck(NoteValAcc, dValue, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActHardNoteValReportedAsPositive(bIsBase, LegalLevel, sAccountHierarchy)
    For each NoteValAcc in HS.Account.List(sAccountHierarchy,"[Base]")
        NoteAcc = MID(NoteValAcc,1,Instr(NoteValAcc,"_")-1)

        sCustom2 = "D_DECR"
        If sAccountHierarchy = "ActHardNoteVal_A_DecrReportedAsPositive" Then
            sCustom2 = "A_DECR"
        End If

        dData = HS.GetCell("A#" & NoteAcc & ".C1#CUSTOM1_TOP.C2#" & sCustom2 & ".C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        If dData < 0 Then

            Call PopulateValidationAccount(NoteValAcc, dData, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActHardNoteVal_DecrNotReported(bIsBase,LegalLevel)

    For each NoteValAcc in HS.Account.List("ActHardNoteVal_DecrNotReported","[Base]")
        NoteAcc = MID(NoteValAcc,1,Instr(NoteValAcc,"_")-1)
        D_CACQ = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#D_CACQ.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

        A_CACQ = 0
        If D_CACQ = 0 Then
            A_CACQ = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#A_CACQ.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        End If

        If A_CACQ <> 0 and D_CACQ = 0 Then

            If ValidateValAccAndGenTolerance(NoteValAcc,A_CACQ,bIsBase) = True Then

                Call CheckValidationComment(NoteValAcc, D_CACQ, LegalLevel, bIsBase, A_CACQ)
            End If
        End If
    Next
End Sub

Sub ACT_ActHardNoteVal_DEPREmissing(bIsBase,LegalLevel)

    For each NoteValAcc in HS.Account.List("ActHardNoteVal_DEPREmissing","[Base]")
        NoteAcc = MID(NoteValAcc,1,Instr(NoteValAcc,"_")-1)

        DEPRE = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#D_DEPRE.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

        AD = 0
        If DEPRE = 0 Then
            A = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#A.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Cur-3")
            D = HS.GetCell("A#"&NoteAcc&".C1#CUSTOM1_TOP.C2#D.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].P#Cur-3")
            AD = A - D
        End If

        If AD <> 0 and DEPRE = 0 Then

            Call ValidationCommentCheck(NoteValAcc, AD, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualHardNote3Validations(LegalLevel, bIsBase, sPeriod, sEntity,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,StrPrevScenBEGBAL,IntYear,IntCurPeriodNum)
    iMargin = 0
    EntUD = GetUD(sEntity, "Entity", "")

    If IsActiveGL(EntUD,IntYear,IntCurPeriodNum,HS.Scenario.member()) = True Then

        If HS.Entity.IsDescendant("ESTONIA", sEntity) = FALSE And HS.Entity.IsDescendant("MCG_ME", sEntity) = FALSE Then

            If SuperGLCalcActive = True and TaxGroupEntity <> "" Then
                If SuperGL_Ent Then
                    AccList = Array("LTR_DEFTAX", "LTR_CURTAX")
                Else
                    AccList = Array("LTR_DEFTAX")
                End If
            Else
                AccList = Array("LTR_DEFTAX", "LTR_CURTAX")
            End If

            For Each sAccount In AccList
                dData = HS.GetCell("A#" & sAccount & sSrcPOV)
                If HS.IsZero(dData) = TRUE Then
                    sValAcc = "NT2" & Right(sAccount, Len(sAccount) - 3) & "_V"
                    Call PopulateValidationAccount(sValAcc, "99999999", LegalLevel, bIsBase)
                End If
            Next
        End If
    End If
End Sub

Sub ACT_ActualHardNoteNTValidations(LegalLevel, bIsBase, sPeriod, sEntity,LegalEntForStrEntity,SuperGLCalcActive,TaxGroupEntity,SuperGL_Ent,StrPrevScenBEGBAL,IntYear,IntCurPeriodNum)
    iMargin = 0
    EntUD = GetUD(sEntity, "Entity", "")
    sSrcC1C2C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#CUSTOM4_TOP"
    sSrcC1C3C4 = ".I#[ICP Top].C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    sSrcDIM = ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP"
    bIsElimEnt = Hs.Entity.IsBase("MCG_ME","")

    If IsActiveGL(EntUD,IntYear,IntCurPeriodNum,HS.Scenario.member()) = True And bIsBase = True Then

        dNT1_420 = HS.GetCell("A#NT1_420.C2#DT_CHNG" & sSrcC1C3C4)
        dNT1_450 = HS.GetCell("A#NT1_450.C2#DT_CHNG" & sSrcC1C3C4)
        dNT1_510 = HS.GetCell("A#NT1_510.C2#DT_CHNG" & sSrcC1C3C4)
        dNT1_305 = HS.GetCell("A#NT1_305.C2#DT_CHNG" & sSrcC1C3C4)
        dDEF_TAX = HS.GetCell("A#DEF_TAX_V.C3#ValOutcome" & sSrcC1C2C4)

        iDiff = dNT1_420 + dNT1_510 + dNT1_450 + dNT1_305 + dDEF_TAX
        If HS.IsZero(iDiff) = FALSE Then
            Call PopulateValidationAccount("NT1_420_V", iDiff, LegalLevel, bIsBase)
        End If

        iTAX_CALC_STOP = HS.GetCell("E#FLAG_ENTITY.V#EUR.A#TAX_CALC_STOP" & sSrcDIM)

        If iTAX_CALC_STOP <> 1 And bIsElimEnt = False And ((TaxGroupEntity <> "" and SuperGLCalcActive = True And SuperGL_Ent = True) Or TaxGroupEntity = "" Or SuperGLCalcActive = False) Then

            iTAX_CALC_START = HS.GetCell("A#TAX_CALC_START" & sSrcDIM)
            iTAX_CALC_STOP = HS.GetCell("A#TAX_CALC_STOP" & sSrcDIM)
            If iTAX_CALC_START <> 1 And iTAX_CALC_STOP <> 1 Then
                Call PopulateValidationAccount("TAX_CALC_V", "99999999", LegalLevel, bIsBase)
            End If
        End If

        iTAX_CALC_STOP_OVERRIDE = HS.GetCell("A#TAX_CALC_STOP_OVERRIDE" & sSrcDIM)
        If iTAX_CALC_STOP_OVERRIDE <> 0 Then
            Call PopulateValidationAccount("TAX_CALC_OVERRIDE_V", "99999999", LegalLevel, bIsBase)
        End If

        iTAX_VA = HS.GetCell("A#TAX_VA" & sSrcDIM)
        dNT1_TempDiff = HS.GetCell("A#NT1_TempDiff.C2#VA_CB" & sSrcC1C3C4)
        dNT1_99 = HS.GetCell("A#NT1_99.C2#TAX_CB" & sSrcC1C3C4)
        If iTAX_VA <> 0 And dNT1_TempDiff = 0 And dNT1_99 <> 0 Then
            Call PopulateValidationAccount("NT1_VA_V", "99999999", LegalLevel, bIsBase)
        End If

        dNT1_97 = HS.GetCell("A#NT1_97.C2#TAX_CB" & sSrcC1C3C4)
        If dNT1_97 <> 0 Then
            Call ValidationCommentCheck("NT1_97_CV", dNT1_97, LegalLevel, bIsBase)
        End If

        dNT1_98_TAX_OB = HS.GetCell("A#NT1_98.C2#TAX_OB" & sSrcC1C3C4)
        dNT2_98_EXP = HS.GetCell("A#NT2_98_EXP" & sSrcDIM)
        If dNT1_98_TAX_OB = 0 And dNT2_98_EXP <> 0 Then
            Call PopulateValidationAccount("NT2_98_EXP_V", "99999999", LegalLevel, bIsBase)
        End If

        NT1_99 = HS.GetCell("A#NT1_99.C2#TAX_CB" & sSrcC1C3C4)
        If NT1_99 < 0 Then
            Call PopulateValidationAccount("NT1_99_V", NT1_99, LegalLevel, bIsBase)
        End If

        For Each sAcc In Array("NT2_1000", "NT2_1001", "NT2_901", "NT2_51", "NT3_101", "NT3_151")
            iValue = HS.GetCell("A#" & sAcc & sSrcDIM)
            If HS.IsZero(iValue) = FALSE Then
                Call PopulateValidationAccount(sAcc & "_V", iValue, LegalLevel, bIsBase)
            End If
        Next

        For Each sAcc In Array("NT2_223", "NT2_234")
            iValue = HS.GetCell("A#" & sAcc & sSrcDIM)
            If HS.IsZero(iValue) = FALSE Then
                Call ValidationCommentCheck(sAcc & "_CV", iValue, LegalLevel, bIsBase)
            End If
        Next

        For Each sValAcc In Array("NT1_21_CV","NT1_22_CV","NT1_25_CV")
            PrimaryAcc = mid(sValAcc,1,InStrRev(sValAcc,"_")-1)
            PrevQValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#ND_CB.C3#CUSTOM3_TOP.C4#[None].P#Cur-3")
            If PrevQValue <> 0 Then
                CurrQValue = HS.GetCell("A#"&PrimaryAcc&".I#[ICP top].C1#CUSTOM1_TOP.C2#ND_CB.C3#CUSTOM3_TOP.C4#[None]")
                If CurrQValue = 0 Then
                    Call ValidationCommentCheck(sValAcc, PrevQValue, LegalLevel, bIsBase)
                End If
            End If
        Next

        dNT2_301 = HS.GetCell("A#NT2_301.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dNT2_300 = HS.GetCell("A#NT2_300.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dNT1_99 = HS.GetCell("A#NT1_99.I#[ICP top].C1#CUSTOM1_TOP.C2#TAX_CB.C3#CUSTOM3_TOP.C4#[None]")
        If dNT2_301 = 0 And dNT2_300 > 0 And dNT1_99 <> 0 Then
            Call ValidationCommentCheck("NT2_301_CV", dNT2_300, LegalLevel, bIsBase)
        End If

        For Each sAcc In HS.Account.List("NOTE_NT4", "[Base]")

            If sAcc <> "NT4_50" And sAcc <> "NT4_60" And sAcc <> "NT4_70" And sAcc <> "NT4_80" Then
                iDiff = HS.GetCell("A#" & sAcc & ".C2#TaxAG50" & sSrcC1C3C4)
                If HS.IsZero(iDiff) = FALSE Then
                    Call PopulateValidationAccount(sAcc & "_V", idiff, LegalLevel, bIsBase)
                End If
            End If
        Next

        For Each sAcc In Array("NT4_50", "NT4_60")
            iTaxAG10 = HS.GetCell("A#" & sAcc & ".C2#TaxAG10" & sSrcC1C3C4)
            iTaxAG20 = HS.GetCell("A#" & sAcc & ".C2#TaxAG20" & sSrcC1C3C4)
            iValue = iTaxAG10 + iTaxAG20
            If HS.IsZero(iValue) = FALSE Then
                Call ValidationCommentCheck(sAcc & "_CV", iValue, LegalLevel, bIsBase)
            End If
        Next

        dNT2_A362E_Total = HS.GetCell("A#NT2_A362E_Total.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dNT2_L366E_Total = HS.GetCell("A#NT2_L366E_Total.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dNT2_A362E_Total <> 0 And dNT2_L366E_Total <> 0 Then
            If Abs(dNT2_A362E_Total) < Abs(dNT2_L366E_Total) Then
                dValOutcome = dNT2_A362E_Total
            Else
                dValOutcome = dNT2_L366E_Total
            End If
            Call ValidationCommentCheck("NT2_A362E_L366E_CV", dValOutcome, LegalLevel, bIsBase)
        End If

        dNT2_460 = HS.GetCell("A#NT2_460.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dNT2_460 <> 0 Then
            Call ValidationCommentCheck("NT2_460_CV", 9999999999, LegalLevel, bIsBase)
        End If

        dNT2_455 = HS.GetCell("A#NT2_455.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dNT2_455 <> 0 Then
            Call ValidationCommentCheck("NT2_455_CV", dNT2_455, LegalLevel, bIsBase)
        End If

        iStopCode = HS.GetCell("A#ACQ_STOP.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#ACQTOT")
        dNT2_910 = HS.GetCell("A#NT2_910.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dNT2_950 = HS.GetCell("A#NT2_950.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dNT2_300 = HS.GetCell("A#NT2_300.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dNT2_950 >= dNT2_910 And dNT2_300 < 0 And iStopCode <> 1 And Abs(dNT2_950) >= 3 Then
            Call PopulateValidationAccount("NT2_950_V", 9999999999, LegalLevel, bIsBase)
        End If

        If IsItemInList(UCase(sPeriod),Array("JUN","SEP","DEC")) = True Then
            dLastQTAX_PREV = HS.GetCell("A#NT1_TempDiff.I#[ICP top].C1#CUSTOM1_TOP.C2#TAX_PREV.C3#CUSTOM3_TOP.C4#[None].P#CUR-3")
            If dLastQTAX_PREV <> 0 Then
                dCurQTAX_PREV = HS.GetCell("A#NT1_TempDiff.I#[ICP top].C1#CUSTOM1_TOP.C2#TAX_PREV.C3#CUSTOM3_TOP.C4#[None]")
                dDiff = dCurQTAX_PREV - dLastQTAX_PREV
                If dDiff <> 0 Then
                    Call ValidationCommentCheck("TAX_PREV_CV", dDiff, LegalLevel, bIsBase)
                End If
            End If
        End If

        TAX_PE = HS.GetCell("A#TAX_PE.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        If TAX_PE = 1 Then
            NT3_240 = HS.GetCell("A#NT3_240.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If NT3_240 = 0 Then
                Call ValidationCommentCheck("NT3_240_CV", 9999999999, LegalLevel, bIsBase)
            End If
            NT3_250 = HS.GetCell("A#NT3_250.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If NT3_250 = 0 Then
                Call ValidationCommentCheck("NT3_250_CV", 9999999999, LegalLevel, bIsBase)
            End If
        End If

        dNT3_210 = HS.GetCell("A#NT3_210.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dNT2_460 = HS.GetCell("A#NT2_460.I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dDiff = dNT2_460 - dNT3_210
        If dDiff <> 0 Then
            Call ValidationCommentCheck("NT3_210_CV", dDiff, LegalLevel, bIsBase)
        End If

    End If
End Sub

Sub ACT_ActualHardNote4Validations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear,SuperGL_Ent)

    If (bIsBase = True or LegalLevel = True) and Ucase(StrPeriod) = "DEC" Then
        Call ACT_Note4_OpeningValueValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)
        Call ACT_Note4_AccComparisonValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)
        Call ACT_Note4_SpecialValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)
        Call ACT_Note4_CommentValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)
        Call ACT_ActualSignCheckValidations("Note4_SignCheckValidations", FALSE,LegalLevel,bIsBase,SuperGL_Ent)
    End If
End Sub

Sub ACT_Note4_OpeningValueValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)

    For each ValAcc in HS.Account.List("Note4_OpeningValueValidations","[Base]")
        AccUD = GetUD(ValAcc, "Account", "ValC2")
        OPEC2 = mid(AccUD,1,Instr(AccUD,",")-1)
        COMPC2 = mid(AccUD,Instr(AccUD,",")+1,80)
        SourceAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)

        OPE = HS.GetCell("A#" & SourceAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&OPEC2&".C3#CUSTOM3_TOP.C4#[None]")
        COMP = HS.GetCell("A#" & SourceAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&COMPC2&".C3#CUSTOM3_TOP.C4#[None]") * -1
        If COMP > OPE Then
            DIFF = COMP - OPE
            Call PopulateValidationAccount(ValAcc, DIFF, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_Note4_AccComparisonValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)

    For each ValAcc in HS.Account.List("Note4_AccComparisonValidations","[Base]")
        LAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
        If ValAcc = "N0415_V" Then RAcc = "RM01E" else RAcc = "N0"&(CInt(mid(LAcc,2,80)) - 20)

        lData = HS.GetCell("A#" & LAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        rData = HS.GetCell("A#" & RAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If lData > rData Then
            DIFF = lData - RData
            Call PopulateValidationAccount(ValAcc, DIFF, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_Note4_SpecialValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)

    N0415 = HS.GetCell("A#N0415.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
    If HS.IsZero(N0415) = FALSE Then

        sSum = 0
        For Each sAcc In Array("N0401", "N0402", "N0404", "N0405", "N0407")
            If sSum = 0 Then
                sSum = sSum + HS.GetCell("A#" & sAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            End If
        Next

        If N0415 <> 0 and sSum = 0 Then
            DIFF = N0415 - sSum
            Call PopulateValidationAccount("N0415_2V", DIFF, LegalLevel, bIsBase)
        End If
    End If
End Sub

Sub ACT_Note4_CommentValidations(LegalLevel, bIsBase, StrPeriod, StrEntity, IntYear)

    For each ValAcc in HS.Account.List("Note4_CommentValidations","[Base]")
        AccUD = GetUD(ValAcc, "Account", "ValC2")
        SourceAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
        If AccUD <> "" Then

            OPEC2 = mid(AccUD,1,Instr(AccUD,",")-1)
            CLOSINGC2 = mid(AccUD,Instr(AccUD,",")+1,InStrRev(AccUD,",")-Instr(AccUD,",")-1)
            COMPC2 = mid(AccUD,InStrRev(AccUD,",")+1,80)

            OPE = HS.GetCell("A#" & SourceAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&OPEC2&".C3#CUSTOM3_TOP.C4#[None]")
            CLO = HS.GetCell("A#" & SourceAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&CLOSINGC2&".C3#CUSTOM3_TOP.C4#[None]")
            COMP = HS.GetCell("A#" & SourceAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&COMPC2&".C3#CUSTOM3_TOP.C4#[None]")

            If (OPE <> 0 or CLO <> 0) and COMP = 0 then
                If OPE > CLO Then Diff = OPE Else Diff = CLO
                Call ValidationCommentCheck(ValAcc, Diff, LegalLevel, bIsBase)
            End If
        Else
            dData = HS.GetCell("A#" & SourceAcc & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If dData <> 0 Then
                Call ValidationCommentCheck(ValAcc, dData, LegalLevel, bIsBase)
            End if
        End If
    Next
End Sub

Sub ACT_ActualHardNote15CValidations(LegalLevel, bIsBase)
    For each ValAcc in HS.Account.List("ActualHardNote15CValidations","[Base]")
        sNoteAccount = GetPrimaryAccForValidationAcc(ValAcc)
        sARAccount = GetUD(sNoteAccount, "Account", "PrimaryAcc")

        dValData = 0

        iARData = HS.GetCell("A#" & sARAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        iNoteData = HS.GetCell("A#" & sNoteAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#PROV_TOTAL.C3#CUSTOM3_TOP.C4#[None]")

        If Abs(iNoteData) > Abs(iARData) Then
            dValData = iNoteData - iARData
        End If

        If dValData <> 0  Then
            Call PopulateValidationAccount(ValAcc, dValData, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualHardNote15CValidations2(LegalLevel, bIsBase)

    For each ValAcc in HS.Account.List("ActualHardNote15CValidations2","[Base]")
        sNoteAccount = GetPrimaryAccForValidationAcc(ValAcc)
        sPercentAcc = sNoteAccount&"b"
        sARccount = GetUD(sNoteAccount, "Account", "PrimaryAcc")

        PROV_MIN = HS.GetCell("A#" & sNoteAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#PROV_MIN.C3#CUSTOM3_TOP.C4#[None]")
        PERCENT = HS.GetCell("E#[None].V#[None].A#" & sPercentAcc & ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]") / 100
        BSAcc = HS.GetCell("A#" & sARccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        BSCalc = BSAcc * PERCENT

        If Abs(PROV_MIN) > Abs(BSCalc) Then
            DIFF = PROV_MIN - BSCalc
            Call PopulateValidationAccount(ValAcc, DIFF, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualHardNote15CValidations3(LegalLevel, bIsBase)

    For Each ValAcc In HS.Account.List("ActualHardNote15CValidations3", "[Base]")
        sNoteAccount = GetPrimaryAccForValidationAcc(ValAcc)
        sARAccount = GetUD(sNoteAccount, "Account", "PrimaryAcc")

        dValData = 0

        iARData = HS.GetCell("A#" & sARAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        iNoteData = HS.GetCell("A#" & sNoteAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#PROV_ADD.C3#CUSTOM3_TOP.C4#[None]")

        If (iARData > 0 and iNoteData < 0) or (iARData < 0 and iNoteData > iARData) Then
            Call PopulateValidationAccount(ValAcc, iNoteData, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_ActualHardNote15C_PROV_MIN_Validations(LegalLevel, bIsBase)

    For each ValAcc in HS.Account.List("ActualHardNote15C_PROV_MIN_Validations","[Base]")
        sNoteAccount = GetPrimaryAccForValidationAcc(ValAcc)
        sPercentAcc = sNoteAccount&"b"

        PROV_MIN = HS.GetCell("A#" & sNoteAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#PROV_MIN.C3#CUSTOM3_TOP.C4#[None]")
        REC_GROSS = HS.GetCell("A#" & sNoteAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#REC_GROSS.C3#CUSTOM3_TOP.C4#[None]")
        PERCENT = HS.GetCell("E#[None].V#[None].A#" & sPercentAcc & ".I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]") / 100
        COMP_CALC = 0.8 * PERCENT * REC_GROSS

        If Abs(PROV_MIN) < Abs(COMP_CALC) Then
            DIFF = COMP_CALC - PROV_MIN
            Call ValidationCommentCheck(ValAcc, DIFF, LegalLevel, bIsBase)
        End If
    Next
End Sub

Sub ACT_RealEstateValidations(LegalLevel, bIsBase, sPeriod)
    dCheckTolerance = 1

    If sPeriod = "JUN" Or sPeriod = "SEP" Or sPeriod = "DEC" Then
        iPeriod = GetPeriodNumber(sPeriod)
        sPrevQ = GetPeriodLabel(iPeriod - 3)

        For Each sAccount In HS.Account.List("FM200", "[Base]")
            dCurrData = 0
            dPrevData = HS.GetCell("A#" & sAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].P#" & sPrevQ)
            If dPrevData > 0 Then
                dCurrData = HS.GetCell("A#" & sAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            End If

            If dCurrData <= dPrevData And dPrevData > 0 Then
                Call PopulateValidationAccount(sAccount & "_V", dPrevData, LegalLevel, bIsBase)
            End If
        Next
    End If

    dData = HS.GetCell("A#FM110.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")

    dValue1 = HS.GetCell("A#N0601.I#[ICP Top].C1#CUSTOM1_TOP.C2#D_DEPRE.C3#CUSTOM3_TOP.C4#[None]")
    dValue2 = HS.GetCell("A#N0602.I#[ICP Top].C1#CUSTOM1_TOP.C2#D_DEPRE.C3#CUSTOM3_TOP.C4#[None]")
    dSum = dValue1 + dValue2
    If dData < dSum - dCheckTolerance Or dData > dSum + dCheckTolerance Then
        Call PopulateValidationAccount("FM110_2V", dSum, LegalLevel, bIsBase)
    End If

    dFM200Data = HS.GetCell("A#FM200.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
    If dFM200Data <= 0 Then

        dValue = HS.GetCell("A#HC004.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dValue >= 5 And dFM200Data <= 0 Then
            Call ValidationCommentCheck("FM200_CV", dValue, LegalLevel, bIsBase)
        End If

        dValue = HS.GetCell("A#RM10.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dValue > 0 And dFM200Data <= 0 Then
            Call ValidationCommentCheck("FM200_2CV", dValue, LegalLevel, bIsBase)
        End If

        dValue1 = HS.GetCell("A#A122.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dValue2 = HS.GetCell("A#A125.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dValue3 = HS.GetCell("A#A126.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        dSum = dValue1 + dValue2 + dValue3
        If dSum > 0 And dFM200Data <= 0 Then
            Call ValidationCommentCheck("FM200_4CV", dSum, LegalLevel, bIsBase)
        End If
    Else
        For Each sAccount In HS.Account.List("FM200", "[Base]")
            dValue = HS.GetCell("A#" & sAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
            If dFM200Data = dValue Then
                Call ValidationCommentCheck("FM200_3CV", dValue, LegalLevel, bIsBase)
            End If
        Next
    End If
End Sub

Sub ACT_ActualHardNote14_19Validations(LegalLevel,bIsBase)

    For each ValAcc in HS.Account.List("ActualHardNote14_19Validations","[Base]")
        If left(ValAcc,3) = "N14" Then
            C2ToCheck = "RC200"
        ElseIf left(ValAcc,3) = "N19" Then
            C2ToCheck = "LR200"
        End If

        PrimaryAcc = Mid(ValAcc,1,len(ValAcc)-2)
        CheckC2Value = HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#"&C2ToCheck&".C3#CUSTOM3_TOP.C4#[None]")

        If CheckC2Value <> 0 Then

            Call PopulateValidationAccount(ValAcc, CheckC2Value, LegalLevel, bIsBase)
        End If
    Next

    LR37 = HS.GetCell("A#N19_L500.C1#CUSTOM1_TOP.C2#LR37.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
    LR32 = HS.GetCell("A#N19_L500.C1#CUSTOM1_TOP.C2#LR32.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
    N2135 = HS.GetCell("A#N2135.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
    N2136 = HS.GetCell("A#N2136.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
    N3021 = HS.GetCell("A#N3021.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

    If LR37 = 0 And LR32 = 0 And (N2135 <> 0 Or N2136 <> 0 Or N3021 <> 0) Then
        Call PopulateValidationAccount("N19_L500_LR37_V", (N2135+N2136+N3021), LegalLevel, bIsBase)
    End If

    If LR37 <> 0 And LR32 <> 0 And (N2135 = 0 And N2136 = 0 And N3021 = 0) Then
        Call PopulateValidationAccount("N19_L500_LR37_2V", LR37+LR32, LegalLevel, bIsBase)
    End If

End Sub

Sub ActualHardNote13Validations(LegalLevel,bIsBase,StrEntity,bDoYearlyCalc)

    A181 = HS.GetCell("A#A181.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
    L245 = HS.GetCell("A#L245.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")

    If A181 <> 0 or L245 <> 0 Then

        If bDoYearlyCalc = False Then
            For each Note13ValAcc in HS.Account.List("ActualHardNote13ValidationsDynamic","[Base]")
                NonAggList = Array("N1390","N1391","N1392","N1393")
                PrimaryAcc = mid(Note13ValAcc,1,InStrRev(Note13ValAcc,"_")-1)

                If IsItemInList(PrimaryAcc,NonAggList) = True Then
                    dData = HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#[None].C2#[None].C3#Inp.C4#[None]")
                Else
                    dData = HS.GetCell("A#"&PrimaryAcc&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                End If

                If HS.Account.IsBase("ActualHardNote13CountrySpecificValidations",Note13ValAcc) = True Then
                    If HS.Entity.IsDescendant("SWEDEN",StrEntity) or HS.Entity.IsDescendant("JAPAN",StrEntity) or HS.Entity.IsDescendant("UNITED_KINGDOM",StrEntity) or HS.Entity.IsDescendant("NORWAY",StrEntity) Then
                        If dData = 0 Then

                            Call ValidationCommentCheck(Note13ValAcc, "999999999", LegalLevel, bIsBase)
                        End If
                    End If
                ElseIf Instr(Note13ValAcc,"CV") > 0 Then
                    If dData = 0 Then
                        Call ValidationCommentCheck(Note13ValAcc, "999999999", LegalLevel, bIsBase)
                    End if

                Else
                    If PrimaryAcc = "N1391" and HS.Account.IsBase("ActualHardNote13CountrySpecificValidations",Note13ValAcc) = False Then
                        N0218 = HS.GetCell("A#N0218.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
                        If N0218 > 3 and dData = 0 Then
                            Call PopulateValidationAccount(Note13ValAcc, "999999999", LegalLevel, bIsBase)
                        End If
                    Else
                        If dData = 0 Then
                            Call PopulateValidationAccount(Note13ValAcc, "999999999", LegalLevel, bIsBase)
                        End if
                    End if
                End If
            Next
        End If
    End If

    dData1 = HS.GetCell("A#N13_Assets.I#[ICP Top].C1#CUSTOM1_TOP.C2#PS80.C3#CUSTOM3_TOP.C4#[None]")
    dData2 = HS.GetCell("A#N13_Liabilities.I#[ICP Top].C1#CUSTOM1_TOP.C2#PS80.C3#CUSTOM3_TOP.C4#[None]")

    If dData1 <> 0 or dData2 <> 0 Then

        Call ValidationCommentCheck("N13_NET_PS80_CV", "999999999", LegalLevel, bIsBase)
    End If

    dData_N1308 = HS.GetCell("A#N1308.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
    dData_N1318 = HS.GetCell("A#N1318.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
    sum = dData_N1308 + dData_N1318

    If sum <> 0 And bDoYearlyCalc = False Then
        dData = HS.GetCell("A#N1399.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If dData = 0 and (A181 <> 0 or L245 <> 0) Then
            x = L245 + A181
            Call ValidationCommentCheck("N1399_CV", x, LegalLevel, bIsBase)
        End If
    End If

    dData = HS.GetCell("A#N13_NET.I#[ICP Top].C1#CUSTOM1_TOP.C2#PS98.C3#CUSTOM3_TOP.C4#[None]")
    If dData <> 0 Then
        Call PopulateValidationAccount("N13_NET_V", dData, LegalLevel, bIsBase)
    End If

    dData = HS.GetCell("A#N13_NET.I#[ICP Top].C1#CUSTOM1_TOP.C2#PS100.C3#CUSTOM3_TOP.C4#[None]")
    If dData <> 0 Then
        Call PopulateValidationAccount("N13_NET_2V", dData, LegalLevel, bIsBase)
    End If

    L245_ACQDIS = HS.GetCell("A#L245.I#[ICP Top].C1#CUSTOM1_TOP.C2#ACQTOT.C3#CUSTOM3_TOP.C4#[None]") - HS.GetCell("A#L245.I#[ICP Top].C1#CUSTOM1_TOP.C2#DISPBUSINTOT.C3#CUSTOM3_TOP.C4#[None]")
    A181_ACQDIS = HS.GetCell("A#A181.I#[ICP Top].C1#CUSTOM1_TOP.C2#ACQTOT.C3#CUSTOM3_TOP.C4#[None]") - HS.GetCell("A#A181.I#[ICP Top].C1#CUSTOM1_TOP.C2#DISPBUSINTOT.C3#CUSTOM3_TOP.C4#[None]")
    PS70 = HS.GetCell("A#N13_Net.I#[ICP Top].C1#CUSTOM1_TOP.C2#PS70.C3#CUSTOM3_TOP.C4#[None]")
    dData = PS70 - L245_ACQDIS - A181_ACQDIS
    If dData <> 0 Then
        Call PopulateValidationAccount("N13_NET_3V", dData, LegalLevel, bIsBase)
    End If
End Sub

Sub Act_ActualHardEnterAsPositiveCommentValidations(bIsBase,LegalLevel)

    For each ValAcc in HS.Account.List("ActualHardEnterAsPositiveCommentValidations","[Base]")

        Validate = ValidationNeeded(ValAcc,bIsBase,LegalLevel)
        If Validate = True Then

            PrimaryAcc = mid(ValAcc,1,InStrRev(ValAcc,"_")-1)
            dData = HS.GetCell("A#"&PrimaryAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")

            If dData < 0 Then

                Call ValidationCommentCheck(ValAcc, dData, LegalLevel, bIsBase)
            End If
        End If
    Next
End Sub

Sub ACT_ICValidations(StrEntity,bIsBase,StrPeriod,IntYear,StrBA,strApp)

    iICValidationActive = IsICValidationActive()
    If iICValidationActive > 0 Then
        ICPList = GetICValidationsList(StrEntity, bIsBase, StrPeriod, IntYear, strApp, iICValidationActive)
    End If

    AvgRate = HS.GetRate("V#EUR.A#AVG_RATES")
    EndRate = HS.GetRate("V#EUR.A#END_RATES")
    EntCurr = HS.Entity.DefCurrency(StrEntity)

    Redim IC_Counterpart_AccList(1,33)

    IC_Counterpart_AccList(0,0) = "A#RM56I"               :       IC_Counterpart_AccList(1,0) = "A#RM58I"
    IC_Counterpart_AccList(0,1) = "A#RM58I"               :       IC_Counterpart_AccList(1,1) = "A#RM56I"
    IC_Counterpart_AccList(0,2) = "A#R812I"               :       IC_Counterpart_AccList(1,2) = "A#R813I"
    IC_Counterpart_AccList(0,3) = "A#R813I"               :       IC_Counterpart_AccList(1,3) = "A#R812I"
    IC_Counterpart_AccList(0,4) = "A#R832I"               :       IC_Counterpart_AccList(1,4) = "A#R833I"
    IC_Counterpart_AccList(0,5) = "A#R833I"               :       IC_Counterpart_AccList(1,5) = "A#R832I"
    IC_Counterpart_AccList(0,6) = "A#R852I"               :       IC_Counterpart_AccList(1,6) = "A#R853I"
    IC_Counterpart_AccList(0,7) = "A#R853I"               :       IC_Counterpart_AccList(1,7) = "A#R852I"
    IC_Counterpart_AccList(0,8) = "A#R872I"               :       IC_Counterpart_AccList(1,8) = "A#R873I"
    IC_Counterpart_AccList(0,9) = "A#R873I"               :       IC_Counterpart_AccList(1,9) = "A#R872I"
    IC_Counterpart_AccList(0,10) = "A#L315I"               :       IC_Counterpart_AccList(1,10) = "A#A345I"
    IC_Counterpart_AccList(0,11) = "A#A345I"               :       IC_Counterpart_AccList(1,11) = "A#L315I"
    IC_Counterpart_AccList(0,12) = "A#A375I"               :       IC_Counterpart_AccList(1,12) = "A#L375I"
    IC_Counterpart_AccList(0,13) = "A#L375I"               :       IC_Counterpart_AccList(1,13) = "A#A375I"
    IC_Counterpart_AccList(0,14) = "A#A360I"              :       IC_Counterpart_AccList(1,14) = "A#L360I"
    IC_Counterpart_AccList(0,15) = "A#L360I"                 :       IC_Counterpart_AccList(1,15) = "A#A360I"
    IC_Counterpart_AccList(0,16) = "A#A272I"               :       IC_Counterpart_AccList(1,16) = "A#L335I"
    IC_Counterpart_AccList(0,17) = "A#L335I"               :       IC_Counterpart_AccList(1,17) = "A#A272I"
    IC_Counterpart_AccList(0,18) = "A#A365I"               :       IC_Counterpart_AccList(1,18) = "A#L365I"
    IC_Counterpart_AccList(0,19) = "A#L365I"               :       IC_Counterpart_AccList(1,19) = "A#A365I"
    IC_Counterpart_AccList(0,20) = "A#A455I"               :       IC_Counterpart_AccList(1,20) = "A#L455I"
    IC_Counterpart_AccList(0,21) = "A#L455I"               :       IC_Counterpart_AccList(1,21) = "A#A455I"
    IC_Counterpart_AccList(0,22) = "A#R816I"               :       IC_Counterpart_AccList(1,22) = "A#R816I"
    IC_Counterpart_AccList(0,23) = "A#A305I_A355I"       :       IC_Counterpart_AccList(1,23) = "A#L345I_L355I"
    IC_Counterpart_AccList(0,24) = "A#L345I_L355I"       :       IC_Counterpart_AccList(1,24) = "A#A305I_A355I"

    IC_Counterpart_AccList(0,25) = "A#A376I"       :       IC_Counterpart_AccList(1,25) = "A#L376I"
    IC_Counterpart_AccList(0,26) = "A#L376I"       :       IC_Counterpart_AccList(1,26) = "A#A376I"
    IC_Counterpart_AccList(0,27) = "A#R842I_L165.C2#R842I_L165_ICMATCHINGHELP"       :       IC_Counterpart_AccList(1,27) = "A#R842I_L165.C2#R842I_L165_ICMATCHINGHELP"

    IC_Counterpart_AccList(0,28) = "A#A305I"               :       IC_Counterpart_AccList(1,28) = "A#L345I"
    IC_Counterpart_AccList(0,29) = "A#L345I"               :       IC_Counterpart_AccList(1,29) = "A#A305I"
    IC_Counterpart_AccList(0,30) = "A#A355I"               :       IC_Counterpart_AccList(1,30) = "A#L355I"
    IC_Counterpart_AccList(0,31) = "A#L355I"               :       IC_Counterpart_AccList(1,31) = "A#A355I"

    IC_Counterpart_AccList(0,32) = "A#L165.C2#RET_DPI"  :       IC_Counterpart_AccList(1,32) = "A#L165.C2#RET_DPI"
    IC_Counterpart_AccList(0,33) = "A#R842I"               :       IC_Counterpart_AccList(1,33) = "A#R842I"

    ACQYEAR = GetUD(StrEntity, "Entity", "ACQ")
    DoAcqValidations = False
    If ACQYEAR <> "" Then
        If CInt(ACQYEAR) = CInt(IntYear) Then
            DoAcqValidations = True
        End If
    End If

    If IsArray(ICPList) = True Then
        For i = 0 to Ubound(ICPList)
            ICP_InLoop = ICPList(i)
            ICP_AvgRate = ""    :    ICP_EndRate = ""    :    PrevPOVType2 = ""    :     RateAlreadyOK = False

            For k = 0 to Ubound(IC_Counterpart_AccList,2)
                MyPOV = IC_Counterpart_AccList(0,k)
                ICPPOV = IC_Counterpart_AccList(1,k)
                ValAccUsed = ""
                ACQValAccUsed = ""
                HelpAcc = False
                ValidNeeded = True
                ACQValidNeeded = False

                nStart = Instr(MyPOV,"A#")+2
                nEnd = Instr(MyPOV,".")
                If nEnd = 0 Then nEnd = 80+nStart Else nEnd = nEnd - nStart
                SourceAcc = Mid(MyPOV, nStart, nEnd)
                If SourceAcc = "A305I" or SourceAcc = "L345I" or SourceAcc = "A355I" or SourceAcc = "L355I" or SourceAcc = "L165" or SourceAcc = "R842I" Then HelpAcc = True Else HelpAcc = False

                nStart = Instr(ICPPOV,"A#")+2
                nEnd = Instr(ICPPOV,".")
                If nEnd = 0 Then nEnd = 80+nStart Else nEnd = nEnd - nStart
                ICPAcc = Mid(ICPPOV, nStart, nEnd)

                If HelpAcc = True Then
                    sa3 = 1

                    If SourceAcc = "A305I" Or SourceAcc = "A355I" Then
                        sSrcAcc = "A305I_A355I"
                    ElseIf SourceAcc = "L345I" Or SourceAcc = "L355I" Then
                        sSrcAcc = "L345I_L355I"
                    Else
                        sSrcAcc = "R842I_L165"
                    End If

                    sa1a = HS.GetCell("A#" & sSrcAcc & "_ICV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ValOutcome.C4#CUSTOM4_TOP.I#"&ICP_InLoop)
                    sa1b = HS.GetCell("A#" & sSrcAcc & "_ICV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#StoreValOutcome.C4#CUSTOM4_TOP.I#"&ICP_InLoop)
                    sa2 = HS.GetCell("A#" & sSrcAcc & "_IV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ValOutcome.C4#CUSTOM4_TOP.I#"&ICP_InLoop)
                    sa3 = HS.GetCell("A#" & sSrcAcc & "_2IV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ValOutcome.C4#CUSTOM4_TOP.I#"&ICP_InLoop)

                    If DoAcqValidations = True And SourceAcc <> "R842I" And SourceAcc <> "L165" Then
                        ACQsa1a = HS.GetCell("A#" & sSrcAcc & "_3IV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ValOutcome.C4#CUSTOM4_TOP.I#"&ICP_InLoop)
                        ACQsa1b = HS.GetCell("A#" & sSrcAcc & "_3IV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#StoreValOutcome.C4#CUSTOM4_TOP.I#"&ICP_InLoop)
                    Else
                        ACQsa1a = 0 : ACQsa1b = 0
                    End If

                    If sa1a = 0 and sa1b = 0 and sa2 = 0 and sa3 = 0 Then
                        ValidNeeded = False
                    End If
                    If ACQsa1a <> 0 or ACQsa1b <> 0 Then
                        ACQValidNeeded = True
                    End If
                End If

                If ValidNeeded = True or ACQValidNeeded = True Then

                    If HelpAcc = True Then
                        If Instr(MyPOV,"C2#") > 0 Then
                            MyC2POV = ""
                            sValAcc = mid(MyPOV,3,Instr(MyPOV,".")-3)&"_IV"
                        Else
                            MyC2POV = ".C2#CUSTOM2_TOP"
                            sValAcc = Mid(MyPOV,3,80)&"_IV"
                        End If
                    ElseIf Instr(MyPOV,"C2#") > 0 Then
                        MyC2POV = ""
                        sValAcc = mid(MyPOV,3,Instr(MyPOV,".")-3)&"_ICV"
                    Else
                        MyC2POV = ".C2#CUSTOM2_TOP"
                        sValAcc = Mid(MyPOV,3,80)&"_ICV"
                    End If
                    If Instr(ICPPOV,"C2#") > 0 Then ICPC2POV = "" Else ICPC2POV = ".C2#CUSTOM2_TOP"

                    POVType = HS.GetCellType(ICPPOV)

                    If (POVType = "REVENUE" or POVType = "EXPENSE") and PrevPOVType2 = "FLOW" Then
                        RateAlreadyOK = True
                    ElseIf (POVType = "LIABILITY" or POVType = "ASSET") and PrevPOVType2 = "BALANCE"  Then
                        RateAlreadyOK = True
                    Else
                        RateAlreadyOK = False
                    End If

                    If RateAlreadyOK = False Then
                        If POVType = "REVENUE" or POVType = "EXPENSE" Then
                            Entity_AvgRate = AvgRate
                            ICP_AvgRate = HS.GetRate("V#EUR.A#AVG_RATES.E#"&ICP_InLoop)
                            If Entity_AvgRate <> 0 and ICP_AvgRate <> 0 Then
                                TransRate = ICP_AvgRate / Entity_AvgRate
                                TransRate_EUR = HS.GetRate("V#EUR.A#AVG_RATES")
                                TransRate_USD = HS.GetRate("V#USD.A#AVG_RATES")
                            End If
                            POVType2 = "FLOW"
                        ElseIf POVType = "LIABILITY" or POVType = "ASSET" Then
                            Entity_EndRate = EndRate
                            ICP_EndRate = HS.GetRate("V#EUR.A#END_RATES.E#"&ICP_InLoop)
                            If Entity_EndRate <> 0 and ICP_EndRate <> 0 Then
                                TransRate = ICP_EndRate / Entity_EndRate
                                TransRate_EUR = HS.GetRate("V#EUR.A#END_RATES")
                                TransRate_USD = HS.GetRate("V#USD.A#END_RATES")
                            End If
                            POVType2 = "BALANCE"
                        End If
                    Else

                    End If

                    PrevPOVType2 = POVType2

                    If Instr(MyPOV,"R816I") > 0 or Instr(MyPOV,"R842I_L165") > 0 or Instr(MyPOV,"R842I") > 0 or Instr(MyPOV,"L165") > 0 Then Operator = "1" Else Operator = "-1"

                    ICP_DefCurrency = HS.Entity.DefCurrency(ICP_InLoop)
                    Entity_Booking = Hs.GetCell(MyPOV&".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#[None].I#"&ICP_InLoop&MyC2POV)
                    ICP_Booking = HS.GetCell(ICPPOV&".E#"&ICP_InLoop&".C1#CUSTOM1_TOP.C3#CUSTOM3_TOP.C4#[None].I#"&StrEntity&".V#"&ICP_DefCurrency&ICPC2POV) * TransRate
                    ICDiff = Entity_Booking + (ICP_Booking * Operator)

                    If HelpAcc = False Then
                        sValAcc2 = Replace(sValAcc,"_ICV","_IV")
                        sValAcc3 = Replace(sValAcc,"_ICV","_2IV")
                        sICPValAcc1 = ICPAcc&"_ICV"
                        sICPValAcc2 = ICPAcc&"_IV"
                        sICPValAcc3 = ICPAcc&"_2IV"
                    Else
                        sValAcc2 = sValAcc
                        sValAcc3 = sValAcc
                        sICPValAcc1 = ICPAcc&"_IV"
                        sICPValAcc2 = ICPAcc&"_IV"
                        sICPValAcc3 = ICPAcc&"_IV"
                    End If

                    If ICDiff <> 0 or (ICDiff = 0 and HelpAcc = True and Entity_Booking <> 0 and ICP_Booking <> 0) Then

                        sValOutcome = "ValOutcome"
                        C2ValPlug = GetUD(sValAcc, "Account", "PLUG")

                        If ValidateValAccAndGenTolerance(sValAcc,ICDiff,bIsBase) = True or HelpAcc = True Then
                            sComment = HS.GetCellText("A#"&sValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#"&ICP_InLoop)

                            HS.Exp "A#"&sValAcc&".C1#[None].C2#"&C2ValPlug&".C3#CommentRequired.C4#[None].I#"&ICP_InLoop&" = 1"
                            HS.Exp "A#"&sValAcc&".C1#[None].C2#"&C2ValPlug&".C3#CommentAmount.C4#[None].I#"&ICP_InLoop&" = "&ICDiff

                            If len(sComment) >= 10 Then
                                sValOutcome = "StoreValOutcome"
                            End If
                            Call SetICValidation(sValAcc, c2ValPlug, ICP_InLoop, Entity_Booking, ICP_Booking, sValOutcome, ICDiff, "[None]")

                            ICP_Comment = HS.GetCellText("A#"&sICPValAcc1&".E#"&ICP_InLoop&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#"&StrEntity&".V#"&ICP_DefCurrency)
                            If ICP_Comment <> "" Then
                                HS.SetCellTextWithLabel "A#"&sValAcc&".I#"&ICP_InLoop&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#Counterparty_IC_Booking.C4#[None]", "[Default]",ICP_InLoop&": "&ICP_Comment
                            End If

                            ValAccUsed = sValAcc

                        ElseIf ValidateValAccAndGenTolerance(sValAcc2,ICDiff,bIsBase) = True Then

                            Call SetICValidation(sValAcc2, c2ValPlug, ICP_InLoop, Entity_Booking, ICP_Booking, sValOutcome, ICDiff, "[None]")

                            ICP_Comment = HS.GetCellText("A#"&sICPValAcc2&".E#"&ICP_InLoop&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#"&StrEntity&".V#"&ICP_DefCurrency)
                            If ICP_Comment <> "" Then
                                HS.SetCellTextWithLabel "A#"&sValAcc2&".I#"&ICP_InLoop&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#Counterparty_IC_Booking.C4#[None]", "[Default]",ICP_InLoop&": "&ICP_Comment
                            End If

                            ValAccUsed = sValAcc2

                        ElseIf ValidateValAccAndGenTolerance(sValAcc3,ICDiff,bIsBase) = True Then

                            Call SetICValidation(sValAcc3, c2ValPlug, ICP_InLoop, Entity_Booking, ICP_Booking, sValOutcome, ICDiff, "[None]")
                            ValAccUsed = sValAcc3
                        End If

                        If ValAccUsed <> "" Then

                            Call SetICValidation(ValAccUsed, c2ValPlug, ICP_InLoop, Entity_Booking * TransRate_EUR, ICP_Booking * TransRate_EUR, sValOutcome, ICDiff * TransRate_EUR, "C4_EUR")

                            If HS.Entity.IsBase("AMER_CA",StrEntity) = True Then

                                Call SetICValidation(ValAccUsed, c2ValPlug, ICP_InLoop, Entity_Booking * TransRate_USD, ICP_Booking * TransRate_USD, sValOutcome, ICDiff * TransRate_USD, "C4_USD")
                            End If
                        End If
                    End If

                    DeActivateAcqICValidations = HS.GetCell("S#ACTUAL.E#ADMIN_ENTITY.V#EUR.Y#2039.P#Dec.A#DeactivateAcqICValidations.C1#[None].C2#[None].C3#Inp.C4#[None].I#[ICP None]")
                    If HS.IsZero(DeActivateAcqICValidations) = True Then
                        If DoAcqValidations = True Then

                            ACQ_C2 = ""

                            Checked_ICP_BookingACQ = False
                            Entity_BookingACQ = 0
                            ICP_BookingACQ_ICCurr = 0

                            Set DataUnitJ = HS.OpenDataUnit(MyPOV&".C1#CUSTOM1_TOP.C2{ACQTOT.[Base]}.C3#CUSTOM3_TOP.C4#[None].I#"&ICP_InLoop)
                            NumItemsJ = DataUnitJ.GetNumItems
                                For j = 0 To NumItemsJ - 1
                                    Call DataUnitJ.GetItem(j, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                                    If dData <> 0 Then
                                        ACQ_C2 = StrC2
                                        Entity_BookingACQ = dData
                                        Exit For
                                    End If
                                Next

                            If ACQ_C2 = "" Then
                                Set DataUnitP = HS.OpenDataUnit(ICPPOV&".E#"&ICP_InLoop&".C1#CUSTOM1_TOP.C2{ACQTOT.[Base]}.C3#CUSTOM3_TOP.C4#[None].I#"&StrEntity&".V#"&ICP_DefCurrency)
                                NumItemsP = DataUnitP.GetNumItems
                                    For p = 0 To NumItemsP - 1
                                        Call DataUnitP.GetItem(p, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                                        If dData <> 0 Then
                                            ACQ_C2 = StrC2
                                            ICP_BookingACQ_ICCurr = dData
                                            Checked_ICP_BookingACQ = True
                                            Exit For
                                        End If
                                    Next
                            End If

                            If ACQ_C2 <> "" Then

                                ACQ_Entity_EndRate = HS.GetRate("V#EUR.A#RATE_"&ACQ_C2)
                                ACQ_ICP_EndRate = HS.GetRate("V#EUR.A#RATE_"&ACQ_C2&".E#"&ICP_InLoop)
                                If ACQ_Entity_EndRate <> 0 and ACQ_ICP_EndRate <> 0 Then
                                    ACQ_TransRate = ACQ_ICP_EndRate / ACQ_Entity_EndRate
                                    ACQ_TransRate_EUR = HS.GetRate("V#EUR.A#RATE_"&ACQ_C2)
                                    ACQ_TransRate_USD = HS.GetRate("V#USD.A#RATE_"&ACQ_C2)
                                End If
                                POVType2 = "BALANCE"

                                If Checked_ICP_BookingACQ = True Then
                                    ICP_BookingACQ = ICP_BookingACQ_ICCurr * ACQ_TransRate
                                Else
                                    ICP_BookingACQ = HS.GetCell(ICPPOV&".E#"&ICP_InLoop&".C1#CUSTOM1_TOP.C2#"&ACQ_C2&".C3#CUSTOM3_TOP.C4#[None].I#"&StrEntity&".V#"&ICP_DefCurrency) * ACQ_TransRate
                                End If
                                ACQICDiff = Entity_BookingACQ + (ICP_BookingACQ * Operator)

                                If ACQICDiff <> 0 or (ACQICDiff = 0 and HelpAcc = True and (Entity_BookingACQ <> 0 or ICP_BookingACQ <> 0)) Then

                                    sValOutcome = "ValOutcome"

                                    If HelpAcc = False Then
                                        sACQValAcc = mid(sValAcc,1,InStrRev(sValAcc,"_")-1)&"_3IV"
                                        sACQICPValAcc = mid(sICPValAcc2,1,InStrRev(sICPValAcc2,"_")-1)&"_3IV"

                                    Else
                                        sACQValAcc = mid(sValAcc,1,InStrRev(sValAcc,"_")-1)&"_2IV"
                                        sACQICPValAcc = mid(sICPValAcc2,1,InStrRev(sICPValAcc2,"_")-1)&"_2IV"
                                    End If

                                    If HS.Account.IsBase("ActuaHardAcqlCValidations_Tolearance10",sACQValAcc) or HS.Account.IsBase("IC_Matching_HelpAccounts",sACQValAcc) Then
                                        If ValidateValAccAndGenTolerance(sACQValAcc,ACQICDiff,bIsBase) = True Then

                                            Call SetICValidation(sACQValAcc, ACQ_C2, ICP_InLoop, Entity_BookingACQ, ICP_BookingACQ, sValOutcome, ACQICDiff, "[None]")

                                            ACQValAccUsed = sACQValAcc
                                        End If

                                        If ACQValAccUsed <> "" Then

                                            Call SetICValidation(ACQValAccUsed, ACQ_C2, ICP_InLoop, Entity_BookingACQ * ACQ_TransRate_EUR, ICP_BookingACQ * ACQ_TransRate_EUR, sValOutcome, ACQICDiff * ACQ_TransRate_EUR, "C4_EUR")

                                            If HS.Entity.IsBase("AMER_CA",StrEntity) = True Then

                                                Call SetICValidation(ACQValAccUsed, ACQ_C2, ICP_InLoop, Entity_BookingACQ * ACQ_TransRate_USD, ICP_BookingACQ * ACQ_TransRate_USD, sValOutcome, ACQICDiff * ACQ_TransRate_USD, "C4_USD")
                                            End If
                                        End If
                                    End if
                                End If
                            End If
                        End if
                    End If

                End If
            Next
        Next
    End if

End Sub

Function IsICValidationActive()
    IsICValidationActive = 0

        ACTIVATE_IC_VALIDATION_ReadICFromHFM = HS.GetCell("A#ACTIVATE_IC_VALIDATION_ReadICFromHFM.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")

            GEN_ACTIVATE_IC_VALIDATION_ReadICFromHFM = HS.GetCell("E#ADMIN_ENTITY.V#EUR.Y#2039.P#Dec.A#ACTIVATE_IC_VALIDATION_ReadICFromHFM.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")

            If GEN_ACTIVATE_IC_VALIDATION_ReadICFromHFM = 0 Then

                    GEN_ACTIVATE_IC_VALIDATION_ReadICFromHFM = HS.GetCell("E#ADMIN_ENTITY.V#EUR.A#ACTIVATE_IC_VALIDATION_ReadICFromHFM.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")

            End If

    If ACTIVATE_IC_VALIDATION_ReadICFromHFM = 1 or GEN_ACTIVATE_IC_VALIDATION_ReadICFromHFM = 1 Then
        IsICValidationActive = 2
    End If

End Function

Function GetICValidationsList(StrEntity, bIsBase, StrPeriod, IntYear, strApp, iActive)

    Counter = 0

    If iActive = 2 Then

        AllICPEntities = HS.ICP.List("[ICP Entities]","[Base]")

        Call FindLatestActualPeriodAndYearAndPh1RevLvNo(LastActYear,LastActPerLabel,Phase1RevLvNumber)
        If CInt(IntYear) = CInt(LastActYear) and LastActPerLabel = StrPeriod Then ReportingPeriod = True

        If ReportingPeriod = False Then
            ReDim ICPListAgainstMe(Ubound(AllICPEntities))
            For each sICP in AllICPEntities

                ICPListAgainstMe(Counter) = sICP
                Counter = Counter + 1
            Next
        Else
            For each sICP in AllICPEntities
                EntUD = GetUD(sICP, "Entity", "CloseStartDate")
                If EntUD = "" Then CloseYear = 9999 Else CloseYear = Right(EntUD,4)

                If CInt(CloseYear) >= CInt(LastActYear) Then

                    If Counter = 0 Then
                        ReDim ICPListAgainstMe(Ubound(AllICPEntities))
                    End If
                    ICPListAgainstMe(Counter) = sICP
                    Counter = Counter + 1
                End If
            Next
        End If
    End If

    If Counter > 0 Then
        ReDim Preserve ICPListAgainstMe(Counter-1)
    End If

    Counter = 0
    Set DataUnit = HS.OpenDataUnitSorted("A{IC_Accounts.[Base]}.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP","ICP","Ascending")
    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If dData <> 0 and StrICP <> "[ICP None]" Then
            If PrevICP <> StrICP Then

                If Counter = 0 Then
                    Redim ICPListMyBookings(NumItems-1)
                End If
                ICPListMyBookings(Counter) = StrICP
                Counter = Counter + 1

                PrevICP = StrICP
            End If
        End If
    Next

    If Counter > 0 Then
        ReDim Preserve ICPListMyBookings(Counter-1)
    End If

    Counter = 0
    If IsArray(ICPListAgainstMe) = True And IsArray(ICPListMyBookings) = True Then
        ReDim ICPListMissing(Ubound(ICPListMyBookings))
        For each IC in ICPListMyBookings
            If IsItemInList(IC,ICPListAgainstMe) = False Then

                ICPListMissing(Counter) = IC
                Counter = Counter + 1

            End If

        Next

        If Counter <> 0 Then
            ReDim Preserve ICPListMissing(Counter-1)
            ICPList = CombineLists(ICPListMissing, ICPListAgainstMe)
        Else
            ICPList = ICPListAgainstMe
        End If
    ElseIf IsArray(ICPListAgainstMe) = True Then
        ICPList = ICPListAgainstMe
    ElseIf IsArray(ICPListMyBookings) = True Then
        ICPList = ICPListMyBookings
    End If

    GetICValidationsList = ICPList
End Function

Sub SetICValidation(sValAcc, c2ValPlug, ICP_InLoop, Entity_Booking, ICP_Booking, sValOutcome, ICDiff, sC4Member)

    If HS.IsZero(Entity_Booking) = FALSE Then
        HS.Exp "A#" & sValAcc & ".C1#[None].C2#" & C2ValPlug & ".C3#My_IC_Booking.C4#" & sC4Member & ".I#" & ICP_InLoop & " = " & Entity_Booking
    Else
        HS.Clear "A#" & sValAcc & ".C1#[None].C2#" & C2ValPlug & ".C3#My_IC_Booking.C4#" & sC4Member & ".I#" & ICP_InLoop
    End If
    If HS.IsZero(ICP_Booking) = FALSE Then
        HS.Exp "A#" & sValAcc & ".C1#[None].C2#" & C2ValPlug & ".C3#Counterparty_IC_Booking.C4#" & sC4Member & ".I#" & ICP_InLoop & " = " & ICP_Booking
    Else
        HS.Clear "A#" & sValAcc & ".C1#[None].C2#" & C2ValPlug & ".C3#Counterparty_IC_Booking.C4#" & sC4Member & ".I#" & ICP_InLoop
    End If

    HS.Exp "A#" & sValAcc & ".I#" & ICP_InLoop & ".C1#[None].C2#" & C2ValPlug & ".C3#" & sValOutcome & ".C4#" & sC4Member & " = " & ICDiff
    If sC4Member = "[None]" Then
        Call PopulateValidationLevels(sValAcc , "A#" & sValAcc & ".I#" & ICP_InLoop & ".C1#[None].C2#" & C2ValPlug & ".C4#[None]")

    Else

        HS.Exp "A#" & sValAcc & ".C1#[None].C2#" & C2ValPlug & ".C3#ValByPass.C4#" & sC4Member & ".I#" & ICP_InLoop & " = A#" & sValAcc & ".C1#[None].C2#" & C2ValPlug & ".C3#ValByPass.C4#[None].I#" & ICP_InLoop
    End If
End Sub

Sub ACT_ActualHard_NMAPValidations()

    For each ValAcc In HS.Account.List("ActualHard_NMAPValidations","[Base]")
        If Instr(ValAcc,"_ICP_") > 0 Then ICP_Validation = True Else ICP_Validation = False

        If ICP_Validation = True Then
            PrimaryAcc = Mid(ValAcc,10,InStrRev(ValAcc,"_")-10)
        Else
            PrimaryAcc = Mid(ValAcc,9,InStrRev(ValAcc,"_")-9)
        End If

        If ICP_Validation = True Then
            Set DataUnit = HS.OpenDataUnit("A#"&PrimaryAcc&".C3#CUSTOM3_TOP.C4#[None].I#NMAP_ICP")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If dData <> 0 and StrC2 <> "C2_Inp" Then
                    HS.Exp "A#"&ValAcc&".C1#"&StrC1&".C2#"&StrC2&".C3#ValOutcome = "&dData
                    Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#"&StrC1&".C2#"&StrC2&".C3#ValOutcome")
                End If
            Next
        Else

            If ValAcc = "NOCOUNTRY_RM01E_V" Then
                Set DataUnit = HS.OpenDataUnit("A#RM01E.C2#NO_COUNTRY.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            Else
                Set DataUnit = HS.OpenDataUnit("A#"&PrimaryAcc&".C1#NMAP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            End If

            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If dData <> 0 and StrC2 <> "C2_Inp" Then
                    HS.Exp "A#"&ValAcc&".C1#"&StrC1&".C2#"&StrC2&".C3#ValOutcome.I#[ICP None] = "&dData
                    Call PopulateValidationLevels(ValAcc,"A#"&ValAcc&".C1#"&StrC1&".C2#"&StrC2&".C3#ValOutcome")
                End If
            Next
        End If
    Next
End Sub

Sub ActualSoftSpecialValidations(LegalLevel,IntCurPeriodNum,bIsBase)

    If bIsBase = True and IntCurPeriodNum Mod 3 = 0 Then
        CurrL424 = HS.GetCell("A#L424.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        CurrL250 = HS.GetCell("A#L250.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
        CurrSUM = CurrL424 + CurrL250
        PrevYL424 = HS.GetCell("A#L424.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].Y#Prior.P#Last")
        PrevYL250 = HS.GetCell("A#L250.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top].Y#Prior.P#Last")
        PrevSUM = PrevYL424 + PrevYL250

        If CurrL424 <> 0 or CurrSUM <> 0 or PrevYL424 <> 0 or PrevSUM <> 0 Then
            LargestNumber = 0

            NumberArray = array(CurrL424,CurrSUM,PrevYL424,PrevSUM)
            For each No in NumberArray
                If CDbl(No) > LargestNumber Then
                    LargestNumber = CDbl(No)
                End If
            Next

            HS.Exp "A#Prov_Soft_V.C3#ValOutcome = "&LargestNumber

            Call PopulateValidationLevels("Prov_Soft_V","A#Prov_Soft_V")
        End If
    End If

    If bIsBase = TRUE Then
        iMargin = 10
        iCommentLength = 10
        iICPMembers = 0

        bCommentNeeded = FALSE
        AveRate =  HS.GetRate("V#EUR.A#AVG_RATES")
        EndRate = HS.GetRate("V#EUR.A#END_RATES")

        For Each sHierarchy in Array("RESULT", "BALANCE_SHEET", "RM93","HEADCOUNT","A300")

            If sHierarchy = "BALANCE_SHEET" or sHierarchy = "A300" Then
                iTolerance = iMargin / EndRate
            ElseIf sHierarchy = "RESULT" or sHierarchy = "RM93" Then
                iTolerance = iMargin / AveRate
            Else
                iTolerance = 0
            End If

            If sHierarchy <> "A300" Then
                Set DataUnit = HS.OpenDataUnit("A{" & sHierarchy & ".[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ADJ.C4#[None]")
            Else
                Set DataUnit = HS.OpenDataUnit("A#" & sHierarchy & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ADJ.C4#[None]")
            End If

            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If HS.IsZero(dData) = FALSE And HS.Account.IsCalculated(StrAccount) = FALSE Then
                    AccUD = GetUD(StrAccount, "Account", "")
                    If Instr(AccUD,"/SAP_LOAD/") > 0 or Instr(AccUD,"/SAP_HR_LOAD/") > 0 or StrAccount = "A300" Then

                        If Instr(AccUD,"/NoSAPComment/") > 0 Then
                            bNeedsComment = False
                        Else
                            bNeedsComment = True
                        End If

                        If (dData >= iTolerance Or dData <= -iTolerance) And bNeedsComment = TRUE Then
                            sComment = HS.GetCellText("A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#ADJ.C4#" & StrC4)

                            If StrAccount = "A300" and Len(sComment) < iCommentLength Then
                                sComment = HS.GetCellText("A#A272E.I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#ADJ.C4#" & StrC4)
                                If Len(sComment) > iCommentLength Then
                                    HS.SetCellTextWithLabel "A#A300.I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#ADJ.C4#" & StrC4, "[Default]",sComment
                                End If
                            End If

                            If Len(sComment) < iCommentLength Then
                                bCommentNeeded = TRUE

                                dDivider1 = 1
                                dDivider2 = 1
                                dDivider3 = 1
                                sDestPOV = ""

                                If StrAccount = "A300" Then StrAccount = "A272E"

                                If HS.Account.IsICP(StrAccount) = FALSE Then
                                    sDestPOV = sDestPOV & ".I#[ICP None]"
                                Else
                                    sICPTopMember = HS.Account.ICPTopMember(StrAccount)
                                    If UCase(sICPTopMember) = "[ICP TOP]" Then
                                        sDestPOV = sDestPOV & ".I#[ICP None]"
                                    Else
                                        sDestPOV = sDestPOV & ".I#NMAP_ICP"
                                    End If
                                End If

                                sC1TopMember = HS.Account.C1Top(StrAccount)
                                If sC1TopMember = "" Or sC1TopMember = "[None]" Then
                                    sDestPOV = sDestPOV & ".C1#[None]"
                                ElseIf HS.Custom1.IsDescendant(sC1TopMember, "[None]") = TRUE Then
                                    sDestPOV = sDestPOV & ".C1#[None]"
                                ElseIf sC1TopMember = "NMAP" Or HS.Custom1.IsDescendant(sC1TopMember, "NMAP") = TRUE Then
                                    sDestPOV = sDestPOV & ".C1#NMAP"
                                Else
                                    aC1List = HS.Custom1.List(sC1TopMember, "[Base]")
                                    dDivider2 = Ubound(aC1List)
                                End If

                                sC2TopMember = HS.Account.C2Top(StrAccount)
                                If sC2TopMember = "" Or sC2TopMember = "[None]" Then
                                    sDestPOV = sDestPOV & ".C2#[None]"
                                ElseIf HS.Custom2.IsDescendant(sC2TopMember, "[None]") = TRUE Then
                                    sDestPOV = sDestPOV & ".C2#[None]"
                                ElseIf sC2TopMember = "NO_COUNTRY" Or HS.Custom2.IsDescendant(sC2TopMember, "NO_COUNTRY") = TRUE Then
                                    sDestPOV = sDestPOV & ".C2#NO_COUNTRY"
                                ElseIf sC2TopMember = "IO_SUB_ACQ_DIS" Or HS.Custom2.IsDescendant(sC2TopMember, "NO_IO_SUB") = TRUE Then
                                    sDestPOV = sDestPOV & ".C2#NO_IO_SUB"
                                Else
                                    aC2List = HS.Custom2.List(sC2TopMember, "[Base]")
                                    dDivider3 = Ubound(aC2List)
                                End If

                                HS.Exp "A#" & StrAccount & sDestPOV & ".C3#COMMENT_NEEDED.C4#[None] = " & (1 / (dDivider1 * dDivider2 * dDivider3))
                            End If
                        End If
                    End if
                End If
            Next
        Next

        If bCommentNeeded = TRUE Then
            HS.Exp "A#ADJ_Comment_CV.C1#[None].C2#[None].C3#ValOutcome.C4#[None].I#[ICP None] = 999999999"

            Call PopulateValidationLevels("ADJ_Comment_CV", "A#ADJ_Comment_CV.C1#[None].C2#[None].C4#[None].I#[ICP None]")
        End If
    End If

    If bIsBase = TRUE Then
        iMargin = 3
        iCommentLength = 10
        iICPMembers = 0

        If HS.Year.Member() > 2018 And bIsBase = True Then

            EndRate = HS.GetRate("V#EUR.A#END_RATES")
            iTolerance = iMargin / EndRate

            Dim C2CommentList
            Set C2CommentList = CreateObject("Scripting.Dictionary")

            Set DataUnit = HS.OpenDataUnit("A{BALANCE_SHEET.[Base]}.I#[ICP Top].C1#CUSTOM1_TOP.C3#ACQ_DISP.C4#[None].P#PRIOR")
            NumItems = DataUnit.GetNumItems

            If NumItems > 0 Then

                Set DataUnit = HS.OpenDataUnit("A{BALANCE_SHEET.[Base]}.C3#ACQ_DISP.C4#[None]")
                NumItems = DataUnit.GetNumItems
                For i = 0 To NumItems - 1

                    Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                    If StrAccount <> "A495vsL495" Then
                        dCurrData = Hs.GetCell("A#" & StrAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#" & StrC2 & ".C3#ACQ_DISP.C4#[None]")
                        If CInt(IntCurPeriodNum) <> 1 Then
                            dPrevData = Hs.GetCell("A#" & StrAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#" & StrC2 & ".C3#ACQ_DISP.C4#[None].P#PRIOR")
                        Else
                            dPrevData = 0
                        End If
                        dChange = dCurrData - dPrevData
                        If (dChange >= iTolerance Or dChange <= -iTolerance) Then
                            sComment = HS.GetCellText("A#" & StrAccount & ".I#[ICP Top].C1#CUSTOM1_TOP.C2#" & StrC2 & ".C3#CUSTOM3_TOP.C4#[None]")
                            If Len(sComment) < iCommentLength Then

                                sDestPOV = ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#COMMENT_NEEDED.C4#[None]"

                                If HS.Account.IsICP(StrAccount) = FALSE Then
                                    sDestPOV = sDestPOV & ".I#[ICP None]"
                                Else
                                    sICPTopMember = HS.Account.ICPTopMember(StrAccount)
                                    If UCase(sICPTopMember) = "[ICP TOP]" Then
                                        sDestPOV = sDestPOV & ".I#[ICP None]"
                                    Else
                                        sDestPOV = sDestPOV & ".I#NMAP_ICP"
                                    End If
                                End If

                                HS.Exp "A#" & StrAccount & sDestPOV & " = 1"

                                If C2CommentList.exists(StrC2) = False Then

                                    HS.Exp "A#ACQ_Comment_CV.C1#[None].C2#" & StrC2 & ".C3#ValOutcome.C4#[None].I#[ICP None] = 999999999"
                                    Call PopulateValidationLevels("ACQ_Comment_CV", "A#ACQ_Comment_CV.C1#[None].C2#" & StrC2 & ".C4#[None].I#[ICP None]")
                                    HS.Exp "A#ACQ_Comment_CV.C1#[None].C2#[None].C3#ValOutcome.C4#[None].I#[ICP None] = 999999999"
                                    Call PopulateValidationLevels("ACQ_Comment_CV", "A#ACQ_Comment_CV.C1#[None].C2#[None].C4#[None].I#[ICP None]")
                                    C2CommentList.Add StrC2, ""
                                End If
                                Prev_StrC2 = StrC2

                            End If
                        End If
                    End If

                Next

            End If
        End If
    End If
End Sub

Sub ACT_CheckLegalLevelValidationStatus(bIsBase,LegalLevel,StrEntity,EntUD,StrScenario,StrPeriod)

    CheckPh2 = False    :    Validation_Total_ForThePhase = 0

    StrRevLvForPhase2 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,2)
    Phase2RevLvNumber = ConvertReviewStatus(StrRevLvForPhase2)

    If Phase2RevLvNumber >= 1 and Phase2RevLvNumber < 9 Then CheckPh2 = True

    If CheckPh2 = True Then
        LegalEntForStrEntity = GetLegalEntity(StrEntity, EntUD)

        Validation_Total_ForThePhase = HS.GetCell("E#"&LegalEntForStrEntity&".V#<Entity Currency>.A#Validation_Total_Ph2.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
        If Validation_Total_ForThePhase <> 0 Then
            HS.Exp "A#Ph2_LegalLevel_ValidationCheck_V.C1#[None].C2#[None].C3#ValOutcome.C4#[None] = "&Validation_Total_ForThePhase
            Call PopulateValidationLevels("Ph2_LegalLevel_ValidationCheck_V","A#Ph2_LegalLevel_ValidationCheck_V.C1#[None].C2#[None].C3#ValOutcome.C4#[None]")
        End If

    End If
End Sub

Sub IFRS_LocalGAAPHard_HardCodedValidations(StrEntity,IntYear,IntCurPeriodNum, bIsBase, LegalLevel)

    EntUD = GetUD(StrEntity, "Entity", "")

    If IsActiveGL(EntUD,IntYear,IntCurPeriodNum,HS.Scenario.member()) = True And HS.Entity.IsBase("MCG_ME", StrEntity) = False Then

        For Each sAccount In Array("L_C100", "L_C200", "L_C300", "L_C999")

            dData = Hs.GetCellNoData("A#" & sAccount & ".C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]",bIsNoData)

            If bIsNoData = True Or (dData <> 0 And dData <> 1) Then
                HS.Exp "A#" & sAccount & "_V.C3#ValOutcome = 999999999"
                Call PopulateValidationLevels(sAccount & "_V","A#" & sAccount & "_V")
            End If

            If dData <> 1 Then

                HS.Exp "A#" & sAccount & "_CV.C1#[None].C2#[None].C3#CommentRequired.C4#[None].I#[ICP None] = 1"
                HS.Exp "A#" & sAccount & "_CV.C1#[None].C2#[None].C3#CommentAmount.C4#[None].I#[ICP None] = 999999999"

                sComment = HS.GetCellText("A#" & sAccount & "_CV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP Top]")
                If Len(sComment) < 10 Then
                    HS.Exp "A#" & sAccount & "_CV.C3#ValOutcome = 999999999"
                End If
                Call PopulateValidationLevels(sAccount & "_CV","A#" & sAccount & "_CV")
            End If
        Next

        Set DataUnit = HS.OpenDataUnit("A#N40_L180.C1#CUSTOM1_TOP.C2#GAAP_LC.C3#CUSTOM3_TOP.C4#[None].I#[ICP None]")
        NumItems = DataUnit.GetNumItems
        If NumItems = 0 Then

            Call PopulateValidationAccount("N40_L180_V", "999999999", LegalLevel, bIsBase)
        End if

        Note40Accs = array("N40_L105_CV","N40_L115_CV","N40_L169_CV","N40_L178_CV")
        For each valAcc in Note40Accs
            sourceAcc = replace(valAcc,"_CV","")
            HFM_LC = HS.GetCell("A#" & sourceAcc & ".C1#CUSTOM1_TOP.C2#HFM_LC.C3#CUSTOM3_TOP.C4#[None].I#[ICP None]")
            GAAP_LC = HS.GetCell("A#" & sourceAcc & ".C1#CUSTOM1_TOP.C2#GAAP_LC.C3#CUSTOM3_TOP.C4#[None].I#[ICP None]")
            Diff = HFM_LC - GAAP_LC
            If Diff <> 0 Then
                Call ValidationCommentCheck(valAcc, Diff, LegalLevel, bIsBase)
            End If
        Next

    End If
End Sub

Sub GatherICPValidationCommentsIntoICPTop()

    Redim IC_Comment_List(1,10000)
    Counter = -1

    Set DataUnit = HS.OpenDataUnit("A{ActualHardICCommentValidations.[Base]}.C3#CommentRequired")
    NumItems = DataUnit.GetNumItems

    For q = 0 To NumItems - 1
        Call DataUnit.GetItem(q, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

        If dData <> 0 Then
            IC_Val_Comment = HS.GetCellText("A#"&StrAccount&".I#"&StrICP&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None]")

            If StrAccount <> PrevStrAccount Then
                Counter = Counter + 1

                IC_Comment_List(0,Counter) = StrAccount
                IC_Comment_List(1,Counter) = StrICP&": "&IC_Val_Comment

                PrevStrAccount = StrAccount
            Else

                PrevComment = IC_Comment_List(1,Counter)
                IC_Comment_List(0,Counter) = StrAccount
                IC_Comment_List(1,Counter) = PrevComment&";"&StrICP&": "&IC_Val_Comment

                PrevStrAccount = StrAccount
            End If
        End If
    Next

    Redim Preserve IC_Comment_List(1,Counter)

    For i = 0 to Ubound(IC_Comment_List,2)
        StrAccount = IC_Comment_List(0,i)
        StrComments = Split(IC_Comment_List(1,i),";")

        Counter2 = 0
        nbr = 1
        For each Comment in StrComments
            If Counter2 = 0 Then
                CellText = nbr&"# "&Comment&" "
                Counter2 = Counter2 + 1
                nbr = nbr + 1
            Else
                CellText = CellText&vbCr&nbr&"# "&Comment&" "
                Counter2 = Counter2 + 1
                nbr = nbr + 1
            End If
        Next
        HS.SetCellTextWithLabel "A#"&StrAccount&".I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None]", "[Default]",CellText
    Next
End Sub

Sub GEN_ValidatioByPassCheck(StrEntity,StrScenario,StrPeriod,bIsBase,LegalLevel)

    Activate_GEN_ValidatioByPassCheck = HS.GetCell("E#ADMIN_ENTITY.V#EUR.A#Activate_GEN_ValidatioByPassCheck.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

    If Activate_GEN_ValidatioByPassCheck <> 0 Then

        Redim CheckList(3,7)

        CheckList(0,0) = "C3#GeneralByPass"        :    CheckList(1,0) = "A#ValGeneralOverride.C3#ValByPass"            : CheckList(2,0) = ".E#[None]"        :    CheckList(3,0) = "All validations are overrided, since flag account ValGeneralOverride is active"
        CheckList(0,1) = "C3#GeneralAccByPass"    :    CheckList(1,1) = "A{ValidationAccounts.[Base]}.C3#ValByPass"    : CheckList(2,1) = ".E#[None]"         :    CheckList(3,1) = "Validation account has been ByPassed by general account specific ByPass. Accounts overrided (first 15): "
        CheckList(0,2) = "C3#EntityByPass"        :    CheckList(1,2) = "A#ValEntityOverride.C3#ValByPass"                : CheckList(2,2) = ""                :    CheckList(3,2) = "All validations are overrided for the current entity, since account ValEntityOverride is active"
        CheckList(0,3) = "C3#ValAccByPass"        :    CheckList(1,3) = "A{ValidationAccounts.[Base]}.C3#ValByPass"    : CheckList(2,3) = ""                :    CheckList(3,3) = "Validation has been overrided by using C3#ValByPass. Accounts overrided (first 15): "
        CheckList(0,4) = "C3#PC_AccByPassPh1"    :    CheckList(1,4) = "A#ClearVal_Ph1"                                : CheckList(2,4) = ""                :    CheckList(3,4) = "All Phase1 validations are overrided, since account ClearVal_Ph1 has counterbooking for ValErrCounter_Ph1"
        CheckList(0,5) = "C3#PC_AccByPassPh2"    :    CheckList(1,5) = "A#ClearVal_Ph2"                                : CheckList(2,5) = ""                :    CheckList(3,5) = "All Phase2 validations are overrided, since account ClearVal_Ph2 has counterbooking for ValErrCounter_Ph2"
        CheckList(0,6) = "C3#PC_AccByPassPh3"    :    CheckList(1,6) = "A#ClearVal_Ph3"                                : CheckList(2,6) = ""                :    CheckList(3,6) = "All Phase3 validations are overrided, since account ClearVal_Ph3 has counterbooking for ValErrCounter_Ph3"
        CheckList(0,7) = "C3#NonValidatedPhase"    :    CheckList(1,7) = ""                                                : CheckList(2,7) = ""                :    CheckList(3,7) = "All validations has been skipped, since entity is not in Review level specified to be validate (Only levels from 1-9 are validated)"

        For i=0 to Ubound(CheckList,2)
            Strtarget = CheckList(0,i)
            StrSource = CheckList(1,i)
            EntityToCheck = CheckList(2,i)
            StrCellText = CheckList(3,i)

            OldCellText = ""
            Check = True
            PreCounter = ""

                HS.Clear Strtarget
                HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",""

                If i=7 Then
                    StrRevLvForPhase1 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,1)
                    Phase1RevLvNumber = ConvertReviewStatus(StrRevLvForPhase1)

                    HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",""

                    If Phase1RevLvNumber < 1 or Phase1RevLvNumber > 9 Then
                        StrRevLvForPhase2 = HS.ReviewStatusUsingPhaseID("S#"&StrScenario&".P#"&StrPeriod&".E#"&StrEntity,2)
                        Phase2RevLvNumber = ConvertReviewStatus(StrRevLvForPhase2)
                        If Phase2RevLvNumber < 1 or Phase2RevLvNumber > 9 Then

                            HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",StrCellText
                            HS.Exp "A#ValByPassCheck."&Strtarget&" = 1"
                        End If
                    End If
                Else

                    Set DataUnit = HS.OpenDataUnit(StrSource&EntityToCheck)
                    NumItems = DataUnit.GetNumItems
                        If NumItems <> 0 Then
                            AccsStr = ""
                            Counter = 0
                            ByPassCount = 0
                            OldCellText = ""
                            IsRealCount = 0
                            PreCounter = ""

                            For x = 0 To NumItems - 1
                                Call DataUnit.GetItem(x, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                                If dData <> 0 Then

                                    If StrSource = "A#ClearVal_Ph1" or StrSource = "A#ClearVal_Ph1" or StrSource = "A#ClearVal_Ph1" Then

                                        ValErrCounterAcc = "A#ValErrCounter_Ph"&right(StrSource,1)
                                        ValErrCounterValue = HS.GetCell(ValErrCounterAcc&".C1#[None].C2#[None].C3#INP.C4#[None]")

                                        ClearValCounterValue = HS.GetCell(StrSource&".C1#[None].C2#[None].C3#INP.C4#[None]")
                                        Total = ValErrCounterValue + ClearValCounterValue

                                        If Total = 0 Then
                                            HS.Exp "A#ValByPassCheck."&Strtarget&" = "&NumItems
                                            HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",StrCellText

                                            PreCounter = HS.GetCell("A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None].C3#ByPassCounter.C4#[None]")
                                            HS.Exp "A#ValByPassCheck.C3#ByPassCounter = "&PreCounter&" + 1"

                                        Else
                                            OldCellText = HS.GetCellText("A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]")

                                            If OldCellText <> "" Then

                                                HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",""
                                            End If
                                        End If

                                    ElseIf StrSource = "A#ValGeneralOverride.C3#ValByPass" or StrSource = "A#ValEntityOverride.C3#ValByPass" Then
                                        HS.Exp "A#ValByPassCheck."&Strtarget&" = "&NumItems
                                        HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",StrCellText

                                        PreCounter = HS.GetCell("A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None].C3#ByPassCounter.C4#[None]")
                                        HS.Exp "A#ValByPassCheck.C3#ByPassCounter = "&PreCounter&" + 1"

                                    Else

                                        AccValidationLevel = GetUD(ValAcc, "Account", "ValidAt")

                                        ValidLevel = False
                                        If AccValidationLevel = "" Then
                                            If bIsBase = True Then
                                                ValidLevel = True
                                            End If
                                        ElseIf    AccValidationLevel = "Legal" Then
                                            If LegalLevel = True Then
                                                ValidLevel = True
                                            End If
                                        ElseIf    AccValidationLevel = "All" Then
                                            ValidLevel = True
                                        End If

                                        If ValidLevel = True Then
                                            Counter = Counter + 1

                                            HS.Exp "A#ValByPassCheck."&Strtarget&" = "&Counter

                                                If Counter<16 Then
                                                    If Counter = 1 Then
                                                        AccsStr = StrCellText&StrAccount
                                                    Else
                                                        AccsStr = AccsStr &", "&StrAccount
                                                    End If
                                                End If

                                            HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",AccsStr

                                            PreCounter = HS.GetCell("A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None].C3#ByPassCounter.C4#[None]")
                                            HS.Exp "A#ValByPassCheck.C3#ByPassCounter = "&PreCounter&" + 1"
                                        End If
                                    End If

                                    IsRealCount = IsRealCount + 1
                                End If
                            Next

                            If IsRealCount = 0 Then
                                OldCellText = HS.GetCellText("A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]")
                                If OldCellText <> "" Then

                                    HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",""
                                End If
                            End If

                        Else
                            OldCellText = HS.GetCellText("A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]")
                            If OldCellText <> "" Then

                                HS.SetCellTextWithLabel "A#ValByPassCheck.I#[ICP None].C1#[None].C2#[None]."&Strtarget&".C4#[None]", "[Default]",""
                            End If
                        End If
                End If
        Next
    End If
End Sub

Sub RollValTolerancesForward(IntYear,StrScenario)
    ToleranceAccList = array("ValToleranceForBaseEnt","ValToleranceForParentEnt")

    If StrScenario = "ACTUAL" or StrScenario = "FORECAST" or StrScenario = "BUDGET" Then
        If IntYear > FirstYearWithData Then
            If Hs.Period.IsFirst = True Then
                For each ValAcc in ToleranceAccList
                    DataCheck = Hs.GetCellRealData("A#"&ValAcc&".C1#[None].C2#[none].C3#INP.C4#[None].I#[ICP None]", bIsRealData)
                    If bIsRealData = False Then
                        Hs.Exp "A#"&ValAcc&" = A#"&ValAcc&".Y#PRIOR.P#LAST"
                    End If
                Next
            End If
        End If
    End If
End Sub

Sub ClearGeneralOverride()

    GenOverrideData = HS.GetCell("A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]")
    If GenOverrideData <> 0 Then

        StrCellText = HS.GetCellText("A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]")

        If StrCellText = "" Then
            CurrTime = Cdate(TimeStamp)
            HS.SetCellTextWithLabel "A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]", "[Default]",CurrTime&" --> "&vbCr& _
                                    "Calculated with A#ValGeneralOverride ON, flag is cleared automatically after 40m via rules, if not cleared manually. "&vbCr& _
                                    "*** DO NOT UPDATE THIS AUTOMATICALLY CREATED CELL TEXT ***"
        Else
            bEnd = Instr(StrCellText," -->")-1

            If bEnd > 0 Then CellTextDate = mid(StrCellText,1,bEnd)

            If IsDate(CellTextDate) = True Then
                fromDate = Cdate(mid(StrCellText,1,Instr(StrCellText," -->")-1))
                toDate = Cdate(TimeStamp)

                TimeDiff = DateDiff("n",fromDate,toDate)
                If TimeDiff >= 40 Then
                    HS.SetCellTextWithLabel "A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]", "[Default]",""
                    HS.Clear "A#ValGeneralOverride"
                End If
            Else
                HS.SetCellTextWithLabel "A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]", "[Default]",""
                HS.Clear "A#ValGeneralOverride"
            End If
        End If
    Else
        StrCellText = HS.GetCellText("A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]")

        If StrCellText <> "" Then
            HS.SetCellTextWithLabel "A#ValGeneralOverride.I#[ICP None].C1#[None].C2#[None].C3#ValByPass.C4#[None]", "[Default]",""
        End If
    End If
End Sub

Sub StoreValidationErrorCountersComingFromChildren()

    HS.Exp "A#ValErrCounter_Ph2.C1#[None].C2#[None].C3#INP.C4#[None] = - A#Ph2_LegalLevel_ValidationCheck_V.C1#[None].C2#[None].C3#HardValCounter_Ph2.C4#[None].V#<Parent Currency>"
    HS.Exp "A#Ph2_LegalLevel_ValidationCheck_V = - A#Ph2_LegalLevel_ValidationCheck_V.V#<Parent Currency>"

    For each ValErrCounterAcc in hs.Account.List("ProcessControlValidationAccounts","[Base]")
        If Instr(ValErrCounterAcc,"ValErrCounter") > 0 Then
            HS.Clear "A#Store_"&ValErrCounterAcc
            If ValErrCounterAcc = "ValErrCounter_Ph2" Then
                Hs.Exp "A#Store_"&ValErrCounterAcc&" = A#"&ValErrCounterAcc&".V#<Parent Curr Total> - A#Ph2_LegalLevel_ValidationCheck_V.C1#[None].C2#[None].C3#HardValCounter_Ph2.C4#[None].V#<Parent Currency>"
            Else
                Hs.Exp "A#Store_"&ValErrCounterAcc&" = A#"&ValErrCounterAcc&".V#<Parent Curr Total>"
            End If
        End If
    Next
End Sub

Sub DataCheckValidation(sAccount, LegalLevel, bIsBase)
    dData = HS.GetCell("A#" & sAccount & ".I#[ICP top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]")
    If dData <> 0 Then
        bValidate = TRUE
        sValidAccount = sAccount & "_V"

        If bValidate = TRUE Then

            Call PopulateValidationAccount(sValidAccount, dData, LegalLevel, bIsBase)
        End If
    End If
End Sub

Sub ValidationCommentCheck(CommentValAcc, dData, LegalLevel, bIsBase)
    If ValidateValAccAndGenTolerance(CommentValAcc,dData,bIsBase) = True Then
        Call CheckValidationComment(CommentValAcc, dData, LegalLevel, bIsBase, dData)
    End If
End Sub

Sub CheckValidationComment(CommentValAcc, dData, LegalLevel, bIsBase, dValue)
    iCommentLength = 10
    ValOutcomeTarget = CheckC3TargetForValidation(CommentValAcc,LegalLevel,bIsBase)

    If Instr(GetUD(CommentValAcc, "Account", ""),"/CommentAtBase/") > 0 Then CommentAtBase = True Else CommentAtBase = False
    If LegalLevel = True and bIsBase = False Then
        If CommentAtBase = True Then
            LegalEnt = HS.Entity.Member()
            For each BaseEnt in Hs.Entity.List(LegalEnt,"[Base]")
                If Instr(GetUD(BaseEnt, "Entity", ""),"/CloseStartDate:") = 0 Then

                    CommentRequiredData = HS.GetCell("A#"&CommentValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CommentRequired.C4#[None].I#[ICP TOP].E#"&BaseEnt&".V#<Entity Currency>")
                    If CommentRequiredData <> 0 Then
                        sComment = HS.GetCellText("A#"&CommentValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP TOP].E#"&BaseEnt&".V#<Entity Currency>")
                        If len(sComment) < 10 Then Exit For
                    End If
                End If
            Next
        Else
            sComment = HS.GetCellText("A#"&CommentValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP TOP]")
        End If
    Else
        sComment = HS.GetCellText("A#"&CommentValAcc&".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP TOP]")
    End If

    If ValOutcomeTarget = "ValOutcome" or CommentAtBase = True Then
        If len(sComment) > 0 Then
            If HS.Account.IsDescendant("ActualHardEnterAsPositiveCommentValidations", CommentValAcc) = TRUE Then
                HS.SetCellTextWithLabel "A#"&CommentValAcc&".C1#[None].C2#[None].C3#CommentRequired.C4#[None].I#[ICP None]", "[Default]",sComment
            End If
        End If

        StrPOV_CommentRequired = "A#"&CommentValAcc&".C1#[None].C2#[None].C3#CommentRequired.C4#[None].I#[ICP None]"
           Call HS.SetDataWithPOV(StrPOV_CommentRequired, 1, False)

        If dData <> 0 Then

            StrPOV_CommentAmount = "A#"&CommentValAcc&".C1#[None].C2#[None].C3#CommentAmount.C4#[None].I#[ICP None]"
               Call HS.SetDataWithPOV(StrPOV_CommentAmount, dData, False)
        End If
    End If

    If (len(sComment) < iCommentLength and ValOutcomeTarget = "ValOutcome") or ValOutcomeTarget <> "ValOutcome" Then

        StrPOV = "A#"&CommentValAcc&".C1#[None].C2#[None].C3#"&ValOutcomeTarget&".C4#[None].I#[ICP None]"
        Call HS.SetDataWithPOV(StrPOV, dValue, True)
    End If

    Call PopulateValidationLevels(CommentValAcc,"A#"&CommentValAcc&".C1#[None].C2#[None].C4#[None].I#[ICP None]")
End Sub

Sub ValidationCommentCheckC1(ValAcc, dData, bIsBase, sCustom1)
    If ValidateValAccAndGenTolerance(ValAcc, dData, bIsBase) = True Then
        sComment = HS.GetCellText("A#" & ValAcc & ".C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#VALIDATIONS.C4#[None].I#[ICP Top]")

        HS.Exp "A#" & ValAcc & ".C1#" & sCustom1 & ".C2#[None].C3#CommentRequired.C4#[None].I#[ICP None] = 1"
        HS.Exp "A#" & ValAcc & ".C1#" & sCustom1 & ".C2#[None].C3#CommentAmount.C4#[None].I#[ICP None] = " & dData

        If len(sComment) < 10 And HS.IsZero(dData) = FALSE Then
            HS.Exp "A#" & ValAcc & ".C1#" & sCustom1 & ".C2#[None].C3#ValOutcome.I#[ICP None] = " & dData
        End If
        Call PopulateValidationLevels(ValAcc,"A#" & ValAcc & ".C1#" & sCustom1 & ".C2#[None].I#[ICP None]")
    End If
End Sub

Function ValidateValAcc(ValAcc,Amount)
    ToleranceEUR_ForValAcc = GetUD(ValAcc, "Account", "AccValTolerance")

    AccType = HS.Account.AccountType(ValAcc)
    If Ucase(AccType) = "ASSET" or Ucase(AccType) = "LIABILITY" Then
        ToleranceTransRate = HS.GetRate("V#EUR.A#END_RATES")
    Else
        ToleranceTransRate = HS.GetRate("V#EUR.A#AVG_RATES")
    End If

    Validate = True
    If ToleranceEUR_ForValAcc <> "" Then
        If left(ToleranceEUR_ForValAcc,1) = "<" Then
            ToleranceLOCAL_ForValAcc = mid(ToleranceEUR_ForValAcc,2,len(ToleranceEUR_ForValAcc)-1) / ToleranceTransRate
            If Amount >= ToleranceLOCAL_ForValAcc Then
                Validate = False
            End If
        ElseIf left(ToleranceEUR_ForValAcc,1) = ">" Then
            ToleranceLOCAL_ForValAcc = mid(ToleranceEUR_ForValAcc,2,len(ToleranceEUR_ForValAcc)-1) / ToleranceTransRate
            If Amount <= ToleranceLOCAL_ForValAcc Then
                Validate = False
            End If
        ElseIf left(ToleranceEUR_ForValAcc,4) = "abs<" Then
            ToleranceLOCAL_ForValAcc = mid(ToleranceEUR_ForValAcc,5,len(ToleranceEUR_ForValAcc)-4) / ToleranceTransRate
            If Abs(Amount) >= ToleranceLOCAL_ForValAcc Then
                Validate = False
            End If
        Else
            ToleranceLOCAL_ForValAcc = ToleranceEUR_ForValAcc / ToleranceTransRate
            If Abs(Amount) <= ToleranceLOCAL_ForValAcc Then
                Validate = False
            End If
        End If
    End If

    ValidateValAcc = Validate
End Function

Function ValidateValAccAndGenTolerance(ValAcc,Amount,bIsBase)

    NoTolerance = False

    ToleranceEUR_ForValAcc = GetUD(ValAcc, "Account", "AccValTolerance")

    If ToleranceEUR_ForValAcc = "" Then
        FullUD = GetUD(ValAcc, "Account", "")
        If Instr(FullUD,"/NoGenTolerance/") > 0 Then
            NoTolerance = True
            ToleranceEUR_ForValAcc = 0
        End If
    End If

    If ToleranceEUR_ForValAcc = "" and NoTolerance = False Then
        If bIsBase = true Then
            ValToleranceAccount = "ValToleranceForBaseEnt"
        Else
            ValToleranceAccount = "ValToleranceForParentEnt"
        End If
        ToleranceEUR_ForValAcc = HS.GetCell("A#"&ValToleranceAccount&".E#[None].V#EUR.C4#[None]")
    End If

    AccType = HS.Account.AccountType(ValAcc)
    If Ucase(AccType) = "ASSET" or Ucase(AccType) = "LIABILITY" Then
        ToleranceTransRate = HS.GetRate("V#EUR.A#END_RATES")
    Else
        ToleranceTransRate = HS.GetRate("V#EUR.A#AVG_RATES")
    End If

    i = abs(Amount)
    Validate = True
    If ToleranceEUR_ForValAcc <> "" Then
        If left(ToleranceEUR_ForValAcc,1) = "<" Then
            ToleranceLOCAL_ForValAcc = mid(ToleranceEUR_ForValAcc,2,len(ToleranceEUR_ForValAcc)-1) / ToleranceTransRate
            If cDbl(FormatNumber(Amount,3,-1,0)) >= cDbl(FormatNumber(ToleranceLOCAL_ForValAcc,3,-1,0)) Then
                Validate = False
            End If
        ElseIf left(ToleranceEUR_ForValAcc,1) = ">" Then
            ToleranceLOCAL_ForValAcc = mid(ToleranceEUR_ForValAcc,2,len(ToleranceEUR_ForValAcc)-1) / ToleranceTransRate
            If cDbl(FormatNumber(Amount,3,-1,0)) <= cDbl(FormatNumber(ToleranceLOCAL_ForValAcc,3,-1,0)) Then
                Validate = False
            End If
        ElseIf left(ToleranceEUR_ForValAcc,4) = "abs<" Then
            ToleranceLOCAL_ForValAcc = mid(ToleranceEUR_ForValAcc,5,len(ToleranceEUR_ForValAcc)-4) / ToleranceTransRate
            If cDbl(FormatNumber(i,3,-1,0)) >= cDbl(FormatNumber(ToleranceLOCAL_ForValAcc,3,-1,0)) Then
                Validate = False
            End If
        Else
            ToleranceLOCAL_ForValAcc = ToleranceEUR_ForValAcc / ToleranceTransRate
            If cDbl(FormatNumber(i,3,-1,0)) <= cDbl(FormatNumber(ToleranceLOCAL_ForValAcc,3,-1,0)) Then
                Validate = False
            End If
        End If
    End If

    ValidateValAccAndGenTolerance = Validate
End Function

Sub PopulateValidationAccount(ValAcc, dData, LegalLevel, bIsBase)
    ValOutcomeTarget = CheckC3TargetForValidation(ValAcc,LegalLevel,bIsBase)
    StrPOV = "A#" & ValAcc & ".C1#[None].C2#[None].C3#" & ValOutcomeTarget & ".C4#[None].I#[ICP None]"
    If HS.IsZero(dData) = FALSE Then
        Call HS.SetDataWithPOV(StrPOV, dData, False)
    End If
    Call PopulateValidationLevels(ValAcc,"A#" & ValAcc & ".C1#[None].C2#[None].C4#[None].I#[ICP None]")
End Sub

Sub PopulateValidationAccountWithC1(ValAcc, dData, sCustom1)
    StrPOV = "A#" & ValAcc & ".C1#" & sCustom1 & ".C2#[None].C3#ValOutcome.C4#[None].I#[ICP None]"
    If HS.IsZero(dData) = FALSE Then
        Call HS.SetDataWithPOV(StrPOV, dData, False)
    End If
    Call PopulateValidationLevels(ValAcc,"A#" & ValAcc & ".C1#" & sCustom1 & ".C2#[None].C4#[None].I#[ICP None]")
End Sub

Sub PopulateValidationLevels(ValAcc,StrPOV)

    HS.Exp StrPOV &".C3#CurrLevelVal = 1"

    ValidLV = GetUD(ValAcc, "Account", "ValidAt")

    If ValidLV = "" Then
        HS.Exp StrPOV &".C3#Base = 1"
    ElseIf ValidLV = "Legal" Then
        HS.Exp StrPOV &".C3#Legal = 1"
    ElseIf ValidLV = "All" Then
        HS.Exp StrPOV &".C3#All = 1"
    Else

    End If
End Sub

Function CheckC3TargetForValidation(sValAcc,LegalLevel,bIsBase)

    If LegalLevel = True Then
        sValOutcomeTarget = "ValOutcome"
    ElseIf bIsBase = True Then
        AccUD = GetUD(sValAcc, "Account", "SoftBaseVal")

        If AccUD = "WithBlock" Then
            sValOutcomeTarget = "2ndValOutcome"
        ElseIf AccUD = "WithOutBlock" Then
            sValOutcomeTarget = "2ndValOutcome2"
        Else
            sValOutcomeTarget = "ValOutcome"
        End If
    End If

    CheckC3TargetForValidation = sValOutcomeTarget
End Function

Function ValidationNeeded(sValAcc,bIsBase,LegalLevel)

    ValLv = GetUD(sValAcc, "Account", "ValidAt")

    NeedsToBeValidated = False
    If ValLv = "" And bIsBase = True Then
        NeedsToBeValidated = True
    ElseIf ValLV = "All" Then
        NeedsToBeValidated = True
    ElseIf ValLv = "Legal" And LegalLevel = True Then
        NeedsToBeValidated = True
    ElseIf ValLv = "Legal" And bIsBase = True Then
        SoftBaseVal = GetUD(sValAcc, "Account", "SoftBaseVal")
        If SoftBaseVal <> "" Then
            NeedsToBeValidated = True
        End If
    End If

    ValidationNeeded = NeedsToBeValidated
End function

Function Cumulative(StrPOV, StrVIEW, nPERIOD)

    If nPERIOD <= 0 Then
        nPERIOD = HS.Period.Number() - 1
    Else
        nPERIOD = nPERIOD - 1
    End If

    If StrVIEW = "" Then
        StrVIEW = HS.Scenario.DEFAULTVIEW("")
    End If

    StrPOV = UCase(StrPOV)
    StrVIEW = UCase(StrVIEW)

    If StrVIEW = "PERIODIC" Then
        StrVIEW = ".W#PERIODIC"
    ElseIf StrVIEW = "YTD" Then
        StrVIEW = ".W#YTD"
    Else
        Exit Function
    End If
    For i = 0 To nPERIOD
        If i = 0 Then
            strCUM = StrPOV & StrVIEW
        Else
            strCUM = strCUM & "+" & StrPOV & StrVIEW & ".P#CUR-" & i
        End If
    Next
    Cumulative = "(" & strCUM & ")"
End Function

Sub EntIsBaseCheckForReporting(bIsBase,IntYear)

    If bIsBase = True and CInt(IntYear) > 2015 Then
        HS.Exp "A#IsBaseEntCheck = 1"
    End If
End Sub

Function GetLegalEntity(StrEntity, EntUD)

        If Instr(EntUD,"/LE/") > 0 Then
            GetLegalEntity = StrEntity
        Else
            For each Ancestor in HS.Entity.List(StrEntity,"[Ancestors]")
                If HS.Entity.IsDescendant("MCG_COUNTRIES",Ancestor) Then
                    AncestorUD = GetUD(Ancestor, "Entity", "")
                    If Instr(AncestorUD,"/LE/") > 0 Then
                        GetLegalEntity = Ancestor
                        Exit For
                    End If
                End If
            Next
        End If

End Function

Function SumLegalBasesToGLEnt(Formula,StrEntity,LegalEntForStrEntity)

    If LegalEntForStrEntity = StrEntity or LegalEntForStrEntity = "" Then
        LegalEntBasesList = array(StrEntity)
    Else
        LegalEntBasesList = Hs.Entity.List(LegalEntForStrEntity,"[Base]")
    End If

    dData = 0

    MyDeffCurr = HS.Entity.DefCurrency(StrEntity)

    POVType = HS.GetCellType(Formula)

    If POVType = "REVENUE" or POVType = "EXPENSE" Then
        RateAcc = "AVG_RATES"
    ElseIf POVType = "LIABILITY" or POVType = "ASSET" Then
        RateAcc = "END_RATES"
    Else
        RateAcc = "NO_TRANSLATION"
    End If
    MyRate = HS.GetRate("V#EUR.A#"&RateAcc)

    If Instr(LegalEntForStrEntity,"_TAX") > 0 Then CheckIfActiveInTaxGroup = true else CheckIfActiveInTaxGroup = False

    For Each Ent in LegalEntBasesList
        Active = True
        If CheckIfActiveInTaxGroup = True Then

            If UCase(HS.Scenario.member()) = "NORSU_ACTUAL" Then
                EntInTaxGroupStart = GetUD(Ent, "Entity", "NORSU_sInTaxGroupStart")
                EntInTaxGroupEnd = GetUD(Ent, "Entity", "NORSU_sInTaxGroupEnd")
            Else
            EntInTaxGroupStart = GetUD(Ent, "Entity", "sInTaxGroupStart")
            EntInTaxGroupEnd = GetUD(Ent, "Entity", "sInTaxGroupEnd")
            End If
            If EntInTaxGroupStart <> "" or EntInTaxGroupEnd <> "" Then IntYear = CInt(HS.Year.member()) : IntCurPeriodNum = CInt(HS.Period.Number())
            If EntInTaxGroupStart <> "" Then
                EntInTaxGroupStartPeriod = left(EntInTaxGroupStart,3)
                EntInTaxGroupStartPeriodNo = CInt(GetPeriodNumber(EntInTaxGroupStartPeriod))
                EntInTaxGroupStartYear = CInt(Right(EntInTaxGroupStart,4))
                If CInt(IntYear) < EntInTaxGroupStartYear or (CInt(IntYear) = EntInTaxGroupStartYear and IntCurPeriodNum < EntInTaxGroupStartPeriodNo) Then Active = False
            End If
            If EntInTaxGroupEnd <> "" Then
                EntInTaxGroupEndPeriod = left(EntInTaxGroupEnd,3)
                EntInTaxGroupEndPeriodNo = CInt(GetPeriodNumber(EntInTaxGroupEndPeriod))
                EntInTaxGroupEndYear = CInt(Right(EntInTaxGroupEnd,4))
                If CInt(IntYear) > EntInTaxGroupEndYear or (CInt(IntYear) = EntInTaxGroupEndYear and IntCurPeriodNum >= EntInTaxGroupEndPeriodNo) Then Active = False
            End If
        End If

        If Active = True Then
            EntDefCurr = HS.Entity.DefCurrency(Ent)

            If MyDeffCurr <> EntDefCurr Then
                If RateAcc = "NO_TRANSLATION" Then
                    TransRate = 1
                ElseIf MyRate <> 0 Then
                    EntRate = HS.GetRate("V#EUR.A#"&RateAcc&".E#"&Ent)
                    TransRate = EntRate / MyRate
                End If
            Else
                TransRate = 1
            End If

            dData = (HS.GetCell(Formula&".E#"&Ent&".V#"&EntDefCurr) * TransRate ) + dData

        End If
    Next

    SumLegalBasesToGLEnt = dData
End Function

Function RollingNMonthsAverage(sSrcPOV, sRolPrevScenCurP, NMonths, sScenario)
    sSrcString = RollingNMonthsString(sSrcPOV, sRolPrevScenCurP, NMonths, sScenario)

    If Len(sSrcString) > 0 Then
        RollingNMonthsAverage = "(" & sSrcString & ") / " & NMonths
    Else
        RollingNMonthsAverage = "A#VALIDATION"
    End If
End Function

Sub RollingAverageNMonths(sDestPOV, sSrcPOV, sRolPrevScenCurP, NMonths, sScenario)
    sSrcString = RollingNMonthsString(sSrcPOV, sRolPrevScenCurP, NMonths, sScenario)

    If Len(sSrcString) > 0 Then
        HS.Exp sDestPOV & " = (" & sSrcString & ") / " & NMonths
    End If
End Sub

Function RollingNMonthsString(sSrcPOV, sRolPrevScenCurP, NMonths, sScenario)
    ValidPeriod = CheckValidDataPeriodForRollingCalcs(NMonths)
    sSrcString = ""
    bArvo = FALSE

    If ValidPeriod = True Then
        If Instr(sScenario, "STRATEGY") > 0 Then
            iStrategyYear = Right(sScenario, 4)
            If CInt(iStrategyYear) < 2030 Then
                aSrcArray = Array(sSrcPOV, sSrcPOV & ".Y#PRIOR.P#LAST")
                NMonths = 2
            Else
                aSrcArray = Array(sSrcPOV, sSrcPOV & ".P#Cur-3", sSrcPOV & ".P#Cur-6", sSrcPOV & ".P#Cur-9", sSrcPOV & ".P#Cur-12")
                NMonths = 5
            End If
        Else
            aSrcArray = RollingNMonthsArray(sSrcPOV, sRolPrevScenCurP, NMonths)
        End If

        If IsEmpty(aSrcArray) = FALSE Then
            For Each sSrcRow In aSrcArray
                If bArvo = FALSE Then

                    bValue = HasDataCheck(sSrcRow)
                    If bValue = TRUE Then

                        sSrcString = sSrcString & sSrcRow & "+"
                    End if
                End If
            Next

            If bArvo = TRUE Then
                sSrcString = ""
                For Each sSrcRow In aSrcArray
                    sSrcString = sSrcString & sSrcRow & "+"
                Next
            End If

            If Len(sSrcString) > 0 Then
                sSrcString = Left(sSrcString, Len(sSrcString) - 1)
            End If
        End If
    End If

    RollingNMonthsString = sSrcString
End Function

Sub Rolling12Months(sDestPOV, sSrcPOV, sRolPrevScenCurP, sRolPrevScenYEnd)
    ValidPeriod = CheckValidDataPeriodForRollingCalcs(13)
    sSrcString = ""
    bArvo = FALSE

    If ValidPeriod = True Then

        If HS.Period.IsLast = FALSE Then
            aSrcArray = Array(sSrcPOV & ".W#YTD." & sRolPrevScenYEnd, "-" & sSrcPOV & ".W#YTD." & sRolPrevScenCurP, sSrcPOV & ".W#YTD.P#CUR")
        Else
            aSrcArray = Array(sSrcPOV & ".W#YTD.P#CUR")
        End If

        For Each sSrcRow In aSrcArray
            If bArvo = FALSE Then

                bValue = HasDataCheck(sSrcRow)
                If bValue = TRUE Then

                    sSrcString = sSrcString & (sSrcRow) & "+"
                End if
            End If
        Next

        If bArvo = TRUE Then
            sSrcString = ""
            For Each sSrcRow In aSrcArray
                sSrcString = sSrcString & (sSrcRow) & "+"
            Next
        End If

        If Len(sSrcString) > 0 Then
            sSrcString = Left(sSrcString, Len(sSrcString) - 1)
            HS.Exp sDestPOV & " = " & sSrcString
        End If

        Call ClearDerived(sDestPOV)
    End If
End Sub

Sub RollingNMonths(sDestPOV, sSrcPOV, sRolPrevScenCurP, NMonths, StrScenario)

    sSrcString = RollingNMonthsString(sSrcPOV & ".W#Periodic", sRolPrevScenCurP, NMonths, StrScenario)
    If Len(sSrcString) > 0 Then
        HS.Exp sDestPOV & " = " & sSrcString
    End If

    Call ClearDerived(sDestPOV)
End Sub

Sub ClearDerived(sDestPOV)

    iYear = HS.Year.Member()
    sScenario = HS.Scenario.Member()
    If Left(sScenario, 8) = "STRATEGY" Then
        sStrYear = Right(sScenario, 4)
    End If

    If (sScenario <> "ACTUAL" Or (sScenario = "ACTUAL" And iYear >= 2019)) And (Left(sScenario, 8) <> "STRATEGY" Or CInt(sStrYear) >= 2021) Then
        bClearActive = True
        If InStr(sDestPOV, "L12M") > 0 Or InStr(sDestPOV, "L3M") > 0 Or InStr(sDestPOV, "N3M") > 0 Or InStr(sDestPOV, "N12M") > 0 Then
            bClearActive = False
        Else
            KeywordStart = InStr(sDestPOV, "A#")
            FieldLength = InStr(KeywordStart, sDestPOV, ".") - (KeywordStart + 2)
            sAccount = Mid(sDestPOV, KeywordStart + 2, FieldLength)
            If HS.Account.IsCalculated(sAccount) = True Then
                bClearActive = False
            End If
        End If

        If sScenario = "FORECAST" And iYear >= 2019 And bClearActive = TRUE Then
            If HS.Entity.Isbase("", "") = TRUE Then
                StrRevLv = HS.ReviewStatusUsingPhaseID("", 1)
                RevLvNumber = ConvertReviewStatus(StrRevLv)
                If RevLvNumber < 6 Then
                    bClearActive = False
                End If
            End If
        End If

        If bClearActive = True Then

            Set DataUnit = HS.OpenDataUnit(sDestPOV)
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If HS.IsZero(dData) = TRUE Then
                    HS.Clear "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4
                End If
            Next
        End If

        dPeriod = HS.Period.Number()
        If dPeriod > 1 Then
            Set DataUnit = HS.OpenDataUnit(sDestPOV & ".W#Periodic")
            NumItems = DataUnit.GetNumItems
            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If HS.IsZero(dData) = TRUE Then
                    dValue = HS.GetCellRealData("A#" & StrAccount & ".W#Periodic.I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4, bValue)
                    If bValue = FALSE Then
                        HS.Exp "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4 & " = 0"
                    End If
                End If
            Next
        End If
    End If
End Sub

Function RollingNMonthsArray(sSrcPOV, sRolPrevScenCurP, NMonths)
    NumPeriods = 12
    ReDim aSrcArray(NMonths-1)

    iCounter = 0
    sSrcString = ""
    CountCY = NMonths - 1
    dPeriod = HS.Period.Number()
    If dPeriod < NMonths Then

        CountCY = dPeriod - 1
        CountPY = NMonths - dPeriod - 1

        For i = 0 To CountPY
            PerMov = i + (NumPeriods - (NMonths - 1))
            aSrcArray(iCounter) = sSrcPOV & "." & sRolPrevScenCurP & "+" & PerMov
            sSrcString = sSrcString & sSrcPOV & "." & sRolPrevScenCurP & "+" & PerMov & "+"
            iCounter = iCounter + 1
        Next
    End If

    For i = 0 To CountCY
        aSrcArray(iCounter) = sSrcPOV & ".P#CUR-" & i
        sSrcString = sSrcString & sSrcPOV & ".P#CUR-" & i & "+"
        iCounter = iCounter + 1
    Next

    RollingNMonthsArray = aSrcArray
End Function

Function GetUD(CurMember, Dimension, Keyword)

    Dim FieldDelimiter,KeywordDelimiter,UDString
    Dim FieldEnd,KeywordStart,ValueStart,FieldLength

    FieldDelimiter = "/"
    KeywordDelimiter = ":"

    Select Case Dimension
        Case "Account"
            UDString = HS.Account.UD1(CurMember)
            UDString = UDString & FieldDelimiter & HS.Account.UD2(CurMember)
            UDString = UDString & FieldDelimiter & HS.Account.UD3(CurMember)

        Case "Custom1"
            UDString = HS.Custom1.UD1(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom1.UD2(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom1.UD3(CurMember)
        Case "Custom2"
            UDString = HS.Custom2.UD1(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom2.UD2(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom2.UD3(CurMember)
        Case "Custom3"
            UDString = HS.Custom3.UD1(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom3.UD2(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom3.UD3(CurMember)
        Case "Custom4"
            UDString = HS.Custom4.UD1(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom4.UD2(CurMember)
            UDString = UDString & FieldDelimiter & HS.Custom4.UD3(CurMember)
        Case "Entity"
            If CurMember <> "[ICP None]" Then
                UDString = HS.Entity.UD1(CurMember)
                UDString = UDString & FieldDelimiter & HS.Entity.UD2(CurMember)
                UDString = UDString & FieldDelimiter & HS.Entity.UD3(CurMember)
            End If
        Case "Scenario"
            UDString = HS.Scenario.UD1(CurMember)
            UDString = UDString & FieldDelimiter & HS.Scenario.UD2(CurMember)
            UDString = UDString & FieldDelimiter & HS.Scenario.UD3(CurMember)
    End Select

    UDString=FieldDelimiter&UDString&FieldDelimiter

    KeywordStart = InStr(UDString, FieldDelimiter & Keyword & KeywordDelimiter)

    If KeywordStart >0 Then

        FieldEnd = InStr(KeywordStart + 1, UDString, FieldDelimiter)
        ValueStart = InStr(KeywordStart, UDString, KeywordDelimiter) + 1
        FieldLength = FieldEnd - ValueStart
        GetUD = Mid(UDString, ValueStart, FieldLength)

    ElseIf Keyword = "" Then
        GetUD=UDString
    Else
        GetUD=""
    End If

    If left(Keyword,2)="Is" Then
        If GetUd="True" Then GetUd=True Else GetUd=False
    End If

End Function

Function IsItemInList(Item,aList)

    IsItemInList=False

    If not IsEmpty(aList) Then
        For each ListItem in aList
            If StrComp(ListItem, Item, vbTextCompare) = 0 Then IsItemInList=True : Exit For
        Next
    End If
End Function

Function GetQuarterMonth(sMonth)

    sQuarter = GetQuarter(sMonth)
    Select Case sQuarter
        Case "Q1"
            StrQuarterMonth = "Mar"
        Case "Q2"
            StrQuarterMonth = "Jun"
        Case "Q3"
            StrQuarterMonth = "Sep"
        Case "Q4"
            StrQuarterMonth = "Dec"
    End Select

    GetQuarterMonth = StrQuarterMonth
End Function

Function GetLastestQuarterMonth(sMonth)

    iPeriodNumber = GetPeriodNumber(sMonth)

    iPeriodNumber = iPeriodNumber - 2
    If iPeriodNumber < 1 Then
        iPeriodNumber = iPeriodNumber + 12
    End If
    sPeriod = GetPeriodLabel(iPeriodNumber)

    GetLastestQuarterMonth = GetQuarterMonth(sPeriod)
End Function

Function GetQuarter(sMonth)
    Select Case UCase(sMonth)
        Case "JAN"
            StrQ = "Q1"
        Case "FEB"
            StrQ = "Q1"
        Case "MAR"
            StrQ = "Q1"
        Case "APR"
            StrQ = "Q2"
        Case "MAY"
            StrQ = "Q2"
        Case "JUN"
            StrQ = "Q2"
        Case "JUL"
            StrQ = "Q3"
        Case "AUG"
            StrQ = "Q3"
        Case "SEP"
            StrQ = "Q3"
        Case "OCT"
            StrQ = "Q4"
        Case "NOV"
            StrQ = "Q4"
        Case "DEC"
            StrQ = "Q4"
    End Select

    GetQuarter = StrQ
End Function

Function GetPeriodNumber(vPeriod)

    Select Case UCase(vPeriod)
        Case "JAN"
            vResult = 1
        Case "FEB"
            vResult = 2
        Case "MAR"
            vResult = 3
        Case "APR"
            vResult = 4
        Case "MAY"
            vResult = 5
        Case "JUN"
            vResult = 6
        Case "JUL"
            vResult = 7
        Case "AUG"
            vResult = 8
        Case "SEP"
            vResult = 9
        Case "OCT"
            vResult = 10
        Case "NOV"
            vResult = 11
        Case "DEC"
            vResult = 12
    End Select

    GetPeriodNumber = vResult
End Function

Function GetPeriodLabel(PeriodNum)

    Select Case UCase(PeriodNum)
        Case "1"
            vResult = "Jan"
        Case "2"
            vResult = "Feb"
        Case "3"
            vResult = "Mar"
        Case "4"
            vResult = "Apr"
        Case "5"
            vResult = "May"
        Case "6"
            vResult = "Jun"
        Case "7"
            vResult = "Jul"
        Case "8"
            vResult = "Aug"
        Case "9"
            vResult = "Sep"
        Case "10"
            vResult = "Oct"
        Case "11"
            vResult = "Nov"
        Case "12"
            vResult = "Dec"
    End Select

    GetPeriodLabel = vResult
End Function

Function CombineList(list1, list2, FirstWriteToFileSection)
    If FirstWriteToFileSection = False Then
        iListSize1 = UBound(list1,2)
    End If
    iListSize2 = UBound(list2,2)

    ReDim listx(7,iListSize1+iListSize2+1)

    If FirstWriteToFileSection = True Then
        For z=0 to iListSize2
            listx(0,z) = list2(0,z)
            listx(1,z) = list2(1,z)
            listx(2,z) = list2(2,z)
            listx(3,z) = list2(3,z)
            listx(4,z) = list2(4,z)
            listx(5,z) = list2(5,z)
            listx(6,z) = list2(6,z)
            listx(7,z) = list2(7,z)
        Next
    Else
        For z=0 to iListSize1
            listx(0,z) = list1(0,z)
            listx(1,z) = list1(1,z)
            listx(2,z) = list1(2,z)
            listx(3,z) = list1(3,z)
            listx(4,z) = list1(4,z)
            listx(5,z) = list1(5,z)
            listx(6,z) = list1(6,z)
            listx(7,z) = list1(7,z)
        Next

        For z=0 to iListSize2
            listx(0,iListSize1+z) = list2(0,z)
            listx(1,iListSize1+z) = list2(1,z)
            listx(2,iListSize1+z) = list2(2,z)
            listx(3,iListSize1+z) = list2(3,z)
            listx(4,iListSize1+z) = list2(4,z)
            listx(5,iListSize1+z) = list2(5,z)
            listx(6,iListSize1+z) = list2(6,z)
            listx(7,iListSize1+z) = list2(7,z)
        Next
    End If

    CombineList = listx
End Function

Function CombineLists(list1, list2)
    iListSize1 = UBound(list1)
    iListSize2 = UBound(list2)

    ReDim NewList(iListSize1+iListSize2+1)

    iCounter = 0
    For each sMember In list1
        NewList(iCounter) = sMember
        iCounter = iCounter + 1
    Next

    For each sMember In list2
        NewList(iCounter) = sMember
        iCounter = iCounter + 1
    Next

    Redim Preserve NewList(iCounter-1)

    CombineLists = NewList
End Function

Function RemoveMembersFromArray(aFullArray, aRemovedMembers)
    Redim aNewArray(Ubound(aFullArray))

    iCounter = 0
    For Each sArrayMember in aFullArray
        bFound = False
        For Each sMember in aRemovedMembers
            If sArrayMember = sMember Then
                bFound = True
            End If
        Next

        If bFound = False Then
            aNewArray(iCounter) = sArrayMember
            iCounter = iCounter + 1
        End If
    Next
    Redim Preserve aNewArray(iCounter-1)

    RemoveMembersFromArray = aNewArray
End Function

Function TimeStamp
  CurrTime = Now()
  TimeStamp = CStr(Year(CurrTime)) & "-" & LZ(Month(CurrTime)) & "-" & LZ(Day(CurrTime)) & " " & LZ(Hour(CurrTime)) & ":" & LZ(Minute(CurrTime)) & ":" & LZ(Second(CurrTime))
End Function

Function LZ(ByVal Number)
  If Number < 10 Then
    LZ = "0" & CStr(Number)
  Else
    LZ = CStr(Number)
  End If
End Function

Function Sum12Forward(StrPOV)

    sSrcPOV = SumNForward(StrPOV, 11, 0)
    If Len(sSrcPOV) = 0 Then
        sSrcPOV = StrPOV
    End If

    Sum12Forward = sSrcPOV
End Function

Function SumNForward(sSrcPOV, NMonths, iStart)
    bArvo = FALSE
    CumPOV = ""

    aSrcPOVs = SumNForwardArray(sSrcPOV, NMonths, iStart)
    For Each sSrcRow In aSrcPOVs
        If bArvo = FALSE Then

            bValue = HasDataCheck(sSrcRow)
            If bValue = TRUE Then

                CumPOV = CumPOV & sSrcRow & "+"
            End if
        End If
    Next

    If bArvo = TRUE Then
        CumPOV = ""
        For i = iStart to NMonths
            CumPOV = CumPOV & sSrcPOV & ".P#CUR+" & i & "+"
        Next
    End If

    If Len(CumPOV) > 0 Then
        CumPOV = Left(CumPOV, Len(CumPOV) - 1)
        SumNForward = CumPOV
    Else
        SumNForward = ""
    End If
End Function

Function SumNForwardArray(sSrcPOV, NMonths, iStart)
    ReDim aSumNForward(NMonths-iStart)

    iCounter = 0
    For i = iStart to NMonths
        aSumNForward(iCounter) = sSrcPOV & ".P#CUR+" & i
        iCounter = iCounter + 1
    Next

    If iCounter > 0 Then

        SumNForwardArray = aSumNForward
    Else
        SumNForwardArray = Empty
    End If
End Function

Function ActiveMember_BasedOnCloseStartDate(Mbr,Dimension,IntYear,IntCurPeriodNum)
    ActiveMbr = True
    UD = GetUD(Mbr, Dimension, "CloseStartDate")

    If UD <> "" Then
        UD_Year = Right(UD,4)
        UD_Period = Left(UD,3)
        UD_PeriodNbr = GetPeriodNumber(UD_Period)

        If Int(IntYear) = Int(UD_Year) and Int(IntCurPeriodNum) >= Int(UD_PeriodNbr) Then
            ActiveMbr = False
        ElseIf Int(IntYear) > Int(UD_Year) Then
            ActiveMbr = False
        End If

    End If

    ActiveMember_BasedOnCloseStartDate = ActiveMbr
End Function

Function Last5QAvg(StrPOV,StrPeriod,StrPrevScenYEnd)
    vStart = Instr(StrPrevScenYEnd,"S#")+2
    vEnd = Instr(StrPrevScenYEnd,".")-3

    PrevScen = ".S#"&MID(StrPrevScenYEnd,vStart,vEnd)

    If StrPeriod = "Jan" Or StrPeriod = "Feb" Then
        POV = StrPOV&".Y#Cur-1.P#Q4"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q3"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q2"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q1"&PrevScen&" + "&StrPOV&".Y#Cur-2.P#Q4"&PrevScen
    ElseIf StrPeriod = "Mar" Or StrPeriod = "Apr" Or StrPeriod = "May" Then
        POV = StrPOV&".Y#Cur.P#Q1 + "&StrPOV&".Y#Cur-1.P#Q4"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q3"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q2"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q1"&PrevScen
    ElseIf StrPeriod = "Jun" Or StrPeriod = "Jul" Or StrPeriod = "Aug" Then
        POV = StrPOV&".Y#Cur.P#Q2 + "&StrPOV&".Y#Cur.P#Q1 + "&StrPOV&".Y#Cur-1.P#Q4"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q3"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q2"&PrevScen
    ElseIf StrPeriod = "Sep" Or StrPeriod = "Oct" Or StrPeriod = "Nov" Then
        POV = StrPOV&".Y#Cur.P#Q3 + "&StrPOV&".Y#Cur.P#Q2 + "&StrPOV&".Y#Cur.P#Q1 + "&StrPOV&".Y#Cur-1.P#Q4"&PrevScen&" + "&StrPOV&".Y#Cur-1.P#Q3"&PrevScen
    ElseIf StrPeriod = "Dec" Then
        POV = StrPOV&".Y#Cur.P#Q4 + "&StrPOV&".Y#Cur.P#Q3 + "&StrPOV&".Y#Cur.P#Q2 + "&StrPOV&".Y#Cur.P#Q1 + "&StrPOV&".Y#Cur-1.P#Q4"&PrevScen
    End If

    Last5QAvg = "("&POV&") / 5 "
End Function

Function GetLastYearAndPeriodWithActData(IntYear,StrScenario,Str1stFcstPeriod,StrCurrFcstYear,LastActYearScenPOV,LastActPeriodPOV,LastActYear)
    If Left(StrScenario,8) = "FORECAST"    Then
        If StrScenario = "FORECAST" Then
            If CInt(Str1stFcstPeriod) = 1 Then
                LastActYear = StrCurrFcstYear - 1
                LastActYearScenPOV = "S#ACTUAL.Y#"&LastActYear
                LastActPeriodPOV = "P#Dec"
            Else
                LastActYear = StrCurrFcstYear
                LastActYearScenPOV = "S#"&StrScenario&".Y#"&LastActYear
                LastActPeriodNumber = CInt(Str1stFcstPeriod) - 1
                LastPeriodName = GetPeriodLabel(LastActPeriodNumber)
                LastActPeriodPOV = "P#"&LastPeriodName
            End If
        Else
            LastActMonth = mid(StrScenario,Instr(StrScenario,"_")+1,3)
            LastActPeriodPOV = "P#"&LastActMonth

            LastActYear = CheckFCST_1st_Year(StrScenario, StrCurrFcstYear, Str1stFcstPeriod, IntYear)
            If LastActMonth = "DEC" Then
                LastActYear = LastActYear - 1

                LastActYearScenPOV = "S#"& StrScenario &".Y#" & LastActYear
            Else
                LastActYearScenPOV = "S#" & StrScenario & ".Y#" & LastActYear
            End If
        End If
    ElseIf StrScenario = "BUDGET_FORECAST" Then

        For i = 1 to 12
            StrPeriodLabel = GetPeriodLabel(i)
            ActDataMonth = HS.GetCell("P#"&StrPeriodLabel&".E#[None].V#[None].A#FCST_ActDataMonth.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

            If ActDataMonth = 1 Then
                LastPeriodWithActData = StrPeriodLabel
            End If
        Next

        LastActYear = IntYear
        LastActYearScenPOV = "S#BUDGET_FORECAST.Y#"&LastActYear
        LastActPeriodPOV = "P#"&LastPeriodWithActData
    ElseIf StrScenario = "BUDGET" or StrScenario = "BUDGET_ACTRATE" Then
        LastActYear = IntYear - 1
        LastActYearScenPOV = "S#BUDGET_FORECAST.Y#"&LastActYear
        LastActPeriodPOV = "P#Dec"
    End If

    GetLastYearAndPeriodWithActData = ""
End Function

Function ConvertReviewStatus(strReviewStatus)
    ConvertReviewStatus = ""

    Select Case strReviewStatus
        Case "Not Supported"
            ConvertReviewStatus = -2
        Case "Not Started"
            ConvertReviewStatus = -1
        Case "First Pass"
            ConvertReviewStatus = 0
        Case "Review Level 1"
            ConvertReviewStatus = 1
        Case "Review Level 2"
            ConvertReviewStatus = 2
        Case "Review Level 3"
            ConvertReviewStatus = 3
        Case "Review Level 4"
            ConvertReviewStatus = 4
        Case "Review Level 5"
            ConvertReviewStatus = 5
        Case "Review Level 6"
            ConvertReviewStatus = 6
        Case "Review Level 7"
            ConvertReviewStatus = 7
        Case "Review Level 8"
            ConvertReviewStatus = 8
        Case "Review Level 9"
            ConvertReviewStatus = 9
        Case "Review Level 10"
            ConvertReviewStatus = 10
        Case "Submitted"
            ConvertReviewStatus = 11
        Case "Published"
            ConvertReviewStatus = 12
    End Select
End Function

Function CheckbUseActualRules(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,StrScenario)

    UseActRules = True

    If Left(StrScenario, 6) <> "ACTUAL" And _
       StrScenario <> "ACTUALFCST_PREVYRATE" And Left(StrScenario, 8) <> "STRATEGY" Then

        UseActRules = False

        If Left(StrScenario,8) = "FORECAST" Or (Left(StrScenario, 11) = "CONSTANT_FX" And Right(StrScenario, 8) <> "PREVFCST") Then
            If Left(StrScenario, 9) = "FORECAST_" Then

                IntFcstYear = CheckFCST_1st_Year(StrScenario, StrCurrFcstYear, Str1stFcstPeriod, IntYear)
                If InStr(StrScenario, "FORECAST_DEC") > 0 Then
                    IntFcstYear = IntFcstYear - 1
                End If

                If Int(IntYear) = Int(IntFcstYear) Then

                    IntFirstFcstMonth = GetFirstFCSTMonth(StrScenario,Str1stFcstPeriod)
                End If
            Else
                IntFcstYear = Int(StrCurrFcstYear)
                IntFirstFcstMonth = Int(Str1stFcstPeriod)
            End If

            If Int(IntYear) < Int(IntFcstYear) Then
                UseActRules = True
            ElseIf Int(IntYear) = Int(IntFcstYear) Then
                If Int(IntCurPeriodNum) < Int(IntFirstFcstMonth) Then
                    UseActRules = True
                End If
            End If
        ElseIf StrScenario = "BUDGET_FORECAST" Then

            ActDataMonth = HS.GetCell("E#[None].V#[None].A#FCST_ActDataMonth.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

            If ActDataMonth = 1 Then
                UseActRules = True
            End If
        End If
    End If

    CheckbUseActualRules = UseActRules
End Function

Function SkipCalcsForHistPeriodsForStoredFCST(IntYear,StrScenario,StrCurrFcstYear,Str1stFcstPeriod)

    SkipCalculations = False

    If HS.Scenario.IsBase("FORECAST_SUPPORT", StrScenario) = TRUE Then

        FCST_Year = CheckFCST_1st_Year(StrScenario, StrCurrFcstYear, Str1stFcstPeriod, IntYear)
        If StrScenario = "FORECAST_DEC" or StrScenario = "FORECAST_DEC_PREVY" Then FCST_Year = FCST_Year - 1

        If Clng(IntYear) < Clng(FCST_Year) Then SkipCalculations = True
    End If

    SkipCalcsForHistPeriodsForStoredFCST = SkipCalculations
End Function

Function GetFirstFCSTMonth(StrScenario,Str1stFcstPeriod)

    If StrScenario = "FORECAST" Then
        GetFirstFCSTMonth = CInt(Str1stFcstPeriod)
    ElseIf Left(StrScenario, 9) = "FORECAST_" Then

        sFCSTMonth = Mid(StrScenario, 10, 3)
        GetFirstFCSTMonth = GetPeriodNumber(sFCSTMonth) + 1
    ElseIf StrScenario = "BUDGET" Then
        GetFirstFCSTMonth = 1
    ElseIf StrScenario = "BUDGET_FORECAST" Then
        GetFirstFCSTMonth = 0
        For i=1 to 12
            SPeriod = GetPeriodLabel(i)
            ActDataMonth = HS.GetCell("E#[None].V#[None].A#FCST_ActDataMonth.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None].P#"&sPeriod)
            If ActDataMonth = 0 And GetFirstFCSTMonth = 0 Then
                GetFirstFCSTMonth = i
            End If
        Next
    End If
End Function

Sub CheckStrPrevScen(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,ByVal StrScenario,StrPrevScenYEnd,StrRolPrevScenCurP,StrRolPrevScenYEnd,StrPrevScenBEGBAL,StrEntity,StrBA,StrValue,StrCurrFcstYearAndPeriod)

    Ent = ""

    If StrScenario = "ACTUAL" Then
        StrScenario = HS.Scenario.member()
    End If

    If StrScenario = "ACTUAL" or StrScenario = "ACTUALFCST_PREVYRATE" Then
        StrPrevScenYEnd="S#Actual.Y#Prior.P#Dec"&Ent
        StrPrevScenBEGBAL="S#Actual.Y#Prior.P#Dec.C3#BEGBALtot"&Ent
        StrRolPrevScenCurP = "S#ACTUAL.Y#Prior.P#Cur"
        StrRolPrevScenYEnd = "S#ACTUAL.Y#Prior.P#[YEAR]"

    ElseIf StrScenario = "NORSU_ACTUAL" Then
        StrPrevScenYEnd="S#Norsu_Actual.Y#Prior.P#Dec"&Ent
        StrPrevScenBEGBAL="S#Norsu_Actual.Y#Prior.P#Dec.C3#BEGBALtot"&Ent
        StrRolPrevScenCurP = "S#NORSU_ACTUAL.Y#Prior.P#Cur"
        StrRolPrevScenYEnd = "S#NORSU_ACTUAL.Y#Prior.P#[YEAR]"
    ElseIf Left(StrScenario, 8) = "FORECAST" Then

        If Left(StrScenario, 9) = "FORECAST_" Then

            IntFcstYear = CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)
        Else
            IntFcstYear = Int(StrCurrFcstYear)
        End If

        If StrScenario = "FORECAST_DEC" Then
            IntFcstYear = IntFcstYear - 1
        End If
        If StrScenario = "FORECAST_DEC_PREVY" Then

            IntFcstYear = IntFcstYear - 1
        End If

            If Int(IntYear) <= Int(IntFcstYear) Then
                StrPrevScenYEnd="S#ACTUAL.Y#Prior.P#[YEAR]"&Ent
                StrPrevScenBEGBAL="S#ACTUAL.Y#Prior.P#[YEAR].C3#BEGBALtot"&Ent
                StrRolPrevScenCurP = "S#ACTUAL.Y#Prior.P#Cur"
                StrRolPrevScenYEnd = "S#ACTUAL.Y#Prior.P#[YEAR]"
            Else
                StrPrevScenYEnd="S#"&StrScenario&".Y#Prior.P#[YEAR]"&Ent
                StrPrevScenBEGBAL="S#"&StrScenario&".Y#Prior.P#[YEAR].C3#BEGBALtot"&Ent
                StrRolPrevScenCurP = "S#"&StrScenario&".Y#Prior.P#Cur"
                StrRolPrevScenYEnd = "S#"&StrScenario&".Y#Prior.P#[YEAR]"
            End If

    ElseIf StrScenario = "BUDGET" or StrScenario = "BUDGET_ACTRATE" Then
        StrPrevScenYEnd="S#BUDGET_FORECAST.Y#Prior.P#[YEAR]"&Ent
        StrPrevScenBEGBAL="S#BUDGET_FORECAST.Y#Prior.P#[YEAR].C3#BEGBALtot"&Ent
        StrRolPrevScenCurP = "S#BUDGET_FORECAST.Y#Prior.P#Cur"
        StrRolPrevScenYEnd = "S#BUDGET_FORECAST.Y#Prior.P#[YEAR]"
    ElseIf StrScenario = "BUDGET_FORECAST" Then

        StrPrevScenYEnd="S#Actual.Y#Prior.P#Dec"&Ent
        StrPrevScenBEGBAL="S#Actual.Y#Prior.P#Dec.C3#BEGBALtot"&Ent
        StrRolPrevScenCurP = "S#ACTUAL.Y#Prior.P#Cur"
        StrRolPrevScenYEnd = "S#ACTUAL.Y#Prior.P#[YEAR]"

    ElseIf Left(StrScenario, 8) = "STRATEGY" Or Left(StrScenario, 11) = "CONSTANT_FX" Then

        StrPrevScenYEnd="S#" & StrScenario & ".Y#Prior.P#Dec"&Ent
        StrPrevScenBEGBAL="S#" & StrScenario & ".Y#Prior.P#Dec.C3#BEGBALtot"&Ent
        StrRolPrevScenCurP = "S#" & StrScenario & ".Y#Prior.P#Cur"
        StrRolPrevScenYEnd = "S#" & StrScenario & ".Y#Prior.P#[YEAR]"
    End If
End Sub

Function GetStoredFcstForActRepPer(IntYear,IntCurPeriodNum,Str1stFcstPeriod,StrCurrFcstYear)
    If CInt(Str1stFcstPeriod) = 1 Then
        StrFcstYear = StrCurrFcstYear - 1
    Else
        StrFcstYear = StrCurrFcstYear
    End If

    sMonth = GetPeriodLabel(IntCurPeriodNum)

    GetStoredFcstForActRepPer = ""
    If CInt(IntYear) = CInt(StrFcstYear) Then
        GetStoredFcstForActRepPer = "FORECAST_" & UCase(sMonth)
    ElseIf CInt(IntYear) = CInt(StrFcstYear) - 1 Then
        If CInt(IntCurPeriodNum) = 12 Then
            GetStoredFcstForActRepPer = "FORECAST_" & sMonth & "_PREVY"
        End If
    End If
End Function

Function GetPreviousFcst(Str1stFcstPeriod)

    iFcstNameMonth = CInt(Str1stFcstPeriod) - 2
    If iFcstNameMonth < 1 Then
        iFcstNameMonth = iFcstNameMonth + 12
    End If
    sFcstNameMonth = UCase(GetPeriodLabel(iFcstNameMonth))

    GetPreviousFcst = "FORECAST_" & sFcstNameMonth
    If sFcstNameMonth = "DEC" Then
        GetPreviousFcst = "FORECAST_DEC_PREVY"
    End If
End Function

Function GetCurFcstStoredCounterparty(Str1stFcstPeriod)

    If Cint(Str1stFcstPeriod) = 1 Then
        nStoredMth = 12
    Else
        nStoredMth = Str1stFcstPeriod - 1
    End If

    StrStoredMth = Ucase(GetPeriodLabel(nStoredMth))
    GetCurFcstStoredCounterparty = "FORECAST_"&StrStoredMth
End Function

Function CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)

    If StrScenario = "FORECAST" Then
        CheckFCST_1st_Year = Int(StrCurrFcstYear)
    ElseIf HS.Scenario.IsBase("FORECAST_SUPPORT", StrScenario) = TRUE Then

        FCSTYearAndPeriod = HS.GetCell("E#[None].S#" & StrScenario & ".V#[None].A#FCST_CurrFcstYearAndPeriod.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
        If HS.IsZero(FCSTYearAndPeriod) = FALSE Then
            CheckFCST_1st_Year = Int(FCSTYearAndPeriod/100)
        Else
            If Clng(Str1stFcstPeriod) = 1 Then
                CheckFCST_1st_Year = Clng(StrCurrFcstYear) - 1
            Else
                CheckFCST_1st_Year = Clng(StrCurrFcstYear)
            End If

            If Right(StrScenario, 5) = "PREVY" Then
                CheckFCST_1st_Year = CheckFCST_1st_Year - 1
            End If
        End If

        If Instr(UCase(StrScenario), "FORECAST_DEC") > 0 Then
            CheckFCST_1st_Year = CheckFCST_1st_Year + 1
        End If
    ElseIf StrScenario = "BUDGET" or StrScenario = "BUDGET_FORECAST" Then
        CheckFCST_1st_Year = Int(IntYear)
    End If
End Function

Function ActiveHistoryMember_BasedOnCloseStartDate(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,Mbr,Dimension,IntYear,IntCurPeriodNum,YearsBackInHist)
    ActiveMbr = True
    UD = GetUD(Mbr, Dimension, "CloseStartDate")

    If UD <> "" Then

        UD_Year = Right(UD,4)
        UD_Period = Left(UD,3)
        UD_PeriodNbr = GetPeriodNumber(UD_Period)

        If StrScenario = "BUDGET" or StrScenario = "BUDGET_ACTRATE" Then
            If Int(Str1stFcstPeriod) = 1 Then
                CurrYear = StrCurrFcstYear
            Else
                CurrYear = StrCurrFcstYear + 1
            End If
        Else
            If Int(Str1stFcstPeriod) = 1 Then
                CurrYear = StrCurrFcstYear - 1
            Else
                CurrYear = StrCurrFcstYear
            End If
        End If

        If Int(UD_Year) < Int(CurrYear)-YearsBackInHist Then
            ActiveMbr = False
        End If

    End If

    ActiveHistoryMember_BasedOnCloseStartDate = ActiveMbr
End Function

Function IsDimmedArray(arrParam)
    Dim lintUBound : lintUBound = 0
    Dim llngError  : llngError = 0

    IsDimmedArray = False
    If Not IsArray(arrParam) Then : Exit Function

    On Error Resume Next

        lintUBound = UBound(arrParam)
        llngError = Err.Number
        If (llngError <> 0) Then : Err.Clear

    On Error Goto 0
    If (llngError = 0) And (lintUBound >= 0) Then : IsDimmedArray = True
End Function

Function IsArrayEmpty(myArray)
    iRet = True

    If IsArray(myArray) Then
        i = 0
        For Each e In myArray
            If Not IsEmpty(e) And Len(e)>0 Then
                i = i +1
            End If
        Next
        If i>0 Then
            iRet = False
        End If
    End If

    IsArrayEmpty = iRet
End Function

Sub FindLatestActualPeriodAndYearAndPh1RevLvNo(LastActYear,LastActPerLabel,Phase1RevLvNumber)

    ActYearsToCheck = array(2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030)
    PeriodList = Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

    FirstNotStartedFOUND = False
    For each nYear in ActYearsToCheck

        If nYear < 2026 Then
            testEnt = "MSEH"
        Else
            testEnt = "MSEO"
        End If

        For each Per in PeriodList

            StrRevLvForPhase1 = HS.ReviewStatusUsingPhaseID("S#ACTUAL.Y#"&nYear&".P#"&Per&".E#" & testEnt,1)
            Phase1RevLvNumber = ConvertReviewStatus(StrRevLvForPhase1)
            If Phase1RevLvNumber < 1 Then
                FirstNotStartedYear = nYear
                FirstNotStartedPer = Per
                FirstNotStartedPerNo = GetPeriodNumber(Per)
                FirstNotStartedFOUND = True
            End If
            If FirstNotStartedFOUND = True Then Exit For
        Next
        If FirstNotStartedFOUND = True Then Exit For
    Next

    If CInt(FirstNotStartedPerNo) = 1 Then
        LastActYear = CInt(nYear) - 1
        LastActPeriod = 12
        LastActPerLabel = "Dec"
    Else
        LastActYear = CInt(nYear)
        LastActPeriod = CInt(FirstNotStartedPerNo) - 1
        LastActPerLabel = GetPeriodLabel(LastActPeriod)
    End If

    StrRevLvForPhase1 = HS.ReviewStatusUsingPhaseID("S#ACTUAL.Y#"&LastActYear&".P#"&LastActPerLabel&".E#" & testEnt,1)
    Phase1RevLvNumber = ConvertReviewStatus(StrRevLvForPhase1)
End Sub

Sub CalcOverrideCalcs(CallingSection,StrEntity,IntCurPeriodNum,StrScenario,bIsBase,StrPeriod,EstimationScenario,StrBA,bUseActualRules,IntYear,Str1stFcstPeriod,StrCurrFcstYear,StrPrevScenBEGBAL,CalcOverrideActiveSections)

    ActiveSections = Split(CalcOverrideActiveSections,",")

    If IsItemInList(CallingSection,ActiveSections) = True Then

        Call ReadTextFileLineByLine("D:\1_Cargotec_material\3_HFM_WriteToFile\OverrideCalculations\OverrideCalculations.txt",FormulaFile)

        If IsArray(FormulaFile) = True    Then
            Str1stFcstPeriodName = GetPeriodLabel(Str1stFcstPeriod)

            For each srow in FormulaFile

                File_Active = GetParamFromTxt("ActiveNo",srow)

                If File_Active = "" Then
                    bCalculate = True
                Else
                    RowActiveSections = Split(File_Active,",")
                    If IsItemInList(CallingSection,RowActiveSections) = True Then
                        bCalculate = True
                    Else
                        bCalculate = False
                    End If
                End If

                If bCalculate = True Then
                    File_Type = GetParamFromTxt("Type",srow)
                    File_Formula = GetParamFromTxt("Formula",srow)
                    File_StrEntity = GetParamFromTxt("StrEntity",srow)
                    File_IntCurPeriodNum = GetParamFromTxt("IntCurPeriodNum",srow)
                    File_StrScenario = GetParamFromTxt("StrScenario",srow)
                    File_bIsBase = GetParamFromTxt("bIsBase",srow)
                    File_StrPeriod = GetParamFromTxt("StrPeriod",srow)
                    File_EstimationScenario = GetParamFromTxt("EstimationScenario",srow)
                    File_StrBA = GetParamFromTxt("StrBA",srow)
                    File_bUseActualRules = GetParamFromTxt("bUseActualRules",srow)
                    File_IntYear = GetParamFromTxt("IntYear",srow)
                    File_Str1stFcstPeriod = GetParamFromTxt("Str1stFcstPeriod",srow)
                    File_StrCurrFcstYear = GetParamFromTxt("StrCurrFcstYear",srow)

                    If File_StrEntity <> "" Then StrEntityTest = DoTest(StrEntity,File_StrEntity) Else StrEntityTest = True
                    If File_IntCurPeriodNum <> "" Then IntCurPeriodNumTest = DoTest(IntCurPeriodNum,File_IntCurPeriodNum) Else IntCurPeriodNumTest = True
                    If File_StrScenario <> "" Then StrScenarioTest = DoTest(StrScenario,File_StrScenario) Else StrScenarioTest = True
                    If File_bIsBase <> "" Then bIsBaseTest = DoTest(bIsBase,File_bIsBase) Else bIsBaseTest = True
                    If File_StrPeriod <> "" Then StrPeriodTest = DoTest(StrPeriod,File_StrPeriod) Else StrPeriodTest = True
                    If File_EstimationScenario <> "" Then EstimationScenarioTest = DoTest(EstimationScenario,File_EstimationScenario) Else EstimationScenarioTest = True
                    If File_StrBA <> "" Then StrBATest = DoTest(StrBA,File_StrBA) Else StrBATest = True
                    If File_bUseActualRules <> "" Then bUseActualRulesTest = DoTest(bUseActualRules,File_bUseActualRules) Else bUseActualRulesTest = True
                    If File_IntYear <> "" Then IntYearTest = DoTest(IntYear,File_IntYear) Else IntYearTest = True
                    If File_Str1stFcstPeriod <> "" Then Str1stFcstPeriodTest = DoTest(Str1stFcstPeriod,File_Str1stFcstPeriod) Else Str1stFcstPeriodTest = True
                    If File_StrCurrFcstYear <> "" Then StrCurrFcstYearTest = DoTest(StrCurrFcstYear,File_StrCurrFcstYear) Else StrCurrFcstYearTest = True

                    If StrEntityTest = True And IntCurPeriodNumTest = True And StrScenarioTest = True And bIsBaseTest = True And  StrPeriodTest = True    And EstimationScenarioTest = True And StrBATest = True    _
                       And bUseActualRulesTest = True And IntYearTest = True And Str1stFcstPeriodTest = True And StrCurrFcstYearTest = True Then

                        If Ucase(File_Type) = "HS" Then
                            ParameterList = Split(File_Formula,",")
                            Counter = 0
                            For each Param in ParameterList

                                If len(Param) > 1 Then

                                    If Instr(Param,"&StrEntity&") > 0 Then Param = Replace(Param,"&StrEntity&",StrEntity)
                                    If Instr(Param,"&StrEntity") > 0 Then Param = Replace(Param,"&StrEntity",StrEntity)

                                    If Instr(Param,"&StrScenario&") > 0 Then Param = Replace(Param,"&StrScenario&",StrScenario)
                                    If Instr(Param,"&StrScenario") > 0 Then Param = Replace(Param,"&StrScenario",StrScenario)

                                    If Instr(Param,"&StrPeriod&") > 0 Then Param = Replace(Param,"&StrPeriod&",StrPeriod)
                                    If Instr(Param,"&StrPeriod") > 0 Then Param = Replace(Param,"&StrPeriod",StrPeriod)

                                    If Instr(Param,"&IntYear&") > 0 Then Param = Replace(Param,"&IntYear&",IntYear)
                                    If Instr(Param,"&IntYear") > 0 Then Param = Replace(Param,"&IntYear",IntYear)

                                    If Instr(Param,"&StrCurrFcstYear&") > 0 Then Param = Replace(Param,"&StrCurrFcstYear&",StrCurrFcstYear)
                                    If Instr(Param,"&StrCurrFcstYear") > 0 Then Param = Replace(Param,"&StrCurrFcstYear",StrCurrFcstYear)

                                    If Instr(Param,"&StrPrevScenBEGBAL&") > 0 Then Param = Replace(Param,"&StrPrevScenBEGBAL&",StrPrevScenBEGBAL)
                                    If Instr(Param,"&StrPrevScenBEGBAL") > 0 Then Param = Replace(Param,"&StrPrevScenBEGBAL",StrPrevScenBEGBAL)

                                    If Instr(Param,"&Str1stFcstPeriod&") > 0 Then Param = Replace(Param,"&Str1stFcstPeriod&",Str1stFcstPeriodName)
                                    If Instr(Param,"&Str1stFcstPeriod") > 0 Then Param = Replace(Param,"&Str1stFcstPeriod",Str1stFcstPeriodName)
                                End If

                                If Counter = 0 Then
                                    Redim Preserve sList(Counter+1)
                                    sList(Counter) = Param
                                    sList(Counter+1) = "="
                                    Counter = Counter + 2
                                Else
                                    LeftParam = left(Param,1)
                                    If LeftParam = "+" or LeftParam = "-" or LeftParam = "*" or LeftParam = "/"    Then
                                        Redim Preserve sList(Counter+1)
                                        sList(Counter) = LeftParam
                                        sList(Counter+1) = mid(Param,2,len(Param)-1)
                                        Counter = Counter + 2
                                    Else
                                        Redim Preserve sList(Counter)
                                        sList(Counter) = Param
                                        Counter = Counter + 1
                                    End If
                                End If
                            Next

                            p0 = "" : p1 = "" : p2 = "" : p3 = "" : p4 = "" : p5 = "" : p6 = "" : p7 = "" : p8 = "" : p9 = "" : p10 = "" : p11 = "" : p12 = "" : p13 = "" : p14 = "" : p15 = "" : p16 = "" : p17 = "" : p18 = "" : p19 = "" : p20 = ""
                            p21 = "" : p22 = "" : p23 = "" : p24 = "" : p25 = "" : p26 = "" : p27 = "" : p28 = "" : p29 = "" : p30 = ""

                            For i = 0 to UBound(sList)
                                 Select Case i
                                    Case 0
                                        p0 = sList(i)
                                    Case 1
                                        p1 = sList(i)
                                    Case 2
                                        p2 = sList(i)
                                    Case 3
                                        p3 = sList(i)
                                    Case 4
                                        p4 = sList(i)
                                    Case 5
                                        p5 = sList(i)
                                    Case 6
                                        p6 = sList(i)
                                    Case 7
                                        p7 = sList(i)
                                    Case 8
                                        p8 = sList(i)
                                    Case 9
                                        p9 = sList(i)
                                    Case 10
                                        p10 = sList(i)
                                    Case 11
                                        p11 = sList(i)
                                    Case 12
                                        p12 = sList(i)
                                    Case 13
                                        p13 = sList(i)
                                    Case 14
                                        p14 = sList(i)
                                    Case 15
                                        p15 = sList(i)
                                    Case 16
                                        p16 = sList(i)
                                    Case 17
                                        p17 = sList(i)
                                    Case 18
                                        p18 = sList(i)
                                    Case 19
                                        p19 = sList(i)
                                    Case 20
                                        p20 = sList(i)
                                    Case 21
                                        p21 = sList(i)
                                    Case 22
                                        p22 = sList(i)
                                    Case 23
                                        p23 = sList(i)
                                    Case 24
                                        p24 = sList(i)
                                    Case 25
                                        p25 = sList(i)
                                    Case 26
                                        p26 = sList(i)
                                    Case 27
                                        p27 = sList(i)
                                    Case 28
                                        p28 = sList(i)
                                    Case 29
                                        p29 = sList(i)
                                    Case 30
                                        p30 = sList(i)

                                End Select
                            Next

                            HS.Exp p0&" "&p1&" "&p2&" "&p3&" "&p4&" "&p5&" "&p6&" "&p7&" "&p8&" "&p9&" "&p10&" "&p11&" "&p12&" "&p13&" "&p14&" "&p15&" "&p16&" "&p17&" "&p18&" "&p19&" "&p20&" "&p21&" "&p22&" "&p23&" "&p24&" "&p25&" "&p26&" "&p27&" "&p28&" "&p29&" "&p30
                        ElseIf Ucase(File_Type) = "CLEAR" Then

                                HS.Clear File_Formula
                        End If
                    End If
                End If
            Next
        End If
    End If
End Sub

Function DoTest(Mbr,FileStr)
    sTest = False
    ParamList = Split(FileStr,"|")
    For each x in ParamList
        If Counter = 0 Then
            CompElem = x
            Counter = Counter + 1
        ElseIf Counter = 1 Then
            ParamList2 = Split(x,",")
            For each i in ParamList2
                Redim Preserve MbrList(Counter2)
                MbrList(Counter2) = i
                Counter2 = Counter2 + 1
            Next
            Counter = Counter + 1
        End If
    Next

    If CompElem = "=" Then
        For each i in ParamList2
            If IsNumeric(Mbr) = False then
                If Ucase(Mbr) = UCase(i) Then
                    sTest = True
                End If
            Else
                If CInt(Mbr) = CInt(i) Then
                    sTest = True
                End If
            End If
        Next
    ElseIf CompElem = ">=" Then
        For each i in ParamList2
            If CInt(Mbr) >= CInt(i) Then
                sTest = True
            End If
        Next
    ElseIf CompElem = "<=" Then
        For each i in ParamList2
            If CInt(Mbr) <= CInt(i) Then
                sTest = True
            End If
        Next
    ElseIf CompElem = ">" Then
        For each i in ParamList2
            If CInt(Mbr) > CInt(i) Then
                sTest = True
            End If
        Next
    ElseIf CompElem = "<" Then
        For each i in ParamList2
            If CInt(Mbr) < CInt(i) Then
                sTest = True
            End If
        Next
    ElseIf CompElem = "<>" Then
        Count = 0
        For each i in ParamList2
            If Mbr <> i Then

                Count = Count + 1
            End If
        Next
        If Ubound(ParamList2) = Count-1 Then sTest = True
    End If

    DoTest = sTest
End Function

Sub WriteBaseMemberIDsIntoFile()

    Active = HS.GetCell("A#MEMBER_ID_WRITETOFILE.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")
    If Active <> 0 Then
        Counter = 0
        startTimer = timer()
        Redim MembersAndIDsList(7,50000)

        For Each sDim In Array("Ent", "Acc", "C1", "C2", "C3", "C4", "ICP", "Sce")
            If sDim = "Ent" Then
                aDimList = HS.Entity.List("", "[Descendants]")
            ElseIf sDim = "Acc" Then
                aDimList = HS.Account.List("", "[Descendants]")
            ElseIf sDim = "C1" Then
                aDimList = HS.Custom1.List("", "[Descendants]")
            ElseIf sDim = "C2" Then
                aDimList = HS.Custom2.List("", "[Descendants]")
            ElseIf sDim = "C3" Then
                aDimList = HS.Custom3.List("", "[Descendants]")
            ElseIf sDim = "C4" Then
                aDimList = HS.Custom4.List("", "[Descendants]")
            ElseIf sDim = "ICP" Then
                aDimList = HS.ICP.List("", "[Descendants]")
            ElseIf sDim = "Sce" Then
                aDimList = HS.Scenario.List("", "[Descendants]")
            End If

            For Each MB In aDimList
                MembersAndIDsList(0,Counter) = sDim & ";"& MB &";"

                If sDim = "Ent" Then
                    ID = HS.Entity.IDFromMember(MB)
                ElseIf sDim = "Acc" Then
                    ID = HS.Account.IDFromMember(MB)
                ElseIf sDim = "C1" Then
                    ID = HS.Custom1.IDFromMember(MB)
                ElseIf sDim = "C2" Then
                    ID = HS.Custom2.IDFromMember(MB)
                ElseIf sDim = "C3" Then
                    ID = HS.Custom3.IDFromMember(MB)
                ElseIf sDim = "C4" Then
                    ID = HS.Custom4.IDFromMember(MB)
                ElseIf sDim = "ICP" Then
                    ID = HS.ICP.IDFromMember(MB)
                ElseIf sDim = "Sce" Then
                    ID = HS.Scenario.IDFromMember(MB)
                End If

                MembersAndIDsList(1,Counter) = ID
                Counter = Counter + 1
            Next
        Next

        Redim Preserve MembersAndIDsList(7,Counter-1)
        Call WriteListToFile(MembersAndIDsList,startTimer)

        HS.Clear "A#MEMBER_ID_WRITETOFILE.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]"
    End If
End Sub

Sub WriteToFile(txtStringToWrite)
    On Error Resume Next
     Const ForReading = 1, ForWriting = 2, ForAppending = 8
     Dim fso, f
     Set fso = CreateObject("Scripting.FileSystemObject")

     Set f = fso.OpenTextFile("D:\1_Cargotec_material\3_HFM_WriteToFile\RuleRunLogCargo.txt", ForAppending, True)
     f.WriteLine txtStringToWrite
     f.Close
    On Error GoTo 0
End Sub

Sub WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite,FilePath,FileName)
    On Error Resume Next
     Const ForReading = 1, ForWriting = 2, ForAppending = 8
     Dim fso, f
     Set fso = CreateObject("Scripting.FileSystemObject")

     Set f = fso.OpenTextFile(FilePath&"\"&FileName, ForAppending, True)
     f.WriteLine txtStringToWrite
     f.Close
    On Error GoTo 0
End Sub

Sub WriteListToFile(ListToWrite,StartTimer)
    RowCount = Ubound(ListToWrite,2)

    On Error Resume Next
    Const ForReading = 1, ForWriting = 2, ForAppending = 8
    Dim fso, f
    Set fso = CreateObject("Scripting.FileSystemObject")

    Set f = fso.OpenTextFile("D:\1_Cargotec_material\3_HFM_WriteToFile\ListWriteToFile_FromRules.txt", ForAppending, True)

    For j=0 to RowCount
        f.WriteLine ListToWrite(0,j)&ListToWrite(1,j)&ListToWrite(2,j)&ListToWrite(3,j)&ListToWrite(4,j)&ListToWrite(5,j)&ListToWrite(6,j)&ListToWrite(7,j)
    Next

    EndTimer = timer()
    TotalTime = EndTimer - StartTimer
    f.WriteLine "Extract ran at : "&Now&" | Total rows in extract = "&RowCount&" | Execution time = "&TotalTime&"(s)"

    f.Close
    On Error GoTo 0
End Sub

Sub WritePCInfoToFile(txtStringToWrite)

    Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite, "D:\1_Cargotec_material\3_HFM_WriteToFile", "ProcessControlInfoFromRulesToFrontPage.txt")
End Sub

Sub ClearOldtextFile(FilePathToClear)
    Const ForWriting = 2

    On Error Resume Next
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objFile = objFSO.OpenTextFile(FilePathToClear, ForWriting)

    objFile.Write ""
    objFile.Close
End Sub

Sub ReadTextFile(FilePath,FullTxtStr)
    Set objFS = CreateObject("Scripting.FileSystemObject")
    strFile = FilePath
    Set objFile = objFS.OpenTextFile(strFile,1)
    Do Until objFile.AtEndOfStream
        StrText = objFile.ReadLine
        FullTxtStr = FullTxtStr & StrText
    Loop

    objFile.Close
End Sub

Sub ReadTextFileLineByLine(FilePath,TextFileFromServer)
    Counter = 0
    Set objFS = CreateObject("Scripting.FileSystemObject")
    strFile = FilePath

    If (objFS.FileExists(strFile)) = True Then
        Set objFile = objFS.OpenTextFile(strFile,1)
        Do Until objFile.AtEndOfStream
            StrText = objFile.ReadLine

            Redim Preserve sList(Counter)
            sList(Counter) = StrText
            Counter = Counter + 1
        Loop

        objFile.Close
    End If

    TextFileFromServer = sList
End Sub

Function GetParamFromTxt(Keyword,Text)
    Dim FieldDelimiter,KeywordDelimiter
    Dim FieldEnd,KeywordStart,ValueStart,FieldLength

    FieldDelimiter = "/"
    KeywordDelimiter = ":"

    StrText=FieldDelimiter&Text&FieldDelimiter

    KeywordStart = InStr(StrText, FieldDelimiter & Keyword & KeywordDelimiter)

    If KeywordStart > 0 Then

        FieldEnd = InStr(KeywordStart + 1, StrText, FieldDelimiter)
        ValueStart = InStr(KeywordStart, StrText, KeywordDelimiter) + 1
        FieldLength = FieldEnd - ValueStart
        GetParamFromTxt = Mid(StrText, ValueStart, FieldLength)
    ElseIf Keyword = "" Then
        GetParamFromTxt=StrText
    Else
        GetParamFromTxt=""
    End If
End Function

Sub SetValuesWithDataCheck(sDestPOV, aSrcPOVs)
    bArvo = FALSE
    sSrcString = ""
    For Each sSrcPOV In aSrcPOVs
        If bArvo = FALSE Then

            bValue = HasDataCheck(sSrcPOV)
            If bValue = TRUE Then

                If Len(sSrcString) > 0 Then
                    sSrcString = sSrcString & "+(" & sSrcPOV & ")"
                Else
                    sSrcString = sSrcPOV
                End If
            End if
        End If
    Next

    If bArvo = TRUE Then
        sSrcString = ""
        For Each sSrcPOV In aSrcPOVs
            If Len(sSrcString) > 0 Then
                sSrcString = sSrcString & "+(" & sSrcPOV & ")"
            Else
                sSrcString = sSrcPOV
            End If
        Next
    End If

    If Len(sSrcString) > 0 Then

        HS.Exp sDestPOV & " = " & sSrcString
    End If
End Sub

Sub SetValuesWithDataUnit(sDestPOV, aSrcPOVs)
    iCheck = 0
    iCounter = 0
    sSrcString = ""

    For Each sSrcPOV In aSrcPOVs
        sSign = ""
        sPOV = sSrcPOV

        If InStr(sDestPOV, "C1#") > 0 And InStr(sSrcPOV, "C1#") = 0 Then
            sPOV = sPOV & ".C1#CUSTOM1_TOP"
        End If
        If InStr(sDestPOV, "C2#") > 0 And InStr(sSrcPOV, "C2#") = 0 Then
            sPOV = sPOV & ".C2#CUSTOM2_TOP"
        End If
        If InStr(sDestPOV, "C3#") > 0 And InStr(sSrcPOV, "C3#") = 0 Then
            sPOV = sPOV & ".C3#CUSTOM3_TOP"
        End If
        If InStr(sDestPOV, "C4#") > 0 And InStr(sSrcPOV, "C4#") = 0 Then
            sPOV = sPOV & ".C4#CUSTOM4_TOP"
        End If
        If InStr(sDestPOV, "I#") > 0 And InStr(sSrcPOV, "I#") = 0 Then
            sPOV = sPOV & ".I#[ICP Top]"
        End If
        If Left(sSrcPOV, 1) = "-" Then
            sSign = "-"
            sPOV = Right(sPOV, Len(sPOV) - 1)
        End If

        Set DataUnit = HS.OpenDataUnit(sPOV)
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
            If HS.IsZero(dData) = FALSE Then
                sDim = ""
                If InStr(sPOV, "C1#") = 0 Then
                    sDim = sDim & ".C1#" & StrC1
                End If
                If InStr(sPOV, "C2#") = 0 Then
                    sDim = sDim & ".C2#" & StrC2
                End If
                If InStr(sPOV, "C3#") = 0 Then
                    sDim = sDim & ".C3#" & StrC3
                End If
                If InStr(sPOV, "C4#") = 0 Then
                    sDim = sDim & ".C4#" & StrC4
                End If
                If InStr(sPOV, "I#") = 0 Then
                    sDim = sDim & ".I#" & StrICP
                End If

                iCheck = iCheck + 1
                If iCounter > 0 Then
                    HS.Exp sDestPOV & sDim & " = " & sDestPOV & sDim & " + (" & sSign & SPOV & sDim & ")"
                Else
                    HS.Exp sDestPOV & sDim & " = " & sSign & SPOV & sDim
                End If
            End If
        Next

        iCounter = iCounter + 1
    Next
End Sub

Function HasDataCheck(sSrcRow)
    bArvo = FALSE

    sPOV = FillSourceDimensions(sSrcRow)

    dData = HS.GetCellNoData(sPOV, bValue)
    If HS.IsZero(dData) = FALSE Then
        bArvo = TRUE
    ElseIf bValue = FALSE Then
        sPOV = sSrcRow
        If Left(sPOV, 1) = "-" Then
            sPOV = Right(sSrcRow, Len(sSrcRow)-1)
        End If

        Set DataUnit = HS.OpenDataUnit(sPOV)
        NumItems = DataUnit.GetNumItems
        For i = 0 To NumItems - 1
            If bArvo = FALSE Then
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                If HS.IsZero(dData) = FALSE Then
                    bArvo = TRUE
                End If
            End If
        Next
    End If

    HasDataCheck = bArvo
End Function

Function FillSourceDimensions(sSrcPOV)
    sPOV = sSrcPOV

    If InStr(sSrcPOV, "C1#") = 0 Then
        sPOV = sPOV & ".C1#CUSTOM1_TOP"
    End If
    If InStr(sSrcPOV, "C2#") = 0 Then
        sPOV = sPOV & ".C2#CUSTOM2_TOP"
    End If
    If InStr(sSrcPOV, "C3#") = 0 Then
        sPOV = sPOV & ".C3#CUSTOM3_TOP"
    End If
    If InStr(sSrcPOV, "C4#") = 0 Then

            sPOV = sPOV & ".C4#CUSTOM4_TOP"

    End If
    If InStr(sSrcPOV, "I#") = 0 Then
        sPOV = sPOV & ".I#[ICP Top]"
    End If
    If Left(sSrcPOV, 1) = "-" Then
        sPOV = Right(sPOV, Len(sPOV) - 1)
    End If

    FillSourceDimensions = sPOV
End Function

Sub WriteDataBehindNoInput(StrScenario,StrPeriod,StrEntity,IntYear,bIsBase,StrValue,strApp)

    If bIsBase = True and (StrValue = "<Entity Currency>" or StrValue = "[None]") Then

        LogFilePath = "D:\1_Cargotec_material\3_HFM_WriteToFile\WriteDataBehindNoInput\Logs"

        ActivateLoadBehindNoInput = HS.GetCell("E#ADMIN_ENTITY.Y#2039.P#Dec.V#EUR.A#LOAD_DATA_BEHIND_NOINPUT_ACTIVATION.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

        If (ActivateLoadBehindNoInput = 1 and StrEntity = "ADMIN_ENTITY") or ActivateLoadBehindNoInput = 2 or ActivateLoadBehindNoInput = 3 Then

            If ActivateLoadBehindNoInput = 1 Then StrMODE = "SCAN" Else StrMODE = "LOAD"

            If StrMODE = "LOAD" and ActivateLoadBehindNoInput = 2 Then Accumulate = False Else Accumulate = True

            LogFileNameIdentifier = HS.GetCellText("E#ADMIN_ENTITY.Y#2039.P#Dec.V#EUR.A#LOAD_DATA_BEHIND_NOINPUT_ACTIVATION.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

            If StrMODE = "SCAN" and LogFileNameIdentifier = "" Then
                Err.raise -1, "You have activated the SCAN for load behind the noinput (A#LOAD_DATA_BEHIND_NOINPUT_ACTIVATION) by entering 1 into the activation account, but you have not specified the log file name into the same account "&_
                "as cell text (POV:E#ADMIN_ENTITY.Y#2039.P#Dec.V#EUR.A#LOAD_DATA_BEHIND_NOINPUT_ACTIVATION.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]", ""
            End If

            If LogFileNameIdentifier = "" Then LogFileNameIdentifier = "LoadBehindNoInput"

            Call ReadTextFileLineByLine("D:\1_Cargotec_material\3_HFM_WriteToFile\WriteDataBehindNoInput\WriteBehindNoinput.txt",TextFileFromServer)

            Counter = 0
            LineCount = 1

            If IsArray(TextFileFromServer) = True Then

                Call ReadTextFileLineByLine("D:\1_Cargotec_material\3_HFM_WriteToFile\WriteDataBehindNoInput\STOP_WriteBehindNoinput.txt",StopFile)

                EntityAlreadyLoaded = False
                If IsArray(StopFile) = True    Then
                    For each srow in StopFile
                        If srow = IntYear&"_"&StrPeriod&"_"&StrEntity Then
                            EntityAlreadyLoaded = True
                            Exit Sub
                        End If
                    Next
                End If

                Call WriteToSpecifiedFileAndSpefiedPath(IntYear&"_"&StrPeriod&"_"&StrEntity,"D:\1_Cargotec_material\3_HFM_WriteToFile\WriteDataBehindNoInput\","STOP_WriteBehindNoinput.txt")

                For each DataRow in TextFileFromServer

                    RowHasDataForCurrPOV = False
                    If DataRow <> "" Then
                        If Ucase(DataRow) = "!DATA" Then
                            DataType = "Data"
                        ElseIf Ucase(DataRow) = "!DESCRIPTIONS" Then
                            DataType = "CellText"
                        Else
                            RowItems = Split(DataRow,";")

                            ItemNo = 0
                            For each sItems in RowItems
                                Redim Preserve DataFile(24,Counter)

                                If ItemNo = 0 Then sScenario = trim(sItems)
                                If ItemNo = 1 Then sYear = trim(sItems)
                                If ItemNo = 2 Then sPeriod = trim(sItems)
                                If ItemNo = 3 Then sView = trim(sItems)
                                If ItemNo = 4 Then sEntity = trim(sItems)

                                If ItemNo = 4 Then
                                    If StrMODE = "LOAD" Then

                                        If Ucase(sScenario) = Ucase(StrScenario) and CInt(sYear) = CInt(IntYear) and Ucase(sPeriod) = UCase(StrPeriod) and Ucase(sEntity) = Ucase(StrEntity) Then
                                            RowHasDataForCurrPOV = True
                                        End If
                                    ElseIf StrMODE = "SCAN" Then
                                        RowHasDataForCurrPOV = True
                                    End If
                                End If

                                If ItemNo > 4 and RowHasDataForCurrPOV = False Then Exit For

                                If RowHasDataForCurrPOV = True Then

                                    If ItemNo <= 4 Then
                                        DataFile(0,Counter) = sScenario
                                        DataFile(1,Counter) = sYear
                                        DataFile(2,Counter) = sPeriod
                                        DataFile(3,Counter) = sView
                                        DataFile(4,Counter) = sEntity
                                    End If

                                    If ItemNo = 5 Then DataFile(5,Counter) = trim(sItems)
                                    If ItemNo = 6 Then DataFile(6,Counter) = trim(sItems)
                                    If ItemNo = 7 Then DataFile(7,Counter) = trim(sItems)
                                    If ItemNo = 8 Then DataFile(8,Counter) = trim(sItems)
                                    If ItemNo = 9 Then DataFile(9,Counter) = trim(sItems)
                                    If ItemNo = 10 Then DataFile(10,Counter) = trim(sItems)
                                    If ItemNo = 11 Then DataFile(11,Counter) = trim(sItems)
                                    If ItemNo = 12 Then
                                        dData = trim(sItems)
                                        If Instr(dData,",") Then
                                            dData = Replace(dData,",",".")
                                        End If
                                        DataFile(12,Counter) = dData
                                    End If
                                    If ItemNo = 13 Then DataFile(13,Counter) = trim(sItems)
                                    If ItemNo = 14 Then DataFile(14,Counter) = trim(sItems)
                                    If ItemNo = 15 Then DataFile(15,Counter) = trim(sItems)
                                    If ItemNo = 16 Then DataFile(16,Counter) = trim(sItems)
                                    If ItemNo = 17 Then DataFile(17,Counter) = trim(sItems)
                                    If ItemNo = 18 Then DataFile(18,Counter) = trim(sItems)
                                    If ItemNo = 19 Then DataFile(19,Counter) = trim(sItems)
                                    If ItemNo = 20 Then DataFile(20,Counter) = trim(sItems)
                                    If ItemNo = 21 Then DataFile(21,Counter) = trim(sItems)
                                    If ItemNo = 22 Then DataFile(22,Counter) = trim(sItems)
                                    If ItemNo = 22 Then DataFile(23,Counter) = DataType
                                    If ItemNo = 22 Then DataFile(24,Counter) = LineCount
                                End If

                                ItemNo = ItemNo + 1
                            Next

                            If RowHasDataForCurrPOV = True Then Counter = Counter + 1
                            LineCount = LineCount + 1
                        End If
                    End If

                Next
            End If

            Redim Preserve DataFile(24,Counter-1)

            ValidCounter = 0    : InvalidCounter = 0    : CalcPovCounter = 0
            RowsForCurrPOV = ubound(DataFile,2)
            If RowsForCurrPOV >= 0 Then
                Currlist = HS.Custom1.List("","[Currencies]")
                For w = 0 to RowsForCurrPOV

                    sScenario=DataFile(0,w)            :    sYear=DataFile(1,w)                :        sPeriod=DataFile(2,w)
                    sView=DataFile(3,w)                :    sEntity=DataFile(4,w)            :        sValue=DataFile(5,w)
                    sAccount=DataFile(6,w)            :    sICP=DataFile(7,w)                :        sC1=DataFile(8,w)
                    sC2=DataFile(9,w)                :    sC3=DataFile(10,w)                :        sC4=DataFile(11,w)
                    sData=DataFile(12,w)            :    sUserName=DataFile(13,w)        :        sEntityDesc=DataFile(14,w)
                    sAccountDesc=DataFile(15,w)        :    sICPDEsc=DataFile(16,w)            :        sServerName=DataFile(17,w)
                    sActivity=DataFile(18,w)        :    sUserDisplayName=DataFile(19,w)    :        sComment=DataFile(20,w)
                    sApplication=DataFile(21,w)        :    sCellText=DataFile(22,w)        :        DataType=DataFile(23,w)
                    LineNumber=DataFile(24,w)

                    If DataType = "Data" Then

                        DeffCurr = HS.Entity.DefCurrency(sEntity)
                        If DeffCurr = "" Then DeffCurr = "[None]"

                        If DeffCurr <> sValue and sValue <> "<Entity Currency>" Then
                            bIsValidDest = False
                        ElseIf sC2 = "ALL" Then
                            bIsValidDest = False
                        ElseIf IsItemInList(sC1,Currlist) = True Then
                            If sC1 <> "EUR" Then
                                bIsValidDest = False
                            Else
                                bIsValidDest = True
                            End if
                        Else
                            bIsValidDest = HS.IsValidDest("E#"&sEntity&".A#"&sAccount&".I#"&sICP&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&".V#"&sValue)
                        End If
                    Else
                        bIsValidDest = True
                    End If

                    If bIsValidDest = True Then
                        Redim Preserve ValidDataFile(24,ValidCounter)
                        ValidDataFile(0,ValidCounter)=sScenario            :    ValidDataFile(1,ValidCounter)=sYear                :        ValidDataFile(2,ValidCounter)=sPeriod
                        ValidDataFile(3,ValidCounter)=sView                :    ValidDataFile(4,ValidCounter)=sEntity            :        ValidDataFile(5,ValidCounter)=sValue
                        ValidDataFile(6,ValidCounter)=sAccount            :    ValidDataFile(7,ValidCounter)=sICP                :        ValidDataFile(8,ValidCounter)=sC1
                        ValidDataFile(9,ValidCounter)=sC2                :    ValidDataFile(10,ValidCounter)=sC3                :        ValidDataFile(11,ValidCounter)=sC4
                        ValidDataFile(12,ValidCounter)=sData            :    ValidDataFile(13,ValidCounter)=sUserName        :        ValidDataFile(14,ValidCounter)=sEntityDesc
                        ValidDataFile(15,ValidCounter)=sAccountDesc        :    ValidDataFile(16,ValidCounter)=sICPDEsc            :        ValidDataFile(17,ValidCounter)=sServerName
                        ValidDataFile(18,ValidCounter)=sActivity        :    ValidDataFile(19,ValidCounter)=sUserDisplayName    :        ValidDataFile(20,ValidCounter)=sComment
                        ValidDataFile(21,ValidCounter)=sApplication        :    ValidDataFile(22,ValidCounter)=sCellText        :        ValidDataFile(23,ValidCounter)=DataType
                        ValidDataFile(24,ValidCounter)=LineNumber
                        ValidCounter = ValidCounter + 1

                        If StrMODE = "SCAN" Then
                            If DataType = "Data" Then
                                Call CheckIf_POV_IsCalculated(sAccount,sC1,sC2,sC3,sC4,Reason)

                                If Reason <> "" Then
                                    Redim Preserve CalcPovDataFile(25,CalcPovCounter)
                                    CalcPovDataFile(0,CalcPovCounter)=sScenario            :    CalcPovDataFile(1,CalcPovCounter)=sYear                :        CalcPovDataFile(2,CalcPovCounter)=sPeriod
                                    CalcPovDataFile(3,CalcPovCounter)=sView                :    CalcPovDataFile(4,CalcPovCounter)=sEntity            :        CalcPovDataFile(5,CalcPovCounter)=sValue
                                    CalcPovDataFile(6,CalcPovCounter)=sAccount            :    CalcPovDataFile(7,CalcPovCounter)=sICP                :        CalcPovDataFile(8,CalcPovCounter)=sC1
                                    CalcPovDataFile(9,CalcPovCounter)=sC2                :    CalcPovDataFile(10,CalcPovCounter)=sC3                :        CalcPovDataFile(11,CalcPovCounter)=sC4
                                    CalcPovDataFile(12,CalcPovCounter)=sData            :    CalcPovDataFile(13,CalcPovCounter)=sUserName        :        CalcPovDataFile(14,CalcPovCounter)=sEntityDesc
                                    CalcPovDataFile(15,CalcPovCounter)=sAccountDesc        :    CalcPovDataFile(16,CalcPovCounter)=sICPDEsc            :        CalcPovDataFile(17,CalcPovCounter)=sServerName
                                    CalcPovDataFile(18,CalcPovCounter)=sActivity        :    CalcPovDataFile(19,CalcPovCounter)=sUserDisplayName    :        CalcPovDataFile(20,CalcPovCounter)=sComment
                                    CalcPovDataFile(21,CalcPovCounter)=sApplication        :     CalcPovDataFile(22,CalcPovCounter)=sCellText        :        CalcPovDataFile(23,CalcPovCounter)=DataType
                                    CalcPovDataFile(24,CalcPovCounter)=LineNumber        :    CalcPovDataFile(25,CalcPovCounter)=Reason
                                    CalcPovCounter = CalcPovCounter + 1

                                End If
                            End If
                        End If
                    Else

                        Call CheckReasonForInvalidDestination(sPeriod,sEntity,sAccount,sICP,sC1,sC2,sC3,sC4,sValue,Reason)

                        If Reason = "" Then     Reason = "UNSPECIFIED ERROR"

                        Redim Preserve InvalidDataFile(25,InvalidCounter)
                        InvalidDataFile(0,InvalidCounter)=sScenario            :    InvalidDataFile(1,InvalidCounter)=sYear                :        InvalidDataFile(2,InvalidCounter)=sPeriod
                        InvalidDataFile(3,InvalidCounter)=sView                :    InvalidDataFile(4,InvalidCounter)=sEntity            :        InvalidDataFile(5,InvalidCounter)=sValue
                        InvalidDataFile(6,InvalidCounter)=sAccount            :    InvalidDataFile(7,InvalidCounter)=sICP                :        InvalidDataFile(8,InvalidCounter)=sC1
                        InvalidDataFile(9,InvalidCounter)=sC2                :    InvalidDataFile(10,InvalidCounter)=sC3                :        InvalidDataFile(11,InvalidCounter)=sC4
                        InvalidDataFile(12,InvalidCounter)=sData            :    InvalidDataFile(13,InvalidCounter)=sUserName        :        InvalidDataFile(14,InvalidCounter)=sEntityDesc
                        InvalidDataFile(15,InvalidCounter)=sAccountDesc        :    InvalidDataFile(16,InvalidCounter)=sICPDEsc            :        InvalidDataFile(17,InvalidCounter)=sServerName
                        InvalidDataFile(18,InvalidCounter)=sActivity        :    InvalidDataFile(19,InvalidCounter)=sUserDisplayName    :        InvalidDataFile(20,InvalidCounter)=sComment
                        InvalidDataFile(21,InvalidCounter)=sApplication        :     InvalidDataFile(22,InvalidCounter)=sCellText        :        InvalidDataFile(23,InvalidCounter)=DataType
                        InvalidDataFile(24,InvalidCounter)=LineNumber        :    InvalidDataFile(25,InvalidCounter)=Reason
                        InvalidCounter = InvalidCounter + 1

                    End If

                Next

                If StrMODE = "LOAD" Then
                    LoadCounter = 0

                    If IsEmpty(ValidDataFile) = False Then

                        FileName = StrMODE&"_dataauditexport_"&LogFileNameIdentifier&".csv"
                        ValidRows = ubound(ValidDataFile,2)

                        If Accumulate = True Then LoopCount = 1 Else LoopCount = 0

                        For j = 0 To LoopCount
                            For i = 0 to ValidRows
                                sScenario=ValidDataFile(0,i)            :    sYear=ValidDataFile(1,i)                :        sPeriod=ValidDataFile(2,i)
                                sView=ValidDataFile(3,i)                :    sEntity=ValidDataFile(4,i)                :        sValue=ValidDataFile(5,i)
                                sAccount=ValidDataFile(6,i)                :    sICP=ValidDataFile(7,i)                    :        sC1=ValidDataFile(8,i)
                                sC2=ValidDataFile(9,i)                    :    sC3=ValidDataFile(10,i)                    :        sC4=ValidDataFile(11,i)
                                sData=ValidDataFile(12,i)                :    sUserName=ValidDataFile(13,i)            :        sEntityDesc=ValidDataFile(14,i)
                                sAccountDesc=ValidDataFile(15,i)        :    sICPDEsc=ValidDataFile(16,i)            :        sServerName=ValidDataFile(17,i)
                                sActivity=ValidDataFile(18,i)            :    sUserDisplayName=ValidDataFile(19,i)    :        sComment=ValidDataFile(20,i)
                                sApplication=ValidDataFile(21,i)        :    sCellText=ValidDataFile(22,i)            :        DataType=ValidDataFile(23,i)
                                LineNumber=ValidDataFile(24,i)

                                If LoopCount = 1 and j = 0  Then
                                    If DataType = "Data" Then
                                        HS.Clear "W#"&sView&".V#"&sValue&".A#"&sAccount&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&".I#"&sICP
                                    End If
                                Else
                                    If DataType = "Data" Then
                                        If Ucase(sData) = "NODATA" Then
                                            HS.Clear "W#"&sView&".V#"&sValue&".A#"&sAccount&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&".I#"&sICP

                                        Else
                                            StrPOV = "W#"&sView&".V#"&sValue&".A#"&sAccount&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&".I#"&sICP

                                            Call HS.SetDataWithPOV(StrPOV, sData, Accumulate)
                                        End If

                                        sDate = FormatDateTime(Now)

                                        If sView = "YTD" Then

                                            txtStringToWrite = sScenario&";"&sYear&";"&sPeriod&";"&sView&";"&sEntity&";"&sValue&";"&sAccount&";"&sICP&";"&sC1&";"&sC2&";"&sC3&";"&sC4&";"&sData&";"&sComment&";;"&sAccountDesc&";"&sEntityDesc&";"&sICPDEsc&";"&sUserName&";"&sUserDisplayName&";"&sServerName&";"&sActivity&";"&sCellText&";"&sDate&";"&sApplication
                                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite,LogFilePath,FileName)

                                        Else

                                            sData_YTD = HS.GetCell("W#YTD.V#"&sValue&".A#"&sAccount&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&".I#"&sICP)
                                            txtStringToWrite = sScenario&";"&sYear&";"&sPeriod&";"&sView&";"&sEntity&";"&sValue&";"&sAccount&";"&sICP&";"&sC1&";"&sC2&";"&sC3&";"&sC4&";"&sData_YTD&";"&sComment&";;"&sAccountDesc&";"&sEntityDesc&";"&sICPDEsc&";"&sUserName&";"&sUserDisplayName&";"&sServerName&";"&sActivity&";"&sCellText&";"&sDate&";"&sApplication
                                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite,LogFilePath,FileName)

                                        End If

                                        LoadCounter = LoadCounter + 1
                                    Else

                                        StrPOV = "A#"&sAccount&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&".I#"&sICP

                                        HS.SetCellTextWithLabel StrPOV, "[Default]",sCellText
                                    End If
                                End If
                            Next
                        Next

                    End If

                    If IsEmpty(InvalidDataFile) = False Then
                        FileName = StrMODE&"_errorlog_"&LogFileNameIdentifier&".txt"

                        Call WriteToSpecifiedFileAndSpefiedPath("",LogFilePath,FileName)
                        Call WriteToSpecifiedFileAndSpefiedPath("****************** Invalid data rows ****************** ",LogFilePath,FileName)
                        Call WriteToSpecifiedFileAndSpefiedPath("",LogFilePath,FileName)

                        InvalidRows = ubound(InvalidDataFile,2)
                        For i = 0 to InvalidRows
                            sScenario=InvalidDataFile(0,i)            :    sYear=InvalidDataFile(1,i)                :        sPeriod=InvalidDataFile(2,i)
                            sView=InvalidDataFile(3,i)                :    sEntity=InvalidDataFile(4,i)            :        sValue=InvalidDataFile(5,i)
                            sAccount=InvalidDataFile(6,i)            :    sICP=InvalidDataFile(7,i)                :        sC1=InvalidDataFile(8,i)
                            sC2=InvalidDataFile(9,i)                :    sC3=InvalidDataFile(10,i)                :        sC4=InvalidDataFile(11,i)
                            sData=InvalidDataFile(12,i)                :    sUserName=InvalidDataFile(13,i)            :        sEntityDesc=InvalidDataFile(14,i)
                            sAccountDesc=InvalidDataFile(15,i)        :    sICPDEsc=InvalidDataFile(16,i)            :        sServerName=InvalidDataFile(17,i)
                            sActivity=InvalidDataFile(18,i)            :    sUserDisplayName=InvalidDataFile(19,i)    :        sComment=InvalidDataFile(20,i)
                            sApplication=InvalidDataFile(21,i)        :     sCellText=InvalidDataFile(22,i)            :        DataType=InvalidDataFile(23,i)
                            LineNumber=InvalidDataFile(24,i)        :    Reason=InvalidDataFile(25,i)

                            txtStringToWrite1 = "LineNumber: "&LineNumber
                            txtStringToWrite2 = sScenario&";"&sYear&";"&sPeriod&";"&sView&";"&sEntity&";"&sValue&";"&sAccount&";"&sICP&";"&sC1&";"&sC2&";"&sC3&";"&sC4&";"&sData
                            txtStringToWrite3 = sUserName&";"&sEntityDesc&";"&sAccountDesc&";"&sICPDEsc&";"&sServerName&";"&sActivity&";"&sUserDisplayName&";"&sComment&";"&sApplication&";"&sCellText&";"&DataType
                            txtStringToWrite4 = Reason
                            txtStringToWrite5 = ""

                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite1,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite2,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite3,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite4,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite5,LogFilePath,FileName)
                        Next
                    End If
                Else

                    If IsEmpty(ValidDataFile) = False Then
                        ValidRows = ubound(ValidDataFile,2)
                        For i = 0 to ValidRows
                            sScenario=ValidDataFile(0,i)            :    sYear=ValidDataFile(1,i)                :        sPeriod=ValidDataFile(2,i)
                            sView=ValidDataFile(3,i)                :    sEntity=ValidDataFile(4,i)                :        sValue=ValidDataFile(5,i)
                            sAccount=ValidDataFile(6,i)                :    sICP=ValidDataFile(7,i)                    :        sC1=ValidDataFile(8,i)
                            sC2=ValidDataFile(9,i)                    :    sC3=ValidDataFile(10,i)                    :        sC4=ValidDataFile(11,i)
                            sData=ValidDataFile(12,i)                :    sUserName=ValidDataFile(13,i)            :        sEntityDesc=ValidDataFile(14,i)
                            sAccountDesc=ValidDataFile(15,i)        :    sICPDEsc=ValidDataFile(16,i)            :        sServerName=ValidDataFile(17,i)
                            sActivity=ValidDataFile(18,i)            :    sUserDisplayName=ValidDataFile(19,i)    :        sComment=ValidDataFile(20,i)
                            sApplication=ValidDataFile(21,i)        :    sCellText=ValidDataFile(22,i)            :        DataType=ValidDataFile(23,i)
                            LineNumber=ValidDataFile(24,i)

                            If DataType = "Data" Then

                                FileName = StrMODE&"_dataauditexport_"&LogFileNameIdentifier&".csv"
                                txtStringToWrite = sScenario&";"&sYear&";"&sPeriod&";"&sView&";"&sEntity&";"&sValue&";"&sAccount&";"&sICP&";"&sC1&";"&sC2&";"&sC3&";"&sC4&";"&sData&";"&sComment&";;"&sAccountDesc&";"&sEntityDesc&";"&sICPDEsc&";"&sUserName&";"&sUserDisplayName&";"&sServerName&";"&sActivity&";"&sCellText&";"&sDate&";"&sApplication&";"&LineNumber
                                Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite,LogFilePath,FileName)
                            End If
                        Next
                    End If

                    FileName = StrMODE&"_errorlog_"&LogFileNameIdentifier&".txt"

                    If IsEmpty(InvalidDataFile) = False Then
                        Call WriteToSpecifiedFileAndSpefiedPath("",LogFilePath,FileName)
                        Call WriteToSpecifiedFileAndSpefiedPath("****************** Invalid data rows ****************** ",LogFilePath,FileName)
                        Call WriteToSpecifiedFileAndSpefiedPath("",LogFilePath,FileName)

                        InvalidRows = ubound(InvalidDataFile,2)
                        For i = 0 to InvalidRows
                            sScenario=InvalidDataFile(0,i)            :    sYear=InvalidDataFile(1,i)                :        sPeriod=InvalidDataFile(2,i)
                            sView=InvalidDataFile(3,i)                :    sEntity=InvalidDataFile(4,i)            :        sValue=InvalidDataFile(5,i)
                            sAccount=InvalidDataFile(6,i)            :    sICP=InvalidDataFile(7,i)                :        sC1=InvalidDataFile(8,i)
                            sC2=InvalidDataFile(9,i)                :    sC3=InvalidDataFile(10,i)                :        sC4=InvalidDataFile(11,i)
                            sData=InvalidDataFile(12,i)                :    sUserName=InvalidDataFile(13,i)            :        sEntityDesc=InvalidDataFile(14,i)
                            sAccountDesc=InvalidDataFile(15,i)        :    sICPDEsc=InvalidDataFile(16,i)            :        sServerName=InvalidDataFile(17,i)
                            sActivity=InvalidDataFile(18,i)            :    sUserDisplayName=InvalidDataFile(19,i)    :        sComment=InvalidDataFile(20,i)
                            sApplication=InvalidDataFile(21,i)        :     sCellText=InvalidDataFile(22,i)            :        DataType=InvalidDataFile(23,i)
                            LineNumber=InvalidDataFile(24,i)        :    Reason=InvalidDataFile(25,i)

                            txtStringToWrite1 = "LineNumber: "&LineNumber
                            txtStringToWrite2 = sScenario&";"&sYear&";"&sPeriod&";"&sView&";"&sEntity&";"&sValue&";"&sAccount&";"&sICP&";"&sC1&";"&sC2&";"&sC3&";"&sC4&";"&sData
                            txtStringToWrite3 = sUserName&";"&sEntityDesc&";"&sAccountDesc&";"&sICPDEsc&";"&sServerName&";"&sActivity&";"&sUserDisplayName&";"&sComment&";"&sApplication&";"&sCellText&";"&DataType
                            txtStringToWrite4 = Reason
                            txtStringToWrite5 = ""

                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite1,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite2,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite3,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite4,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite5,LogFilePath,FileName)
                        Next
                    End If

                    If IsEmpty(CalcPovDataFile) = False Then
                        Call WriteToSpecifiedFileAndSpefiedPath("",LogFilePath,FileName)
                        Call WriteToSpecifiedFileAndSpefiedPath("****************** Valid Data, but in Calculated POV ****************** ",LogFilePath,FileName)
                        Call WriteToSpecifiedFileAndSpefiedPath("",LogFilePath,FileName)

                        CalcPovDataRows = ubound(CalcPovDataFile,2)
                        For i = 0 to CalcPovDataRows
                            sScenario= CalcPovDataFile(0,i)            :    sYear=CalcPovDataFile(1,i)            :        sPeriod=CalcPovDataFile(2,i)
                            sView=CalcPovDataFile(3,i)                :    sEntity=CalcPovDataFile(4,i)        :        sValue=CalcPovDataFile(5,i)
                            sAccount=CalcPovDataFile(6,i)            :    sICP=CalcPovDataFile(7,i)            :        sC1=CalcPovDataFile(8,i)
                            sC2=CalcPovDataFile(9,i)                :    sC3=CalcPovDataFile(10,i)            :        sC4=CalcPovDataFile(11,i)
                            sData=CalcPovDataFile(12,i)                :    sUserName=CalcPovDataFile(13,i)        :        sEntityDesc=CalcPovDataFile(14,i)
                            sAccountDesc=CalcPovDataFile(15,i)        :    sICPDEsc=CalcPovDataFile(16,i)        :        sServerName=CalcPovDataFile(17,i)
                            sActivity=CalcPovDataFile(18,i)            :    sUserDisplayName=CalcPovDataFile(19,i)    :    sComment=CalcPovDataFile(20,i)
                            sApplication=CalcPovDataFile(21,i)        :     sCellText=CalcPovDataFile(22,i)        :        DataType=CalcPovDataFile(23,i)
                            LineNumber=CalcPovDataFile(24,i)        :     Reason=CalcPovDataFile(25,i)

                            txtStringToWrite1 = "LineNumber: "&LineNumber
                            txtStringToWrite2 = sScenario&";"&sYear&";"&sPeriod&";"&sView&";"&sEntity&";"&sValue&";"&sAccount&";"&sICP&";"&sC1&";"&sC2&";"&sC3&";"&sC4&";"&sData
                            txtStringToWrite3 = sUserName&";"&sEntityDesc&";"&sAccountDesc&";"&sICPDEsc&";"&sServerName&";"&sActivity&";"&sUserDisplayName&";"&sComment&";"&sApplication&";"&sCellText&";"&DataType
                            txtStringToWrite4 = Reason
                            txtStringToWrite5 = ""

                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite1,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite2,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite3,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite4,LogFilePath,FileName)
                            Call WriteToSpecifiedFileAndSpefiedPath(txtStringToWrite5,LogFilePath,FileName)
                        Next
                    End If
                End If
            End If
        End If
    End If
End Sub

Sub CheckIf_POV_IsCalculated(sAccount,sC1,sC2,sC3,sC4,Reason)
    Reason = ""
    Counter = 0

    AccIsCalculated = HS.Account.IsCalculated(sAccount)
    If AccIsCalculated = True Then
        Counter = Counter + 1
        StrReason = "Calculated POV:" : StrReason = StrReason&" "&Counter&". Account is calculated -> "&sAccount
    End If

    C1_UD = GetUD(sC1, "Custom1", "")
    If Instr(Ucase(C1_UD),"/CALC/") > 0 Then
        Counter = Counter + 1
        If Counter = 1 Then
            StrReason = "Calculated POV:" : StrReason = StrReason&" "&Counter&". Custom1 is calculated -> "&sC1
        Else
            StrReason = StrReason&" "&Counter&". Custom1 is calculated -> "&sC1
        End If
    End If

    C2_UD = GetUD(sC2, "Custom2", "")
    If Instr(Ucase(C2_UD),"/CALC/") > 0 Then
        Counter = Counter + 1
        If Counter = 1 Then
            StrReason = "Calculated POV:" : StrReason = StrReason&" "&Counter&". Custom2 is calculated -> "&sC2
        Else
            StrReason = StrReason&" "&Counter&". Custom2 is calculated -> "&sC2
        End If
    End If

    C3_UD = GetUD(sC3, "Custom3", "")
    If Instr(Ucase(C3_UD),"/CALC/") > 0 Then
        Counter = Counter + 1
        If Counter = 1 Then
            StrReason = "Calculated POV:" : StrReason = StrReason&" "&Counter&". Custom3 is calculated -> "&sC3
        Else
            StrReason = StrReason&" "&Counter&". Custom3 is calculated -> "&sC3
        End If
    End If

    Reason = StrReason
End Sub

Sub CheckReasonForInvalidDestination(sPeriod,sEntity,sAccount,sICP,sC1,sC2,sC3,sC4,sValue,Reason)
    Reason = ""
    Counter = 0

    StrReason = "Error:"
    MbrFAIL = False

    AllEntities = HS.Entity.List("","")
    AllAccounts = HS.Account.List("","")
    AllC1s = HS.Custom1.List("","")
    AllC2s = HS.Custom2.List("","")
    Currencies = HS.Custom2.List("","[Currencies]")
    AllC3s = HS.Custom3.List("","")
    AllICPs = HS.ICP.List("","")

    If IsItemInList(sEntity,AllEntities) = False Then    Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Not valid Entity member -> "&sEntity    :    MbrFAIL = True

    If IsItemInList(sAccount,AllAccounts) = False Then     Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Not valid Account member -> "&sAccount    :    MbrFAIL = True

    If IsItemInList(sC1,AllC1s) = False    and IsItemInList(sC1,Currencies) = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Not valid Custom1 member -> "&sC1    :    MbrFAIL = True

    If IsItemInList(sC2,AllC2s) = False    and IsItemInList(sC2,Currencies) = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Not valid Custom2 member -> "&sC2    :    MbrFAIL = True

    If IsItemInList(sC3,AllC3s) = False Then             Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Not valid Custom3 member -> "&sC3    :    MbrFAIL = True

    If IsItemInList(sICP,AllICPs) = False Then             Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Not valid ICP member -> "&sICP    :    MbrFAIL = True

    If MbrFAIL = False Then

        x = GetPeriodNumber(sPeriod)
        If x = "" Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Period name is not valid base member -> "&sPeriod

        AccIsBase = HS.Account.IsBase("",sAccount)
        If AccIsBase = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Account is not valid base member -> "&sAccount

        If sICP <> "[ICP None]" Then
            AccIsICP = HS.Account.IsICP(sAccount)
            If AccIsICP = False Then
                Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Account is not an ICP account -> "&sAccount
             End If

            ICPIsICP = HS.Entity.IsICP(sICP)
            If ICPIsICP = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". ICP is not valid ICP member -> "&sICP
        End If

        C1_Top = HS.Account.C1Top(sAccount)
        If C1_Top = "" Then C1_Top = "[None]"
        If HS.Custom1.IsBase(C1_Top,sC1) = False And IsItemInList(sC1,Currencies) = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Account Custom1Top restricts input for Custom1 member -> "&sC1

        C2_Top = HS.Account.C2Top(sAccount)
        If C2_Top = "" Then C2_Top = "[None]"
        If HS.Custom2.IsBase(C2_Top,sC2) = False And IsItemInList(sC2,Currencies) = False  Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Account Custom2Top restricts input for Custom2 member -> "&sC2

        C3_Top = HS.Account.C3Top(sAccount)
        If C3_Top = "" Then C3_Top = "[None]"
        If HS.Custom3.IsBase(C3_Top,sC3) = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Account Custom3Top restricts input for Custom3 member -> "&sC3

        C1IsBase = HS.Custom1.IsBase("",sC1)
        If C1IsBase = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Custom1 is not valid base member -> "&sC1
        If IsItemInList(sC1,Currencies) = True and sC1 <> "EUR" Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Custom1 currency member should be EUR -> "&sC1

        C2IsBase = HS.Custom2.IsBase("",sC2)
        If C2IsBase = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Custom2 is not valid base member -> "&sC2
        If sC2 = "ALL" Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Custom2 member is not allowed to be used in HFM rule script, unable to do the load via rule -> "&sC2

        C3IsBase = HS.Custom3.IsBase("",sC3)
        If C3IsBase = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Custom3 is not valid base member -> "&sC3

        EntIsBase = HS.Entity.IsBase("",sEntity)
        If EntIsBase = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Entity is not valid base member -> "&sEntity

        If Ucase(sICP) = "[ICP TOP]" or Ucase(sICP) = "[ICP ENTITIES]" Then ICPIsBase = False Else ICPIsBase = True
        If ICPIsBase = False Then Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". ICP is not valid base member -> "&sICP

        DeffCurr = HS.Entity.DefCurrency(sEntity)
        If DeffCurr = "" Then DeffCurr = "[None]"
        If DeffCurr <> sValue and sValue <> "<Entity Currency>" Then
            Counter = Counter + 1     :    StrReason = StrReason&" "&Counter&". Value is not valid, default currency for entity is "&DeffCurr&" -> "&sValue
        End If

    End If

    Reason = StrReason
End Sub

Sub Dynamic()

    HS.Dynamic "A#KF02 = A#KF01 / A#KF22 * 100"

    HS.Dynamic "A#KF04 = A#KF22 / A#KF03"

    HS.Dynamic "A#KF04B = A#KF22 / A#KF03B"

    HS.Dynamic "A#KF05 = A#KF01 / A#KF03 * 100"

    HS.Dynamic "A#KF05B = A#KF01 / A#KF03B * 100"

    HS.Dynamic "A#KF07 = A#KF08 / A#KF01 * 100"

    HS.Dynamic "A#KF09 = A#KF27 / A#KF03 * 100"

    HS.Dynamic "A#KF09B = A#KF27 / A#KF03B * 100"

    HS.Dynamic "A#KF10 = A#KF37 / A#KF03 * 100"
    HS.Dynamic "A#KF17 = A#KF39 / A#KF03 * 100"

    HS.Dynamic "A#KF10B = A#KF37 / A#KF03B * 100"
    HS.Dynamic "A#KF17B = A#KF39 / A#KF03B * 100"

    HS.Dynamic "A#KF11 = (A#AR20-A#AR18) / A#AR20"

    HS.Dynamic "A#KF15 = A#L335E / A#A234"

    HS.Dynamic "A#KF19 = A#KF06 / A#KF22 * 365"

    HS.Dynamic "A#KF20 = 12 / HS.Period.Number * A#RM10.I#[ICP Top].C2#CUSTOM2_TOP / A#YAVEHC004"

    HS.Dynamic "A#KF35 = 12 / HS.Period.Number * A#RM93 / A#YAVEHC004"
    HS.Dynamic "A#KF43 = A#RM30.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"
    HS.Dynamic "A#KF45 = A#RM50.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"
    HS.Dynamic "A#KF46 = A#RM70.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF69 = A#KF64.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"
    HS.Dynamic "A#KF83 = A#KF77.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF74 = A#KF73.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF70 = A#KF66.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"
    HS.Dynamic "A#KF84 = A#KF78.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF87 = A#KF78.I#[ICP Top].C2#CUSTOM2_TOP / A#KF12.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF71 = A#KF67.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF16 = A#KF67.I#[ICP Top].C2#CUSTOM2_TOP / A#KF12.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF72 = A#KF68.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10_3m.I#[ICP Top].C2#CUSTOM2_TOP * 90"

    HS.Dynamic "A#KF58 = A#KF52 / A#KF22 * 365"

    HS.Dynamic "A#KF59 = A#KF53 / A#KF22 * 365"

    HS.Dynamic "A#KF60 = A#KF54 / A#KF22 * 365"

    HS.Dynamic "A#KF14 = A#KF54 / A#KF13 * 365"

    HS.Dynamic "A#KF14_C = A#KF54_C / A#KF13_C * 365"

    HS.Dynamic "A#KF61 = A#KF55 / A#KF22 * 365"

    HS.Dynamic "A#KF62 = A#KF56 / A#KF22 * 365"

    HS.Dynamic "A#KF63 = A#KF57 / A#KF22 * 365"

    HS.Dynamic "A#KF81 = A#KF75 / A#KF22 * 365"

    HS.Dynamic "A#KF82 = A#KF76 / A#KF22 * 365"

    HS.Dynamic "A#KF86 = A#KF76 / A#KF13 * 365"

    HS.Dynamic "A#N1390C = A#N1390B / A#N1327"

    HS.Dynamic "A#NC15090 = A#N15090 / A#AR18 * 100"
    HS.Dynamic "A#NC15091 = A#N15091 / A#A315 * 100"
    HS.Dynamic "A#NC15092 = A#N15092 / A#A357 * 100"

    HS.Dynamic "A#NC15080 = A#N15080 / A#AR11 * 100"
    HS.Dynamic "A#NC15081 = A#N15081 / A#AR12 * 100"
    HS.Dynamic "A#NC15082 = A#N15082 / A#AR13 * 100"
    HS.Dynamic "A#NC15083 = A#N15083 / A#AR14 * 100"
    HS.Dynamic "A#NC15084 = A#N15084 / A#AR15 * 100"
    HS.Dynamic "A#NC15085 = A#N15085 / A#AR16 * 100"
    HS.Dynamic "A#NC15086 = A#N15086 / A#AR19 * 100"
    HS.Dynamic "A#NC15087 = A#N15087 / A#AR17 * 100"
    HS.Dynamic "A#NC15089 = A#N15089 / A#AR22 * 100"

    HS.Dynamic "A#AVG_EFFTAX = A#R93NET / A#R90.I#[ICP Top].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF24 = A#KF23 / A#KF22 * 100"

    HS.Dynamic "A#KF26 = A#KF25 / A#KF22 * 100"

    HS.Dynamic "A#KF28 = A#KF27 / A#KF22 * 100"

    HS.Dynamic "A#KF38 = A#KF37 / A#KF22 * 100"
    HS.Dynamic "A#KF21 = A#KF39 / A#KF22 * 100"

    HS.Dynamic "A#KF29 = A#RM32 + A#RM34 + A#RM36"

    HS.Dynamic "A#KF30 = (A#RM32.I#[ICP Top].C2#CUSTOM2_TOP + A#RM34.I#[ICP Top].C2#CUSTOM2_TOP + A#RM36.I#[ICP Top].C2#CUSTOM2_TOP) / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF31 = A#RM55.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF32 = A#RM53.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF33 = A#RM51.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF34 = A#KF65.I#[ICP Top].C2#CUSTOM2_TOP / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF40 = A#RM70 + A#RM68"

    HS.Dynamic "A#KF41 = (A#RM70.I#[ICP Top].C2#CUSTOM2_TOP + A#RM68.I#[ICP Top].C2#CUSTOM2_TOP) / A#RM10.I#[ICP Top].C2#CUSTOM2_TOP * 100"

    HS.Dynamic "A#KF101 = (A#R90_12M + A#R93NET_12M) / A#KF107 * 100"

    HS.Dynamic "A#KF102 = (A#R90_12M + A#R813E_12m + A#R814_12M + A#R833E_12M - A#R816_12M - A#R82NET_12M) / (A#KF107 + A#KF108) * 100"

    HS.Dynamic "A#KF113 = (A#R90_12M - A#KF109 + A#R813E_12m + A#R814_12M + A#R833E_12M - A#R816_12M - A#R82NET_12M) / (A#KF107 + A#KF108) * 100"
    HS.Dynamic "A#KF114 = (A#R90_12M - A#KF115 + A#R813E_12m + A#R814_12M + A#R833E_12M - A#R816_12M - A#R82NET_12M) / (A#KF107 + A#KF108) * 100"

    HS.Dynamic "A#KF103 = A#L210 / (A#A495 - A#L330) * 100"

    HS.Dynamic "A#KF104 = A#CF800 - A#CF700"

    HS.Dynamic "A#KF105 = (A#CF800 - A#CF700) / A#L210 * 100"

    HS.Dynamic "A#KF106 = (A#CF800 - A#CF700) / A#KF100"

    HS.Dynamic "A#KF110 = A#R95 / A#EXTKF02 * 1000"

    HS.Dynamic "A#KF111 = A#R95 / A#EXTKF03 * 1000"

    HS.Dynamic "A#KF112 = (A#L210 - A#L205) / A#EXTKF04 * 1000"

    HS.Dynamic "A#KF116 = A#R951 / A#EXTKF02 * 1000"

    HS.Dynamic "A#KF118 = A#R951 / A#EXTKF03 * 1000"

    HS.Dynamic "A#GMOBTECY = A#GPOBTECY / A#MTOTOBCY *100"
    HS.Dynamic "A#GMOBTICY = A#GPOBTICY / A#MINTOBCY *100"
    HS.Dynamic "A#GMOBTTOTCY = A#GPOBTTOTCY / A#MTOTALOBCY *100"

    HS.Dynamic "A#GMORT = A#GPORT / A#MORT.C2#COUNTRIES * 100"
    HS.Dynamic "A#GMOBT = A#GPOBT.I#[ICP Top] / A#MOBT.I#[ICP Top] *100"

    HS.Dynamic "A#GMORTE = A#GPORTE / A#MORE * 100"
    HS.Dynamic "A#GMORTI = A#GPORTI / A#MORI * 100"
    HS.Dynamic "A#GMOBTE = A#GPOBTE / A#MOBE * 100"
    HS.Dynamic "A#GMOBTI = A#GPOBTI / A#MOBI * 100"

    For i = 1 to 4

        HS.Dynamic "A#GMOBTECY" & i & " = 100 * A#GPOBTECY" & i & " / A#MTOTOBCY" & i

        HS.Dynamic "A#GMOBTICY" & i & " = 100 * A#GPOBTICY" & i & " / A#MINTOBCY" & i

        HS.Dynamic "A#GMOBTTOTCY" & i & " = 100 * A#GPOBTTOTCY" & i & " / A#MTOTALOBCY" & i

        HS.Dynamic "A#GMOBTECYSSS" & i & " = 100 * A#GPOBTECYSSS" & i & " / A#STOTOBCY" & i
    Next

    HS.Dynamic "A#SUST_SALES_PERCENT.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = A#SUST_SALES.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#SUST_PORTF_TOTAL.I#[ICP Top] / A#RM01E.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top] * 100"
    HS.Dynamic "A#SUST_ORDERS_PERCENT.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = A#SUST_ORDERS.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#SUST_PORTF_TOTAL.I#[ICP Top] / A#MORE.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top] * 100"
    HS.Dynamic "A#SUST_OPEX_PERCENT.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = A#SUST_OPEX.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#SUST_PORTF_TOTAL.I#[ICP Top] / A#N3720.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top] * 100"
    HS.Dynamic "A#SUST_CAPEX_PERCENT.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = A#SUST_CAPEX.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#SUST_PORTF_TOTAL.I#[ICP Top] / A#OC40.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top] * 100"

    HS.Dynamic "A#SUST_GROSS_MARGIN_PERCENT.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None] = A#SUST_GROSS_MARGIN.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#SUST_PORTF_TOTAL.I#[ICP Top] / A#SUST_SALES.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#CUSTOM4_TOP.I#[ICP Top] * 100"

End Sub

Sub Translate()
    dAVG = HS.GetRate("A#AVG_RATES")
    dEND = HS.GetRate("A#END_RATES")
    dPRE = HS.GetRate("A#PRE_RATES")

    StrScenario = HS.Scenario.member()
    IntYear = HS.Year.member()
    StrEntity = HS.Entity.Member()
    bIsBase = HS.Entity.IsBase("","")
    strParent = HS.Parent.Member()
    strApp=HS.ApplicationName
    StrValue = HS.Value.Member()
    IntCurPeriodNum =  HS.Period.Number()

    RLogger_Act = HS.GetCell("Y#2039.P#Dec.E#ADMIN_ENTITY.V#EUR.S#FORECAST.A#Activate_RulesLogging.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    rLoggerCounter = 0

    If RLogger_Act = 1 Then
        StrPeriod = Hs.Period.Member()
        strApp=HS.ApplicationName
    End If

        If CInt(IntYear) >= 2025 or (CInt(IntYear) = 2024 and IntCurPeriodNum >= 10) Then
            bAcqTransDone = False : bDispTransDone = False
            C2TopList = Array("ACQ","DISPBUSIN")
            c = 0 : d = 0 : c2 = 0    : c3 = 0 : e = 0 : f = 0
            For each sC2Top in C2TopList

                Set DataUnit = HS.OpenDataUnit("A{BALANCE_SHEET.[Base]}.C1#CUSTOM1_TOP.C2{"&sC2Top&".[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                NumItems = DataUnit.GetNumItems
                If NumItems <> 0 Then

                    For i = 0 to NumItems - 1
                        Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                        If dData <> 0 And UCase(dAccount) <> "A495VSL495" Then
                            If sC2Top = "ACQ" And c = 0 Then
                                dACQDISrateCheck = HS.GetRate("A#RATE_" & dCustom2)
                                If dACQDISrateCheck <> 0 Then
                                    str_rateACQ = dCustom2
                                    bAcqTransDone = True
                                    rate_Acquisition = dACQDISrateCheck
                                    c = c + 1
                                Else
                                    rate_Acquisition = dAVG
                                    e = e + 1
                                End If
                            ElseIf sC2Top = "DISPBUSIN" And d = 0 Then
                                dACQDISrateCheck = HS.GetRate("A#RATE_" & dCustom2)
                                If dACQDISrateCheck <> 0 Then
                                    str_rateDISP = dCustom2
                                    bDispTransDone = True
                                    rate_Disposal = dACQDISrateCheck
                                    d = d + 1
                                Else
                                    rate_Disposal = dEND
                                    f = f + 1
                                End If
                            End If
                            If NumItems > 1 Then
                                If sC2Top = "ACQ" Then
                                    Redim Preserve ACQ_LIST(c2)
                                    ACQ_LIST(c2) = dCustom2
                                    c2 = c2 + 1
                                Else
                                    redim Preserve DISP_LIST(c3)
                                    DISP_LIST(c3) = dCustom2
                                    c3 = c3 + 1
                                End If
                            End If
                        End If
                    Next
                End If
            Next

            If c2 > 1 and c3 > 1 Then
                For each acq in ACQ_LIST
                    AcqText = AcqText&","&acq
                Next
                AcqText = mid(AcqText,2,100)
                For each dis in DISP_LIST
                    DisText = DisText&","&dis
                Next
                DisText = mid(DisText,2,100)
                sErrorTxt = "Unable to define rate. "&AcqText &" rate from -> "&rateACQ&" and "&DisText&" -> rate from -> "&rateDISP&". E#"&StrEntity
            ElseIf c2 > 1 Then
                For each acq in ACQ_LIST
                    AcqText = AcqText&","&acq
                Next
                AcqText = mid(AcqText,2,100)
                sErrorTxt = "Unable to define rate. "&AcqText & " rate from -> "&rateACQ&". E#"&StrEntity
            ElseIf c3 > 1 Then
                For each dis in DISP_LIST
                    DisText = DisText&","&dis
                Next
                DisText = mid(DisText,2,100)
                sErrorTxt = "Unable to define rate. "&DisText&" -> rate from -> "&rateDISP&". E#"&StrEntity
            End If
            If e > 0 Then
                sErrorTxt  = sErrorTxt & ". There is no ACQ rate for " &  str_rateACQ & " - using AVG rate now"
            End If
            If f > 0 Then
                sErrorTxt  = sErrorTxt & ". There is no DISP rate for " &  str_rateDISP    & " - using END rate now"
            End If
            If sErrorTxt <> "" Then
                sTime = FormatDateTime(Now)
                Call WriteToFile(sTime & " - " & sErrorTxt)

            End If

        End If

    CurrTime = Now()
    StrCurrFcstYear = CStr(Year(CurrTime))
    Str1stFcstPeriod = LZ(Month(CurrTime))
    StrCurrFcstYearAndPeriod = StrCurrFcstYear & Str1stFcstPeriod

    If left(Str1stFcstPeriod,1) = "0" then
        Str1stFcstPeriod = mid(Str1stFcstPeriod,2,1)
    End If

    bUseActualRules = CheckbUseActualRules(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,StrScenario)

    Call CheckStrPrevScen(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,IntYear,StrScenario,StrPrevScenYEnd,StrRolPrevScenCurP,StrRolPrevScenYEnd,StrPrevScenBEGBAL,StrEntity,StrBA,StrValue,StrCurrFcstYearAndPeriod)

    If RLogger_Act = 1 then rLoggerTimerStart = Timer

        C3_ValidationMembers_List = HS.Custom3.List("VALIDATIONS","[Base]")
        For each ValC3 in C3_ValidationMembers_List
            If ValC3 <> "ValOutcome" and ValC3 <> "2ndValOutcome" and ValC3 <> "2ndValOutcome2" and ValC3 <> "CommentAmount" and ValC3 <> "StoreIC" and ValC3 <> "My_IC_Booking" and ValC3 <> "Counterparty_IC_Booking" and ValC3 <> "StoreValOutcome" Then
                HS.Trans "C3#"&ValC3&".C4#[None]", "", 1 , ""
            End If
        Next

        C2_List = HS.Custom2.List("INV_CLACIFICATIONS","[Base]")
        For each sC2 in C2_List
            HS.Trans "C2#"&sC2, "", 1 , ""
        Next

        HS.Trans "C3#ADJUSTED", "", 1 , ""
        HS.Trans "C3#COMMENT_NEEDED", "", 1 , ""

        HS.Trans "C4#C4_EUR", "", 1 , ""
        HS.Trans "C4#C4_USD", "", 1 , ""

    If IntYear >= 2015 Then

        For Each sAcc In Array("MOBI", "MOBE")
            HS.Trans "A#" & sAcc & "_FX_OPE.C4#[None]", "", dEND, ""
            HS.Trans "A#" & sAcc & "_FX_OPE.C2#[None].C3#INP.C4#[None]", "A#" & sAcc & ".C2#CUSTOM2_TOP.C4#[None]." & StrPrevScenBEGBAL, dEND, dPRE
            HS.Trans "A#" & sAcc & "_AVGEND.C4#[None]", "", dEND, ""
        Next

        HS.Trans "A#MOBI_AVGEND.C2#[None].C4#[None]", "A#MORI.C2#CUSTOM2_TOP.C4#[None]", dEND, dAVG
        HS.Trans "A#MOBI_AVGEND.C2#[None].C4#[None]", "A#RM01I.C2#CUSTOM2_TOP.C4#[None]", dAVG, dEND

        HS.Trans "A#MOBE_AVGEND.C2#[None].C4#[None]", "A#MORE.C2#CUSTOM2_TOP.C4#[None]", dEND, dAVG
        HS.Trans "A#MOBE_AVGEND.C2#[None].C4#[None]", "A#RM01E.C2#CUSTOM2_TOP.C4#[None]", dAVG, dEND
    End if

        iREStartYear = 2020
        iRECalcOpeningBalances = 2019

        iDisablePostACQTranslate = HS.GetCell("E#ADMIN_ENTITY.A#DeActivate_PostACQ_CTATranslate.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

        If iDisablePostACQTranslate = 0 And UCase(StrValue) = "EUR" And CInt(IntYear) >= iREStartYear Then
            aEquity_accounts = Array("L105", "L115", "L155")

            HS.Trans "A#L165.C2#EQ_OPE.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_OPE.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#EQ_OPE.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_BEGBALADJ.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#EQ_OPE.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_MIGRATION.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#RET_CTA.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_ADJ.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#RET_CTA.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_DISP.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#EQ_CHNG.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_CHNG.C4#[None]", 1, 0

            HS.Trans "A#L165.C2#EQ_FX_INP.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_FX_INP.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#RET_SBP.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_SBP.C4#[None]", 1, 0
            HS.Trans "A#L165.C2#RET_DPI.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_DPI.C4#[None]", -1, 0
            HS.Trans "A#L165.C2#RET_DPE.C4#[None]", "A#L165_EUR.C2#POST_ACQ_CTA_DPE.C4#[None]", -1, 0

            HS.Trans "A#L135.C2#CTA_RE.C4#[None]", "A#L135_EUR.C2#CTA_RE.C4#[None]", 1, ""
            HS.Trans "A#L135.C2#CTA_ACQ.C4#[None]", "A#L135_EUR.C2#CTA_ACQ.C4#[None]", 1, ""

        ElseIf iDisablePostACQTranslate = 0 And CInt(IntYear) >= iREStartYear Then
            aEquity_accounts = Array("L105", "L115", "L155")
        Else
            aEquity_accounts = Array("L105", "L115", "L155", "L165")
        End If

        For Each sAccount in aEquity_accounts
             HS.Trans "A#" & sAccount & ".C2#EQ_OPE.C4#[None]", "", dPRE, ""

            HS.Trans "A#" & sAccount & ".C2#EQ_FX_CALC.C4#[None]", "", dEND, ""
            HS.Trans "A#" & sAccount & ".C2#EQ_FX_CALC.C4#[None].I#[ICP None]", "A#" & sAccount & ".C2#EQ_OPE.C4#[None].I#[ICP None]", dEND, dPRE
        Next

        If IntYear >= 2021 Then
            HS.Trans "A#L205.C2#NCI_OPE.C4#[None]", "", dPRE, ""

            HS.Trans "A#L205.C2#NCI_OPEFX.C4#[None]", "", dEND, ""
            HS.Trans "A#L205.C2#NCI_OPEFX.C4#[None].I#[ICP None]", "A#" & sAccount & ".C2#NCI_OPE.C4#[None].I#[ICP None]", dEND, dPRE
        End If

        FirstDataYear = FirstYearWithData
        If CInt(IntYear) <= 2018 And FirstDataYear <> 2017 Then
            strApp = UCase(HS.ApplicationName)
            If strApp = "TCARGOPREL" Then
                FirstDataYear = 2017
            End If
        End If

        HS.Trans "A#L135.C2#CTA_AVG.C4#[None]", "", dEND, ""
        If CInt(IntYear) > FirstDataYear Or FirstDataYear = 2015 Then
            HS.Trans "A#L135.C2#CTA_AVG.C4#[None]", "A#L178.C2#CUSTOM2_TOP.C4#[None]", dEND, dAVG
        Else
            HS.Trans "A#L135.C2#CTA_AVG.C3#INP.C4#[None]", "A#L178.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None]", dEND, dAVG
        End If

        HS.Trans "A#L178.C4#[None]", "", dAVG, ""
        HS.Trans "A#CF69.C4#[None]", "", dPRE, ""

        HS.Trans "A#CF905.C4#[None]", "", dPRE, ""

        HS.Trans "A#CF69B.C4#[None]", "", dEND, ""
        HS.Trans "A#CF69B.C4#[None]", "A#CF69.C4#[None]", dEND, dPRE

        HS.Trans "A#CF907.C4#[None]", "", dEND, ""
        HS.Trans "A#CF907.C4#[None]", "A#CF910.C4#[None]", dEND, dPRE

        HS.Trans "A#CF895.C4#[None]", "", dEND, ""
        HS.Trans "A#CF895.C4#[None]", "A#CF830_860AVG.C4#[None]", dEND, dAVG

        HS.Trans "A#CF495.C4#[None]", "", dAVG, ""
        HS.Trans "A#CF495.C4#[None]", "A#CF495help.C4#[None]", dAVG, dEND

    AccTopsToTranslate = array("N3C_4100A", "N3C_5100L")

    For each AccTop in AccTopsToTranslate
        TransAccList = Hs.Account.List(AccTop,"[Base]")

        For each AccTrans in TransAccList
            HS.Trans "A#" & AccTrans & ".C2#TAX_OPE.C4#[None]", "", dPRE, ""

            HS.Trans "A#" & AccTrans & ".C2#TAX_TRN.C4#[None]", "", dEND, ""
            HS.Trans "A#" & AccTrans & ".C2#TAX_TRN.C4#[None]", "A#" & AccTrans & ".C2#TAX_OPE.C4#[None]", dEND, dPRE
        Next
    Next

    For Each sC2 In Array("CNA", "CNL")
        HS.Trans "C2#" & sC2 & "10.C4#[None]", "", dPRE, ""
        HS.Trans "C2#" & sC2 & "11.C4#[None]", "", dEND, ""
        HS.Trans "C2#" & sC2 & "11.C4#[None]", "C2#" & sC2 & "10.C4#[None]", dEND, dPRE
    Next

    If CInt(IntYear) >= 2025 or (CInt(IntYear) = 2024 and IntCurPeriodNum = 12) Then
        FloC2Members = Array("CNA40","CNA60","CNA70","CNL20","CNL30")
    Else
        FloC2Members = Array("CNA40","CNA50","CNA60","CNA70","CNL20","CNL30","CNL50")
    End If
    HS.Trans "C2#CNA99.C4#[None]", "", dEND, ""
    HS.Trans "C2#CNL99.C4#[None]", "", dEND, ""
    For each FloC2Mbr in FloC2Members
        HS.Trans "C2#"&FloC2Mbr&".C4#[None]", "", dAVG, ""
        C2_AVG_CLO_DIFF_Mbr = Left(FloC2Mbr,3)&"99"
        HS.Trans "C2#"&C2_AVG_CLO_DIFF_Mbr&".C4#[None]", "C2#"&FloC2Mbr&".C4#[None]", dEND, dAVG
    Next

    If CInt(IntYear) >= 2025 or (CInt(IntYear) = 2024 and IntCurPeriodNum = 12) Then

        Dim Note4C_target_source_acc_list
        Set Note4C_target_source_acc_list = CreateObject("Scripting.Dictionary")
        Note4C_target_source_acc_list.Add "N04111", "A315"
        Note4C_target_source_acc_list.Add "N04112", "A357"
        Note4C_target_source_acc_list.Add "N04121", "L335E"
        Note4C_target_source_acc_list.Add "N04122", "L348"
        Note4C_target_source_acc_list.Add "N04123", "L369"

        For Each targetAcc In Note4C_target_source_acc_list.Keys

            sourceAcc = Note4C_target_source_acc_list.Item(targetAcc)
            If HS.Account.IsBase("N0411",targetAcc) Then
                data_targetC2 = "CNA50"
                FX_targetC2 = "CNA98"
            Else
                data_targetC2 = "CNL50"
                FX_targetC2 = "CNL98"
            End If

            HS.Trans "A#"&targetAcc&".C1#[None].C2#" & FX_targetC2 & ".C4#[None]", "", dEND , ""

            Set DataUnit = HS.OpenDataUnit("A#" & sourceAcc & ".C1#CUSTOM1_TOP.C2{ACQ_DISPBUSIN_TOT.[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            If NumItems <> 0 Then
                For i = 0 to NumItems - 1
                    Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)
                    If dData <> 0 and HS.Custom2.IsBase("ACQ",dCustom2) Then

                        dNoteRate = HS.GetRate("A#RATE_"&dCustom2)
                        HS.Trans "A#"&targetAcc&".C1#[None].C2#" & data_targetC2 & ".C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dCustom2&".C3#CUSTOM3_TOP", dNoteRate , ""
                        HS.Trans "A#"&targetAcc&".C1#[None].C2#" & FX_targetC2 & ".C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dCustom2&".C3#CUSTOM3_TOP", dEND , dNoteRate

                    ElseIf dData <> 0 And HS.Custom2.IsBase("DISPBUSIN",dCustom2) Then

                        dNoteRate = HS.GetRate("A#RATE_"&dCustom2)
                        HS.Trans "A#"&targetAcc&".C1#[None].C2#" & data_targetC2 & ".C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dCustom2&".C3#CUSTOM3_TOP", -dNoteRate , ""
                        HS.Trans "A#"&targetAcc&".C1#[None].C2#" & FX_targetC2 & ".C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dCustom2&".C3#CUSTOM3_TOP", -dEND , -dNoteRate

                    End If
                Next
            End If
        Next

    End If

    If (UCase(StrScenario) = "ACTUAL" Or UCase(StrScenario) = "NORSU_ACTUAL") And CInt(IntYear) > 2020 Then
        For Each sAcc In Hs.Account.List("NT1_TempDiff","[Base]")

            For Each sC2 In Hs.Custom2.List("TempDiff_OB","[Base]")
                HS.Trans "A#" & sAcc & ".C2#" & sC2, "", dPRE, ""
            Next
            HS.Trans "A#" & sAcc & ".C2#DT_OB", "", dPRE, ""

            HS.Trans "A#" & sAcc & ".C2#TempDiff_CHNG", "", dEND, ""
            HS.Trans "A#" & sAcc & ".C2#TempDiff_CHNG", "A#" & sAcc & ".C2#TempDiff_OB", dEND, dPRE
            HS.Trans "A#" & sAcc & ".C2#VA_CHNG", "", dEND, ""
            HS.Trans "A#" & sAcc & ".C2#VA_CHNG", "A#" & sAcc & ".C2#VA_OB", dEND, dPRE
            HS.Trans "A#" & sAcc & ".C2#DT_CHNG", "", dEND, ""
            HS.Trans "A#" & sAcc & ".C2#DT_CHNG", "A#" & sAcc & ".C2#DT_OB", dEND, dPRE
        Next

        HS.Trans "A#NT1_110", "", dPRE, ""

        HS.Trans "A#NT1_520.C4#[None]", "", dAVG, ""

        HS.Trans "A#NT1_520.C4#[None]", "A#NT1_810.C4#[None]", dEND, dAVG
        HS.Trans "A#NT1_520.C4#[None]", "A#NT1_820.C4#[None]", dEND, dAVG
        HS.Trans "A#NT1_520.C4#[None]", "A#NT1_830.C4#[None]", dEND, dAVG

        HS.Trans "A#NT1_530.C4#[None]", "", dEND, ""
        HS.Trans "A#NT1_530.C2#DT_CHNG.C4#[None]", "A#NT1_TempDiff.C2#DT_OB.C4#[None]", dEND, dPRE

        If CInt(IntYear) > 2024 Then
            HS.Trans "A#NT1_530.C2#DT_CHNG.C4#[None]", "A#NT1_80.C2#DT_OB.C4#[None]", -dEND, -dPRE
            HS.Trans "A#NT1_301.C4#[None]", "", dEND, ""
            HS.Trans "A#NT1_301.C2#DT_CHNG.C4#[None]", "A#NT1_80.C2#DT_OB.C4#[None]", dEND, dPRE
        End If

        dACQ = HS.GetCell("A#NT1_ACQRATE.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
        dDISP = HS.GetCell("A#NT1_DISPRATE.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
        HS.Trans "A#NT1_410.C4#[None]", "", dACQ, ""
        HS.Trans "A#NT1_415.C4#[None]", "", dDISP, ""

        HS.Trans "A#NT1_540.C4#[None]", "", dEND, ""
        HS.Trans "A#NT1_540.C2#DT_CHNG.C4#[None]", "A#NT1_410.C2#DT_CHNG.C4#[None]", dEND, dACQ
        HS.Trans "A#NT1_540.C2#DT_CHNG.C4#[None]", "A#NT1_415.C2#DT_CHNG.C4#[None]", dEND, dDISP
        HS.Trans "A#NT1_540.C4#[None]", "", -1, ""

    End If

    If CInt(IntYear) > 2020 Then

        AccTransList = Array("N0501", "N0502", "N0503", "N0504", "N0505", "N0506", "N0507", "N0508", "N0512", "N0601", "N06021", "N06022", "N0603", "N0605", "N0606", "N0701", "N0702", "N0513")
    Else
        AccTransList = Array("N0501", "N0502", "N0503", "N0504", "N0505", "N0506", "N0507", "N0508", "N0510", "N0512", "N0601", "N06021", "N06022", "N0603", "N0605", "N0606", "N0701", "N0702", "N0513")
    End If
    For Each AccTrans In AccTransList
        HS.Trans "A#" & AccTrans & ".C2#A_ACQ.C4#[None]", "", dPRE, ""
        HS.Trans "A#" & AccTrans & ".C2#D_ACD.C4#[None]", "", dPRE, ""

        HS.Trans "A#" & AccTrans & ".C2#A_ERD.C4#[None]", "", dEND, ""
        HS.Trans "A#" & AccTrans & ".C2#A_ERD.C4#[None]", "A#" & AccTrans & ".C2#A_ACQ.C4#[None]", dEND, dPRE

        HS.Trans "A#" & AccTrans & ".C2#D_ERD.C4#[None]", "", dEND, ""
        HS.Trans "A#" & AccTrans & ".C2#D_ERD.C4#[None]", "A#" & AccTrans & ".C2#D_ACD.C4#[None]", dEND, dPRE
    Next

        HS.Trans "C2#BV.C4#[None]", "", dPRE, ""

        For Each sC2Member In Array("ERD", "I_AVGEND", "S_AVGEND", "ERDEQ", "E_AVGEND")
            HS.Trans "C2#" & sC2Member & ".C4#[None]", "", dEND, ""
        Next

        HS.Trans "C2#ERD.C4#[None]", "C2#BV.C4#[None]", dEND, dPRE
        Hs.Trans "C2#I_AVGEND.C4#[None]", "C2#INCR.C4#[None]", dEND, dAVG

        Hs.Trans "C2#S_AVGEND.C4#[None]", "C2#DECR.C4#[None]", dEND, dAVG
        Hs.Trans "C2#S_AVGEND.C4#[None]", "C2#IMPAI.C4#[None]", dEND, dAVG

        If CInt(IntYear) < 2020 or (CInt(IntYear) = 2020 and CInt(IntCurPeriodNum ) < 12) Then

            HS.Trans "C2#RECLASS.C4#[None]", "", dAVG, ""
            Hs.Trans "C2#S_AVGEND.C4#[None]", "C2#RECLASS.C4#[None]", dEND, dAVG

            HS.Trans "C2#TRANSFER.C4#[None]", "", dAVG, ""
            HS.Trans "C2#RECLASSEQ.C4#[None]", "", dAVG, ""
            HS.Trans "C2#TRANSFEREQ.C4#[None]", "", dAVG, ""

        End If

        HS.Trans "C2#EQV.C4#[None]", "", dPRE, ""
        HS.Trans "C2#ERDEQ.C4#[None]", "C2#EQV.C4#[None]", dEND, dPRE

        For Each sC2Member In Array("SACNI", "DIV", "TRDIFF", "DECREQ", "IMPAIEQ")
            Hs.Trans "C2#E_AVGEND.C4#[None]", "C2#" & sC2Member & ".C4#[None]", dEND, dAVG
        Next

        If CInt(IntYear) >= 2025 or (CInt(IntYear) = 2024 and IntCurPeriodNum >= 10) Then

            Hs.Trans "C2#CSLD.C4#[None]", "", rate_Disposal, ""
            Hs.Trans "C2#S_DISPEND.C4#[None]", "", dEND, ""
            Hs.Trans "C2#S_DISPEND.C4#[None]", "C2#CSLD.C4#[None]", dEND, rate_Disposal

            Hs.Trans "C2#CACQ.C4#[None]", "", rate_Acquisition, ""
            Hs.Trans "C2#I_ACQEND.C4#[None]", "", dEND, ""
            Hs.Trans "C2#I_ACQEND.C4#[None]", "C2#CACQ.C4#[None]", dEND, rate_Acquisition
        End If

        HS.Trans "A#N13_Liabilities.C2#PS99.C4#[None]", "", dEND, ""
        HS.Trans "A#N13_Liabilities.C1#[None].C2#PS99.C4#[None]", "A#L173.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C4#[None].P#LAST.Y#PRIOR", dEND, dPRE

        HS.Trans "C2#PS93", "", dPre, ""

        HS.Trans "C2#PS10.C4#[None]", "", dPRE, ""

        HS.Trans "C2#PS_FX_OPE.C4#[None]", "", dEND, ""
        HS.Trans "C2#PS_FX_OPE.C4#[None]", "C2#PS10.C4#[None]", dEND, dPRE

        If IntYear < 2020 Then

            For each sC2 in HS.Custom2.List("PS30","[Base]")
                HS.Trans "C2#"&sC2, "", dAVG, ""
            Next

            HS.Trans "C2#PS_FX_OCI", "", dEND, ""
            HS.Trans "C2#PS_FX_OCI", "C2#PS30", dEND, dAVG

        End If

        HS.Trans "C2#PS_FX_OTH.C4#[None]", "", dEND, ""

        For Each sC2Member In Array("PS20", "PS40", "PS50", "PS60", "PS80", "PS90")
            HS.Trans "C2#PS_FX_OTH.C4#[None]", "C2#" & sC2Member & ".C4#[None]", dEND, dAVG
        Next

        C2TopList = Array("ACQ","DISPBUSIN")
        c2 = 0    :    c3 = 0
        For each sC2Top in C2TopList
            c = 0
            Set DataUnit = HS.OpenDataUnit("A#A495.C1#CUSTOM1_TOP.C2{"&sC2Top&".[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            If NumItems <> 0 Then
                For i = 0 to NumItems - 1
                    Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                    If dData <> 0 Then

                        If (sC2Top = "ACQ" Or sC2Top = "DISPBUSIN") And c = 0 Then
                            dACQDISrate = HS.GetRate("A#RATE_" & dCustom2)
                            If dACQDISrate <> 0 Then
                                Hs.Trans "C2#PS70.C4#[None]", "", dACQDISrate, ""
                                Hs.Trans "C2#PS_FX_ACQ.C4#[None]", "", dEND, ""
                                Hs.Trans "C2#PS_FX_ACQ.C4#[None]", "C2#PS70.C4#[None]", dEND, dACQDISrate
                                c = c + 1
                            End If
                        End If
                    End If
                Next
            End If
        Next

        HS.Trans "C2#PROV_OPE", "", dPRE, ""

        HS.Trans "C2#PROV_TRN", "", dEND, ""
        HS.Trans "C2#PROV_TRN", "C2#PROV_OPE", dEND, dPRE

        HS.Trans "C2#PROV_AVG", "", dEND, ""

        If CInt(IntYear) >= 2025 or (CInt(IntYear) = 2024 and IntCurPeriodNum >= 10) Then

            For Each sC2Member In Array("PROV_INC", "PROV_USE", "PROV_REV", "PROV_RESTAT", "PROV_RECUR")
                HS.Trans "C2#PROV_AVG", "C2#" & sC2Member, dEND, dAVG
            Next

            HS.Trans "C2#PROV_ACQ", "", rate_Acquisition, ""
            HS.Trans "C2#PROV_SOL", "", rate_Disposal, ""

            HS.Trans "C2#PROV_FXACQ", "", dEND, ""
            HS.Trans "C2#PROV_FXACQ", "C2#PROV_ACQ", dEND, rate_Acquisition
            HS.Trans "C2#PROV_FXDISP", "", dEND, ""
            HS.Trans "C2#PROV_FXDISP", "C2#PROV_SOL", dEND, rate_Disposal

        ElseIf CInt(IntYear) < 2020 or (CInt(IntYear) = 2020 and CInt(IntCurPeriodNum ) < 12) Then
            HS.Trans "C2#PROV_INT", "", dAVG, ""
            HS.Trans "C2#PROV_RECLASS", "", dAVG, ""
            For Each sC2Member In Array("PROV_INC", "PROV_ACQ", "PROV_SOL", "PROV_USE", "PROV_REV", "PROV_RECLASS", "PROV_INT", "PROV_RESTAT", "PROV_RECUR")
                HS.Trans "C2#PROV_AVG", "C2#" & sC2Member, dEND, dAVG
            Next
        Else
            For Each sC2Member In Array("PROV_INC", "PROV_ACQ", "PROV_SOL", "PROV_USE", "PROV_REV", "PROV_RESTAT", "PROV_RECUR")
                HS.Trans "C2#PROV_AVG", "C2#" & sC2Member, dEND, dAVG
            Next
        End If

        Hs.Trans "C2#A_AVGEND.C4#[None]", "", dEND, ""

        If CInt(IntYear) < 2020 or (CInt(IntYear) = 2020 and CInt(IntCurPeriodNum ) < 12) Then
            HS.Trans "C2#A_INT", "", dAVG, ""
            aC2Members = Array("A_INCR", "A_DECR", "A_INCI", "A_RECLASS", "A_INT", "A_ADJ", "A_CFI","A_LEASE")
            If CInt(IntYear) < 2018 Then
                aC2Members = Array("A_INCR", "A_DECR", "A_CACQ", "A_CSLD", "A_INCI", "A_RECLASS", "A_INT", "A_ADJ", "A_CFI")
            End If
        Else
            aC2Members = Array("A_INCR", "A_DECR", "A_INCI", "A_RECLASS", "A_ADJ", "A_CFI","A_LEASE")
        End If

        For Each sC2Member In aC2Members
            Hs.Trans "C2#A_AVGEND.C4#[None]", "C2#" & sC2Member & ".C4#[None]", dEND, dAVG
        Next

        Hs.Trans "C2#D_AVGEND.C4#[None]", "", dEND, ""

        If CInt(IntYear) < 2020 or (CInt(IntYear) = 2020 and CInt(IntCurPeriodNum ) < 12) Then
            HS.Trans "C2#D_INT", "", dAVG, ""
            aC2Members = Array("D_DEPRE", "D_IMPT", "D_DECR", "D_RECLASS", "D_INT", "D_ADJ", "D_CFI")

            For each Acc in HS.Account.List("ACQ_C2_FINAL", "[Base]")
                If HS.Account.C2Top(Acc) = "NOTE_ACQ2" Then
                    HS.Trans "A#" & Acc & ".C2#A_INT", "", -dAVG, ""
                    HS.Trans "A#" & Acc & ".C2#A_INT", "", 1, ""
                    HS.Trans "A#" & Acc & ".C2#D_INT", "", -dAVG, ""
                    HS.Trans "A#" & Acc & ".C2#D_INT", "", 1, ""
                End If
            Next
            If CInt(IntYear) < 2018 Then
                aC2Members = Array("D_DEPRE", "D_IMPT", "D_DECR", "D_CACQ", "D_CSLD", "D_RECLASS", "D_INT", "D_ADJ", "D_CFI")
            End If
        Else
            aC2Members = Array("D_DEPRE", "D_IMPT", "D_DECR", "D_RECLASS", "D_ADJ", "D_CFI")
        End If

        For Each sC2Member In aC2Members
            Hs.Trans "C2#D_AVGEND.C4#[None]", "C2#" & sC2Member & ".C4#[None]", dEND, dAVG
        Next

        If CInt(IntYear) >= 2018 Then
            AcqTransDone = False : DispTransDone = False
            C2TopList = Array("ACQ","DISPBUSIN")
            c2 = 0    :    c3 = 0
            For each sC2Top in C2TopList
                c = 0
                Set DataUnit = HS.OpenDataUnit("A#A495.C1#CUSTOM1_TOP.C2{"&sC2Top&".[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                NumItems = DataUnit.GetNumItems
                If NumItems <> 0 Then
                    For i = 0 to NumItems - 1
                        Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                        If dData <> 0 Then

                            If (sC2Top = "ACQ" Or sC2Top = "DISPBUSIN") And c = 0 Then
                                dACQDISrate = HS.GetRate("A#RATE_" & dCustom2)
                                If dACQDISrate <> 0 Then
                                    If sC2Top = "ACQ" Then
                                        Hs.Trans "C2#A_CACQ.C4#[None]", "", dACQDISrate, ""
                                        Hs.Trans "C2#A_ERD.C4#[None]", "C2#A_CACQ.C4#[None]", dEND, dACQDISrate
                                        Hs.Trans "C2#D_CACQ.C4#[None]", "", dACQDISrate, ""
                                        Hs.Trans "C2#D_ERD.C4#[None]", "C2#D_CACQ.C4#[None]", dEND, dACQDISrate
                                        rateACQ = dCustom2
                                        AcqTransDone = True

                                        If CInt(IntYear) >= 2021 Then
                                            Hs.Trans "C2#A_CACQ.C3#ACQ.C4#[None]", "", -dACQDISrate, ""
                                            Hs.Trans "C2#A_CACQ.C3#ACQ.C4#[None]", "", 1, ""
                                            Hs.Trans "C2#D_CACQ.C3#ACQ.C4#[None]", "", -dACQDISrate, ""
                                            Hs.Trans "C2#D_CACQ.C3#ACQ.C4#[None]", "", 1, ""
                                        End If
                                    ElseIf sC2Top = "DISPBUSIN" Then
                                        Hs.Trans "C2#A_CSLD.C4#[None]", "", dACQDISrate, ""
                                        Hs.Trans "C2#A_ERD.C4#[None]", "C2#A_CSLD.C4#[None]", dEND, dACQDISrate
                                        Hs.Trans "C2#D_CSLD.C4#[None]", "", dACQDISrate, ""
                                        Hs.Trans "C2#D_ERD.C4#[None]", "C2#D_CSLD.C4#[None]", dEND, dACQDISrate
                                        rateDISP = dCustom2
                                        DispTransDone = True

                                        If CInt(IntYear) >= 2021 Then
                                            Hs.Trans "C2#A_CSLD.C3#ACQ.C4#[None]", "", -dACQDISrate, ""
                                            Hs.Trans "C2#A_CSLD.C3#ACQ.C4#[None]", "", 1, ""
                                            Hs.Trans "C2#D_CSLD.C3#ACQ.C4#[None]", "", -dACQDISrate, ""
                                            Hs.Trans "C2#D_CSLD.C3#ACQ.C4#[None]", "", 1, ""
                                        End If
                                    End If
                                    c = c + 1
                                End If
                            End If
                            If NumItems > 1 Then
                                If sC2Top = "ACQ" Then
                                    Redim Preserve ACQ_LIST(c2)
                                    ACQ_LIST(c2) = dCustom2
                                    c2 = c2 + 1
                                Else
                                    redim Preserve DISP_LIST(c3)
                                    DISP_LIST(c3) = dCustom2
                                    c3 = c3 + 1
                                End If
                            End If
                        End If
                    Next
                End If
            Next

            If c2 > 1 and c3 > 1 Then
                For each acq in ACQ_LIST
                    AcqText = AcqText&","&acq
                Next
                AcqText = mid(AcqText,2,100)
                For each dis in DISP_LIST
                    DisText = DisText&","&dis
                Next
                DisText = mid(DisText,2,100)
                sErrorTxt = "Unable to define rate. "&AcqText &" rate from -> "&rateACQ&" and "&DisText&" -> rate from -> "&rateDISP&". E#"&StrEntity
            ElseIf c2 > 1 Then
                For each acq in ACQ_LIST
                    AcqText = AcqText&","&acq
                Next
                AcqText = mid(AcqText,2,100)
                sErrorTxt = "Unable to define rate. "&AcqText & " rate from -> "&rateACQ&". E#"&StrEntity
            ElseIf c3 > 1 Then
                For each dis in DISP_LIST
                    DisText = DisText&","&dis
                Next
                DisText = mid(DisText,2,100)
                sErrorTxt = "Unable to define rate. "&DisText&" -> rate from -> "&rateDISP&". E#"&StrEntity
            End If
            If sErrorTxt <> "" Then
                sTime = FormatDateTime(Now)
                Call WriteToFile(sTime & " - " & sErrorTxt)

            End If

            If AcqTransDone = False Then
                Hs.Trans "C2#A_AVGEND.C4#[None]", "C2#A_CACQ.C4#[None]", dEND, dAVG
                Hs.Trans "C2#D_AVGEND.C4#[None]", "C2#D_CACQ.C4#[None]", dEND, dAVG
            End If
            If DispTransDone = False Then
                Hs.Trans "C2#A_AVGEND.C4#[None]", "C2#A_CSLD.C4#[None]", dEND, dAVG
                Hs.Trans "C2#D_AVGEND.C4#[None]", "C2#D_CSLD.C4#[None]", dEND, dAVG
            End If
        End If

        Hs.Trans "C2#TAX_AVGEND.C4#[None]", "", dEND, ""

        For Each sC2Member In Array("TAX_CHGIS", "TAX_CHGIS_PREV", "TAX_CHGIS_RATE", "TAX_CHGEQ", "TAX_SOLD_ACQ", "TAX_INT", "TAX_RECLASS")
            Hs.Trans "C2#TAX_AVGEND.C4#[None]", "C2#" & sC2Member & ".C4#[None]", dEND, dAVG
        Next

        For each Acc in HS.Account.List("NOTE14","[Base]")
            SourceAcc = Mid(Acc,5,Len(Acc)-4)

            HS.Trans  "A#"&Acc&".C2#RC60.C4#[None]", "", dEND, ""
            HS.Trans  "A#"&Acc&".C2#RC60.C4#[None]", "A#"&Acc&".C2#RC20.C4#[None]", dEND, dAVG
            HS.Trans  "A#"&Acc&".C2#RC60.C4#[None]", "A#"&Acc&".C2#RC30.C4#[None]", dEND, dAVG

            HS.Trans  "A#"&Acc&".C2#RC10.C4#[None]", "", dPRE, ""

            HS.Trans  "A#"&Acc&".C2#RC50.C4#[None]", "", dEND, ""
            HS.Trans  "A#"&Acc&".C2#RC50.C4#[None]", "A#"&Acc&".C2#RC10.C4#[None]", dEND, dPRE

            HS.Trans "A#"&Acc&".C1#[None].C2#RC48.C4#[None]", "", dEND , ""

            aACQMembers = RemoveMembersFromArray(HS.Custom2.List("ACQ","[Base]"),HS.Custom2.List("ACQ_HIST","[Base]"))
            For each acq in aACQMembers
                dACQ = HS.GetRate("A#RATE_"&acq)
                HS.Trans "A#"&Acc&".C1#[None].C2#RC33.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&acq&".C3#CUSTOM3_TOP", dACQ , ""
                HS.Trans "A#"&Acc&".C1#[None].C2#RC48.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&acq&".C3#CUSTOM3_TOP", dEND , dACQ
            Next

            aDISPMembers = HS.Custom2.List("DISPBUSIN","[Base]")
            HS.Trans "A#"&Acc&".C1#[None].C2#RC49.C4#[None]", "", dEND , ""
            For each dis in aDISPMembers
                dDIS = HS.GetRate("A#RATE_"&dis)
                HS.Trans "A#"&Acc&".C1#[None].C2#RC34.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dis&".C3#CUSTOM3_TOP", "" , dDIS
                HS.Trans "A#"&Acc&".C1#[None].C2#RC49.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dis&".C3#CUSTOM3_TOP", dDIS , dEND
            Next
        Next

        For each Acc in HS.Account.List("NOTE19","[Base]")
             SourceAcc = Mid(Acc,5,Len(Acc)-4)

            HS.Trans  "A#"&Acc&".C2#LR60.C4#[None]", "", dEND, ""
            HS.Trans  "A#"&Acc&".C2#LR60.C4#[None]", "A#"&Acc&".C2#LR20.C4#[None]", dEND, dAVG
            HS.Trans  "A#"&Acc&".C2#LR60.C4#[None]", "A#"&Acc&".C2#LR30.C4#[None]", dEND, dAVG

            HS.Trans  "A#"&Acc&".C2#LR10.C4#[None]", "", dPRE, ""

            HS.Trans  "A#"&Acc&".C2#LR50.C4#[None]", "", dEND, ""
            HS.Trans  "A#"&Acc&".C2#LR50.C4#[None]", "A#"&Acc&".C2#LR10.C4#[None]", dEND, dPRE

            HS.Trans "A#"&Acc&".C1#[None].C2#LR48.C4#[None]", "", dEND , ""

            aACQMembers = RemoveMembersFromArray(HS.Custom2.List("ACQ","[Base]"),HS.Custom2.List("ACQ_HIST","[Base]"))
            For each acq in aACQMembers

                    dACQ = HS.GetRate("A#RATE_"&acq)

                    HS.Trans "A#"&Acc&".C1#[None].C2#LR25.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&acq&".C3#CUSTOM3_TOP", dACQ , ""
                    HS.Trans "A#"&Acc&".C1#[None].C2#LR48.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&acq&".C3#CUSTOM3_TOP", dEND , dACQ

            Next

            aDISPMembers = HS.Custom2.List("DISPBUSIN","[Base]")
            HS.Trans "A#"&Acc&".C1#[None].C2#LR49.C4#[None]", "", dEND , ""
            For each dis in aDISPMembers

                    dDIS = HS.GetRate("A#RATE_"&dis)

                    HS.Trans "A#"&Acc&".C1#[None].C2#LR26.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dis&".C3#CUSTOM3_TOP", "" , dDIS
                    HS.Trans "A#"&Acc&".C1#[None].C2#LR49.C3#INP.C4#[None]", "A#"&SourceAcc&".C1#CUSTOM1_TOP.C4#[None].C2#"&dis&".C3#CUSTOM3_TOP", dDIS , dEND

            Next
        Next

        HS.Trans "C2#ACQEXCHRATE", "" ,dEND, ""

        aACQMembers = RemoveMembersFromArray(HS.Custom2.List("ACQ","[Base]"),HS.Custom2.List("ACQ_HIST","[Base]"))
        For each acq in aACQMembers
            ACQ_year = GetUD(acq, "Custom2", "ACQDIVY")
            If CInt(ACQ_year) = CInt(IntYear) or CInt(ACQ_year) + 1 = CInt(IntYear) Then
                dACQ = HS.GetRate("A#RATE_"&acq)

                HS.Trans "C4#[None].C2#"&acq,"",dACQ,""

                HS.Trans "C4#[None].C2#ACQEXCHRATE","C4#[None].C2#"&acq,dEND,dACQ

                HS.Trans "A#ACQ_1700.C4#[None].C2#"&acq,"",-dACQ,""
                HS.Trans "A#ACQ_1700.C4#[None].C2#"&acq,"",1,""

                HS.Trans "A#ACQ_1700.C2#ACQEXCHRATE.C4#[None]","A#ACQ_1700.C4#[None].C2#"&acq,dACQ,dEND

                HS.Trans "A#ACQ_1600.C4#[None].C2#"&acq,"",-dACQ,""
                HS.Trans "A#ACQ_1600.C4#[None].C2#"&acq,"",1,""

                HS.Trans "A#ACQ_1600.C2#ACQEXCHRATE.C4#[None]","A#ACQ_1600.C4#[None].C2#"&acq,dACQ,dEND

                HS.Trans "A#ACQ_1650.C4#[None].C2#"&acq,"",-dACQ,""
                HS.Trans "A#ACQ_1650.C4#[None].C2#"&acq,"",1,""

                HS.Trans "A#ACQ_1650.C2#ACQEXCHRATE.C4#[None]","A#ACQ_1650.C4#[None].C2#"&acq,dACQ,dEND
            End If
        Next

        HS.Trans "C2#DISPBUSINEXCHRATE.C4#[None]", "" ,dEND, ""

        aDISPMembers = HS.Custom2.List("DISPBUSIN","[Base]")
        For each dis in aDISPMembers
            ACQ_year = GetUD(dis, "Custom2", "ACQDIVY")
            If Int(ACQ_year) = Int(IntYear) or Int(ACQ_year) + 1 = Int(IntYear) Then
                dDIS = HS.GetRate("A#RATE_"&dis)

                HS.Trans "C4#[None].C2#"&dis,"",dDIS,""

                HS.Trans "C2#DISPBUSINEXCHRATE.C4#[None]","C4#[None].C2#"&dis,dEND,dDIS

                For Each sAcc In Array("DIV_1700", "DIV_1800")
                    HS.Trans "A#" & sAcc & ".C4#[None].C2#" & dis, "", -dDIS, ""
                    HS.Trans "A#" & sAcc & ".C4#[None].C2#" & dis, "", 1, ""

                    HS.Trans "A#" & sAcc & ".C4#[None].C2#DISPBUSINEXCHRATE", "C2#" & dis, dDIS, dEND
                Next

            End If
        Next

        aACQDISPHistory = HS.Custom2.List("ACQ_HIST","[Base]")
        aAccTopList = Array("ACQ_C1_FINAL","ACQ_C4_FINAL","NCI_A1")
        C2TopList = Array("ACQ","DISPBUSIN")
        For each sC2Top in C2TopList
            For each sAccTop in aAccTopList
                Set DataUnit = HS.OpenDataUnit("A{" & sAccTop & ".[Base]}.C1#CUSTOM1_TOP.C2{"&sC2Top&".[Base]}.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
            NumItems = DataUnit.GetNumItems
            If NumItems <> 0 Then
                For i = 0 to NumItems - 1
                    Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)
                    If dData <> 0 And IsItemInList(dCustom2,aACQDISPHistory) = False Then
                        dACQ = HS.GetRate("A#RATE_"& dCustom2)
                        HS.Trans "A#" & dAccount & ".C4#[None].C2#"&dCustom2,"",-dACQ,""
                        HS.Trans "A#" & dAccount & ".C4#[None].C2#"&dCustom2,"",1,""
                    End If
                Next
            End If
            Next
        Next

        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

        If RLogger_Act = 1 then rLoggerTimerStart = Timer

        If Instr(StrScenario,"FORECAST") > 0 Then
            PrevFcst = GetPreviousFcst(Str1stFcstPeriod)
            ActiveFcstVersion = GetCurFcstStoredCounterparty(Str1stFcstPeriod)

            If StrScenario = "FORECAST" or StrScenario = PrevFcst or StrScenario = ActiveFcstVersion Then

                C4_ConstantFX_Mbrs = Array("CONSTANT_FX_RATE_FXDIFF","CONSTANT_FX_RATE_FXDIFF2")
                For each sC4 in C4_ConstantFX_Mbrs

                    ReadFlagsFromTxtFile = HS.GetCell("E#ADMIN_ENTITY.Y#2039.P#Dec.S#FORECAST.V#EUR.A#ReadFlagsFromTxtFile.I#[ICP None].C1#[None].C2#[None].C3#INP.C4#[None]")

                    If CInt(ReadFlagsFromTxtFile) = 1 Then

                        Call ReadTextFile("D:\1_Cargotec_material\3_HFM_WriteToFile\FlagAccountInformation (DO NOT REMOVE).txt",FullTxtStr)
                        RatePOV = Ucase(GetParamFromTxt(sC4&"_RatePOV",FullTxtStr))
                    Else
                        RatePOV = HS.GetCellText("E#ADMIN_ENTITY.Y#2039.P#Dec.V#EUR.S#FORECAST.A#"&sC4&"_RatePOV.C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                    End If

                    If RatePOV <> "" Then
                        C4Activated = True
                    Else
                        C4Activated = False
                    End If

                    If C4Activated = True Then
                        dEND2 = HS.GetRate("A#END_RATES."&RatePOV)
                        dAVG2 = HS.GetRate("A#AVG_RATES."&RatePOV)
                        dPRE2 = HS.GetRate("A#PRE_RATES."&RatePOV)

                        Set DataUnit = HS.OpenDataUnit("C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#CUSTOM3_TOP.C4#[None].I#[ICP Top]")
                        NumItems = DataUnit.GetNumItems

                            For i = 0 to NumItems - 1
                                Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                                AccType = HS.Account.AccountType(dAccount)
                                If Ucase(AccType) = "ASSET" or Ucase(AccType) = "LIABILITY" Then
                                    ScenRate = dEND
                                    ConstRate = dEND2
                                    CalcDiff = True
                                ElseIf Ucase(AccType) = "REVENUE" or Ucase(AccType) = "EXPENSE" Then
                                    ScenRate = dAVG
                                    ConstRate = dAVG2
                                    CalcDiff = True
                                Else
                                    CalcDiff = False
                                End If

                                If CalcDiff = True Then

                                    C4_Top = HS.Account.C4Top(dAccount)
                                    If C4_Top = "" Then C4_Top = "[None]"
                                    If C4_Top = "ALL" Then C4_Top = "C4_REPORTING"
                                    If HS.Custom4.IsBase(C4_Top,"CONSTANT_FX_RATE_FXDIFF") = True Then
                                        HS.Trans  "A#"&dAccount&".C4#"&sC4, "", ConstRate, ""
                                        HS.Trans  "A#"&dAccount&".C4#"&sC4, "A#"&dAccount&".C4#[None]", ConstRate, ScenRate
                                    End If
                                End If
                            Next
                    End If
                Next
            End If
        End If

    If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

End Sub

Sub Consolidate()

    dPCon = HS.Node.PCon("")
    dPOwn = HS.Node.POwn("")
    StrScenario = HS.Scenario.Member()

    strParent = HS.Parent.Member()
    ParentEntUD = GetUD(strParent, "Entity", "")
    iDisableACQ_Cons = HS.GetCell("E#ADMIN_ENTITY.A#DeActivate_ACQConsolidation.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    If InStr(UCASE(ParentEntUD), "/ACQELIM") = 0 Then
        iDisableACQ_Cons = 1
    End If

    ConsolidationActive = True
    StrEntity = HS.Entity.Member()
    If HS.Entity.IsChild("ADD_TAX",strParent) = True Then

        IntYear = HS.Year.Member()    :    IntCurPeriodNum =  HS.Period.Number()

        EntInTaxGroupStart = GetUD(StrEntity, "Entity", "sInTaxGroupStart")
        If EntInTaxGroupStart <> "" Then
            EntInTaxGroupStartPeriod = left(EntInTaxGroupStart,3)
            EntInTaxGroupStartPeriodNo = CInt(GetPeriodNumber(EntInTaxGroupStartPeriod))
            EntInTaxGroupStartYear = CInt(Right(EntInTaxGroupStart,4))
            If CInt(IntYear) < EntInTaxGroupStartYear or (CInt(IntYear) = EntInTaxGroupStartYear and IntCurPeriodNum < EntInTaxGroupStartPeriodNo) Then ConsolidationActive = False
        End If

        EntInTaxGroupEnd = GetUD(StrEntity, "Entity", "sInTaxGroupEnd")
        If EntInTaxGroupEnd <> "" Then
            EntInTaxGroupEndPeriod = left(EntInTaxGroupEnd,3)
            EntInTaxGroupEndPeriodNo = CInt(GetPeriodNumber(EntInTaxGroupEndPeriod))
            EntInTaxGroupEndYear = CInt(Right(EntInTaxGroupEnd,4))
            If CInt(IntYear) > EntInTaxGroupEndYear or (CInt(IntYear) = EntInTaxGroupEndYear and IntCurPeriodNum >= EntInTaxGroupEndPeriodNo) Then ConsolidationActive = False
        End If

    End If

    EntUD = GetUD(StrEntity, "Entity", "")
    LegalEntForStrEntity = GetLegalEntity(StrEntity, EntUD)

    If strParent = "ADD_ORG" or strParent = "ADD_TAX" Then ConsolidationActive = False

    RLogger_Act = HS.GetCell("Y#2039.P#Dec.E#ADMIN_ENTITY.V#EUR.S#FORECAST.A#Activate_RulesLogging.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
    rLoggerCounter = 0

    If RLogger_Act = 1 Then
        StrPeriod = Hs.Period.Member()
        IntYear = HS.Year.Member()
        IntCurPeriodNum =  HS.Period.Number()
        StrValue = HS.Value.Member()
        strApp=HS.ApplicationName
        StrEntity = HS.Entity.Member()
        bIsBase = HS.entity.Isbase("", "")
    End If

    If RLogger_Act = 1 then rLoggerTimerStart = Timer

    If ConsolidationActive = True Then
        Set DataUnit = HS.OpenDataUnit("")
        NumItems = DataUnit.GetNumItems
            For i = 0 to NumItems - 1
                Call DataUnit.GetItem(i, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, dData)

                If dData <> 0 And HS.Account.IsConsolidated(dAccount) = TRUE Then
                    If dCustom4 <> "C4_EUR" and dCustom4 <> "C4_USD" and dCustom3 <> "ValByPass" Then

                            Call HS.Con("",dPCon,"")

                            If Left(dCustom4,3) <> "ACQ" And HS.Account.IsBase("ACQ_ACCOUNTS",dAccount) = False And HS.Account.IsBase("DIV_ELIM_EUR",dAccount) = False Then
                                Call Eliminate(dPCon, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, StrScenario, LegalEntForStrEntity)

                            ElseIf iDisableACQ_Cons = 0 And Left(dCustom4,3) <> "ACQ" And (HS.Account.IsBase("ACQ_ACCOUNTS",dAccount) = True Or HS.Account.IsBase("DIV_ELIM_EUR",dAccount) = True) Then
                                Call EliminateACQ(dPCon, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4,StrScenario,ParentEntUD)
                            End If

                    ElseIf dCustom3 = "ValByPass" Then
                        Call HS.Con("C3#ValByPassConsolidating",dPCon,"")
                    End If
                End If
            Next
    End If

        If RLogger_Act = 1 Then : rLoggerTimerEnd = Timer : rLoggerTimerTotal = rLoggerTimerEnd - rLoggerTimerStart : redim Preserve RuleLoggerList(rLoggerCounter)    : RuleLoggerList(rLoggerCounter) = "

End Sub

Sub EliminateACQ(dPCon, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, StrScenario,ParentEntUD)

    CanEliminate = False

    AccUD = GetUD(dAccount, "Account", "")
     strPlug = HS.Account.PlugAcct(dAccount)

    If InStr(UCASE(ParentEntUD), "/ACQELIMBA/") <> 0 And InStr(UCASE(AccUD), "/ACQELIMBA/") <> 0 Then
        CanEliminate = True
    ElseIf InStr(UCASE(ParentEntUD), "/ACQELIMGROUP/") <> 0 And InStr(UCASE(AccUD), "/ACQELIMGROUP/") <> 0 Then
        CanEliminate = True
    End If

    If strPlug = "" Then
        CanEliminate = False
    End if

    If CanEliminate = True Then
        Call HS.Con("V#[Elimination]",-dPCon,"")

        AccType = UCase(HS.Account.AccountType(strPlug))

        bSwitchSignC2 = HS.Custom2.SwitchSign(dCustom2)
        If UCase(AccType) = "ASSET" And bSwitchSignC2 = FALSE Then
            Call HS.Con("V#[Elimination].A#" & strPlug,-dPCon,"")
        ElseIf UCase(AccType) = "LIABILITY" And bSwitchSignC2 = TRUE Then
            Call HS.Con("V#[Elimination].A#" & strPlug,-dPCon,"")
        Else
            Call HS.Con("V#[Elimination].A#" & strPlug,dPCon,"")
        End If
    End If
End Sub

Sub Eliminate(dPCon, dAccount, dICP, dCustom1, dCustom2, dCustom3, dCustom4, StrScenario,LegalEntForStrEntity)

    CanEliminate = TRUE

    If (StrComp(dICP, "[ICP NONE]", vbTextCompare) = 0) Then
        CanEliminate = False

    ElseIf (HS.Account.IsICP(dAccount) = False) Then
          CanEliminate = False

    ElseIf (HS.Node.IsDescendant(HS.Parent.Member,dICP,"") = False) Then
        CanEliminate = False
    Else
         strPlug = HS.Account.PlugAcct(dAccount)
        If strPlug = "" Then
             CanEliminate = False
        End if
    End If

    If dICP = "NMAP_ICP" Then
        StrEnt = HS.Entity.Member()
         strPlug = HS.Account.PlugAcct(dAccount)
        If HS.Entity.IsBase("",StrEnt) = True and HS.Account.IsICP(dAccount) = True and strPlug <> "" Then
             CanEliminate = True
        End If
    End If

    If dCustom3 = "ADJUSTED" Or dCustom3 = "COMMENT_NEEDED" Then
        CanEliminate = False
    End If

    If CanEliminate = True Then

        If StrScenario = "ACTUAL" Then
            If HS.Custom3.IsBase("CUSTOM3_TOP",dCustom3) = True Then
                If LegalEntForStrEntity <> "" and HS.Entity.IsBase(LegalEntForStrEntity,dICP) = True Then
                    C3Target = "ELIM_LEG"
                Else
                    C3Target = "ELIM_IC"
                End If
            Else
                C3Target = dCustom3
            End If
        Else
            C3Target = dCustom3
        End If

        Call HS.Con("V#[Elimination].C3#"&C3Target,-dPCon,"")

        If HS.Custom3.Isbase("ROLLING",dCustom3) = False Then
            Call HS.Con("V#[Elimination].C3#"&C3Target&".A#" & strPlug,dPCon,"")
        End If
    End If
End Sub

Sub Input

    HS.Input "C3#ValByPass"
    HS.Input "A#ValEntityOverride"

    ProcessControlClearAccounts = HS.Account.List("ProcessControlValidationAccounts","[Base]")
    For each acc in ProcessControlClearAccounts
        If Ucase(left(acc,8)) = "CLEARVAL" Then
            HS.Input "A#"&acc
        End If
    Next

    HS.Input "C3#CopyComments"
End Sub

Sub NoInput()
    AppName = HS.ApplicationName

    For Each YearItem in Array("2022","2023","2024","2025","2030")
        HS.Noinput "A#N1201.C2#WITH0_1.Y#" & YearItem
        HS.Noinput "A#N1202.C2#WITH0_1.Y#" & YearItem
        HS.Noinput "A#N1203.C2#WITH0_1.Y#" & YearItem
        HS.Noinput "A#N1208.C2#WITH0_1.Y#" & YearItem
        HS.Noinput "A#N1209.C2#WITH0_1.Y#" & YearItem
    Next

    startTimer = timer()

    CHECK_NOINPUT_SECTIONS = False
    NO_Timer = Timer()

    N1_WriteToFile = False        :    N2_WriteToFile = False        :    N3_WriteToFile = False        : N4_WriteToFile = False    :    N5_WriteToFile = False
    N6_WriteToFile = False        :    N7_WriteToFile = False        :    N8_WriteToFile = False        : N9_WriteToFile = False    :    N10_WriteToFile = False
    N11_WriteToFile = False        :    N12_WriteToFile = False        :    N13_WriteToFile = False        : N14_WriteToFile = False    :    N15_WriteToFile = False
    N16_WriteToFile = False        :    N17_WriteToFile = False        :    N18_WriteToFile = False        : N19_WriteToFile = False    :    N20_WriteToFile = False
    N21_WriteToFile = False        :    N22_WriteToFile = False        :    N23_WriteToFile = False        : N24_WriteToFile = False    :    N25_WriteToFile = False
    N26_WriteToFile = False        :    N27_WriteToFile = False        :    N28_WriteToFile = False        : N29_WriteToFile = False    :    N30_WriteToFile = False
    N31_WriteToFile = False        :    N32_WriteToFile = False        :    N33_WriteToFile = False        : N34_WriteToFile = False    :    N35_WriteToFile = False
    N36_WriteToFile = False        :    N37_WriteToFile = False        :    N38_WriteToFile = False        : N39_WriteToFile = False    :    N40_WriteToFile = False
    N41_WriteToFile = False        :    N42_WriteToFile = False        :    N43_WriteToFile = False        : N44_WriteToFile = False    :    N45_WriteToFile = False
    N46_WriteToFile = False        :    N47_WriteToFile = False        :    N48_WriteToFile = False        : N49_WriteToFile = False    :    N50_WriteToFile = False
    N51_WriteToFile = False        :    N52_WriteToFile = False        :    N53_WriteToFile = False        : N54_WriteToFile = False    :    N55_WriteToFile = False
    N56_WriteToFile = False        :    N57_WriteToFile = False        :    N58_WriteToFile = False        : N59_WriteToFile = False    :    N60_WriteToFile = False
    N61_WriteToFile = False        :    N62_WriteToFile = False        :    N63_WriteToFile = False        : N64_WriteToFile = False    :    N65_WriteToFile = False
    N66_WriteToFile = False        :    N67_WriteToFile = False        :    N68_WriteToFile = False        : N69_WriteToFile = False    :    N70_WriteToFile = False
    N71_WriteToFile = False        :    N72_WriteToFile = False        :    N73_WriteToFile = False        : N74_WriteToFile = False    :    N75_WriteToFile = False
    N76_WriteToFile = False        :    N77_WriteToFile = False        :    N78_WriteToFile = False        : N79_WriteToFile = False
    N81_WriteToFile = False        :    N82_WriteToFile = False        :    N83_WriteToFile = False        : N84_WriteToFile = False    :    N85_WriteToFile = False
    N86_WriteToFile = False        :    N87_WriteToFile = False        :    N88_WriteToFile = False        : N89_WriteToFile = False    :    N90_WriteToFile = False
    N91_WriteToFile = False        :    N92_WriteToFile = False        :    N93_WriteToFile = False        : N94_WriteToFile = False    :    N95_WriteToFile = False
    N96_WriteToFile = False        :    N97_WriteToFile = False        :    N98_WriteToFile = False        : N99_WriteToFile = False    :    N100_WriteToFile = False
    N101_WriteToFile = False    :    N102_WriteToFile = False    :    N103_WriteToFile = False    : N104_WriteToFile = False    :    N105_WriteToFile = False
    N106_WriteToFile = False    :    N107_WriteToFile = False    :    N108_WriteToFile = False    : N109_WriteToFile = False    :    N110_WriteToFile = False
    N111_WriteToFile = False    :    N112_WriteToFile = False    :    N113_WriteToFile = False    : N114_WriteToFile = False    :    N115_WriteToFile = False
    N116_WriteToFile = False    :    N117_WriteToFile = False    :    N118_WriteToFile = False    : N119_WriteToFile = False    :    N120_WriteToFile = False
    N121_WriteToFile = False    :    N122_WriteToFile = False    :    N123_WriteToFile = False    : N124_WriteToFile = False    :    N125_WriteToFile = False
    N126_WriteToFile = False    :    N127_WriteToFile = False    :    N128_WriteToFile = False    : N129_WriteToFile = False    :    N130_WriteToFile = False
    N131_WriteToFile = False    :    N132_WriteToFile = False    :    N133_WriteToFile = False    : N134_WriteToFile = False    :    N135_WriteToFile = False
    N136_WriteToFile = False    :    N137_WriteToFile = False    :    N138_WriteToFile = False    : N139_WriteToFile = False    :    N140_WriteToFile = False
    N141_WriteToFile = False    :   N142_WriteToFile = False    :    N143_WriteToFile = False    : N144_WriteToFile = False    :    N145_WriteToFile = False
    N146_WriteToFile = False    :   N147_WriteToFile = False    :    N148_WriteToFile = False    : N149_WriteToFile = False    :    N150_WriteToFile = False
    N151_WriteToFile = False    :   N152_WriteToFile = False    :    N153_WriteToFile = False    : N154_WriteToFile = False    :    N155_WriteToFile = False
    N156_WriteToFile = False    :   N157_WriteToFile = False    :    N158_WriteToFile = False    : N159_WriteToFile = False    :    N160_WriteToFile = False
    N161_WriteToFile = False    :   N162_WriteToFile = False    :    N163_WriteToFile = False    : N164_WriteToFile = False    :    N165_WriteToFile = False
    N166_WriteToFile = False     :   N167_WriteToFile = False    :    N168_WriteToFile = False    : N169_WriteToFile = False    :    N170_WriteToFile = False
    N171_WriteToFile = False    :   N172_WriteToFile = False    :    N173_WriteToFile = False    : N174_WriteToFile = False    :    N175_WriteToFile = False
    N176_WriteToFile = False    :   N177_WriteToFile = False    :    N178_WriteToFile = False    : N179_WriteToFile = False    :    N180_WriteToFile = False
    N181_WriteToFile = False    :   N182_WriteToFile = False    :    N183_WriteToFile = False    : N184_WriteToFile = False    :    N185_WriteToFile = False
    N186_WriteToFile = False    :   N187_WriteToFile = False    :    N188_WriteToFile = False    : N189_WriteToFile = False    :    N190_WriteToFile = False
    N191_WriteToFile = False    :   N192_WriteToFile = False    :    N193_WriteToFile = False    : N194_WriteToFile = False    :    N195_WriteToFile = False
    N196_WriteToFile = False    :   N197_WriteToFile = False    :    N198_WriteToFile = False    : N199_WriteToFile = False    :    N200_WriteToFile = False
    N201_WriteToFile = False    :   N202_WriteToFile = False    :    N203_WriteToFile = False    : N204_WriteToFile = False    :    N205_WriteToFile = False
    N206_WriteToFile = False    :   N207_WriteToFile = False    :    N208_WriteToFile = False    : N209_WriteToFile = False    :    N210_WriteToFile = False
    N211_WriteToFile = False    :   N212_WriteToFile = False    :    N213_WriteToFile = False    : N214_WriteToFile = False    :    N215_WriteToFile = False
    N216_WriteToFile = False    :   N217_WriteToFile = False    :    N218_WriteToFile = False    : N219_WriteToFile = False    :    N220_WriteToFile = False
    N221_WriteToFile = False    :   N222_WriteToFile = False    :    N223_WriteToFile = False    : N224_WriteToFile = False    :    N225_WriteToFile = False
    N226_WriteToFile = False    :   N227_WriteToFile = False    :    N228_WriteToFile = False    : N229_WriteToFile = False    :    N230_WriteToFile = False
    N231_WriteToFile = False    :   N232_WriteToFile = False    :    N233_WriteToFile = False    : N234_WriteToFile = False    :    N235_WriteToFile = False
    N236_WriteToFile = False    :   N237_WriteToFile = False    :    N238_WriteToFile = False    : N240_WriteToFile = False
    N241_WriteToFile = False    :   N242_WriteToFile = False    :    N243_WriteToFile = False    : N244_WriteToFile = False    :    N245_WriteToFile = False
    N246_WriteToFile = False    :   N247_WriteToFile = False    :    N248_WriteToFile = False    : N249_WriteToFile = False    :    N250_WriteToFile = False
    N252_WriteToFile = False    :    N253_WriteToFile = False    : N254_WriteToFile = False    :    N255_WriteToFile = False
    N256_WriteToFile = False    :   N257_WriteToFile = False    :    N258_WriteToFile = False    : N259_WriteToFile = False    :    N260_WriteToFile = False
    N262_WriteToFile = False    :    N263_WriteToFile = False    : N264_WriteToFile = False    :    N265_WriteToFile = False
    N267_WriteToFile = False    :    N268_WriteToFile = False    : N269_WriteToFile = False    :    N270_WriteToFile = False
    N271_WriteToFile = False    :   N272_WriteToFile = False    :    N273_WriteToFile = False    : N274_WriteToFile = False    :    N275_WriteToFile = False
    N276_WriteToFile = False    :   N277_WriteToFile = False    :    N278_WriteToFile = False    : N279_WriteToFile = False    :    N280_WriteToFile = False
    N281_WriteToFile = False    :   N282_WriteToFile = False    :    N284_WriteToFile = False    :    N285_WriteToFile = False
    N286_WriteToFile = False    :   N287_WriteToFile = False    :    N288_WriteToFile = False    : N289_WriteToFile = False    :    N290_WriteToFile = False

    N901_WriteToFile = False

    NGOLIVECLOSE_WriteToFile = False

    dimEnt = "E#"
    dimICP = "I#"
    dimAcc = "A#"
    dimC1 = "C1#"
    dimC2 = "C2#"
    dimC3 = "C3#"
    dimC4 = "C4#"
    dimSce = "S#"
    dimYear = "Y#"
    dimPeriod = "P#"

    AccountsAllList = HS.Account.List("", "[Base]")
    PeriodMonthList = Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
    PeriodMonthExeptDecList = Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov")
    PeriodQuartersList = Array("Mar","Jun","Sep","Dec")
    PeriodNoQuarterList = Array("Jan","Feb","Apr","May","Jul","Aug","Oct","Nov")
    YearFutureYearsList = Array("2024","2025","2026","2030")
    YearActReportingYearClose = Array("2024","2025")
    YearNoInputYearsList = Array("2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2030")
    sYearCurrentActualReportingYear = "2024"
    EntitiesAllList = HS.entity.List("", "[Base]")
    Custom1AllList = HS.Custom1.List("", "[Base]")
    Custom2AllList = HS.Custom2.List("", "[Base]")
    Custom3AllList = HS.Custom3.List("", "[Base]")
    EstimateScenarioslist = Array("BUDGET","FORECAST")
    ActualScenarios = Array("ACTUAL")
    StrategyScenarios = HS.Scenario.List("STRATEGY", "[Base]")
    C2_COUNTRIES_List = HS.Custom2.List("COUNTRIES","[Base]")
    C2_Markets_List = HS.Custom2.List("Markets","[Base]")
    All_ICPs_List = HS.ICP.List("","[Base]")
    AllScenarios = HS.Scenario.List("","[Base]")
    AllCalculatedScenarios = CombineLists(HS.Scenario.List("FORECAST_SUPPORT", "[Base]"), HS.Scenario.List("FX_ANALYSIS", "[Base]"))
    AllInputScenarios = RemoveMembersFromArray(AllScenarios, AllCalculatedScenarios)

    CurrTime = Now()
    StrCurrFcstYear = CStr(Year(CurrTime))
    Str1stFcstPeriod = LZ(Month(CurrTime))
    StrCurrFcstYearAndPeriod = StrCurrFcstYear & Str1stFcstPeriod

    If left(Str1stFcstPeriod,1) = "0" then
        Str1stFcstPeriod = mid(Str1stFcstPeriod,2,1)
    End If

    HR_LOAD_ACTIVE = False

    NumAccounts = UBound(AccountsAllList)
    ReDim SAPLoadAccounts(NumAccounts)
    ReDim NONSAPLoadAccounts(NumAccounts)
    ReDim ActiveAccountsList(NumAccounts)

    ReDim NONGCPLoadAccounts(NumAccounts)

    iCounter = 0
    SAPLoadCounter = 0
    SAPHRLoadCounter = 0
    NONSAPLoadCounter = 0

    NONGCPLoadCounter = 0

    For Each Acc In AccountsAllList
        If HS.Account.IsCalculated(Acc) = FALSE Then
            AccUD = GetUD(Acc, "Account", "")

            If Instr(AccUD,"/CloseStartDate:") = 0 Then
                If Instr(AccUD, "/SAP_LOAD/") > 0 Then

                    SAPLoadAccounts(SAPLoadCounter) = Acc
                    SAPLoadCounter = SAPLoadCounter + 1
                Else
                    NONSAPLoadAccounts(NONSAPLoadCounter) = Acc
                    NONSAPLoadCounter = NONSAPLoadCounter + 1
                End If

                If Instr(AccUD, "/SAP_HR_LOAD/") > 0 Or Instr(AccUD, "/ADJ_INP/") > 0 Then
                    ReDim Preserve SAPHRLoadAccounts(SAPHRLoadCounter)
                    SAPHRLoadAccounts(SAPHRLoadCounter) = Acc
                    SAPHRLoadCounter = SAPHRLoadCounter + 1

                    HR_LOAD_ACTIVE = True
                End If

                    NONGCPLoadAccounts(NONGCPLoadCounter) = Acc
                    NONGCPLoadCounter = NONGCPLoadCounter + 1

                ActiveAccountsList(iCounter) = Acc
                iCounter = iCounter + 1
            Else

            End If
        End If
    Next

    ReDim Preserve SAPLoadAccounts(SAPLoadCounter-1)
    ReDim Preserve NONSAPLoadAccounts(NONSAPLoadCounter-1)
    ReDim Preserve ActiveAccountsList(iCounter - 1)
    ReDim Preserve NONGCPLoadAccounts(NONGCPLoadCounter-1)

    ReDim ActiveCustom1List(Ubound(Custom1AllList))
    iCounter = 0
    For Each sCustom1 In Custom1AllList
        sC1UD = GetUD(sCustom1, "Custom1", "")
        If Instr(sC1UD, "/CloseStartDate:") = 0 And Instr(sC1UD, "/Calc/") = 0 Then
            ActiveCustom1List(iCounter) = sCustom1
            iCounter = iCounter + 1
        Else

        End If
    Next
    ReDim Preserve ActiveCustom1List(iCounter - 1)

    For Each sBA In Array("MAR")
        aCustom1List = HS.Custom1.List(sBA, "[Base]")

        iCounter = 0
        ReDim aActiveCustom1List(Ubound(aCustom1List))
        For Each sCustom1 In aCustom1List
            sC1UD = GetUD(sCustom1, "Custom1", "")
            If Instr(sC1UD, "/CloseStartDate:") = 0 And Instr(sC1UD, "/Calc/") = 0 Then
                aActiveCustom1List(iCounter) = sCustom1
                iCounter = iCounter + 1
            Else

            End If
        Next
        ReDim Preserve aActiveCustom1List(iCounter - 1)

        If sBA = "MAR" Then
            MacGregorActiveProductsList = aActiveCustom1List

        End If
    Next

    ReDim ActiveICPsList(Ubound(All_ICPs_List))
    ActiveICPsList(0) = "[ICP None]"
    iCounter = 1
    For Each sICP In All_ICPs_List
        If sICP <> "[ICP None]" Then
            EntUd = GetUd(sICP, "Entity", "")
            If Instr(EntUd, "/CloseStartDate:") = 0 Then

                ActiveICPsList(iCounter) = sICP
                iCounter = iCounter + 1
            Else

            End If
        End If
    Next
    ReDim Preserve ActiveICPsList(iCounter - 1)

    NumEntities = UBound(EntitiesAllList)
    ReDim SAPLoadEntities(NumEntities)
    ReDim NONSAPLoadEntities(NumEntities)
    ReDim ActiveEntitiesList(NumEntities)

    ReDim NONGCPLoadEntities(NumEntities)

    iCounter = 0
    SAPEntityCounter = 0
    NONSAPEntityCounter = 0
    GCPEntityCounter = 0
    GCPAddCounter = 0
    NONGCPEntityCounter = 0

    For Each sEnt In EntitiesAllList
        EntUD = GetUD(sEnt, "Entity", "")
        If Instr(EntUD, "/CloseStartDate:") = 0 Then
            If Instr(EntUD,"/SAP_LOAD/") > 0 Then
                SAPLoadEntities(SAPEntityCounter) = sEnt
                SAPEntityCounter = SAPEntityCounter + 1
            Else
                NONSAPLoadEntities(NONSAPEntityCounter) = sEnt
                NONSAPEntityCounter = NONSAPEntityCounter + 1
            End If

                NONGCPLoadEntities(NONGCPEntityCounter) = sEnt
                NONGCPEntityCounter = NONGCPEntityCounter + 1

            ActiveEntitiesList(iCounter) = sEnt
            iCounter = iCounter + 1
        Else

        End If
    Next

    ReDim Preserve SAPLoadEntities(SAPEntityCounter-1)
    ReDim Preserve NONSAPLoadEntities(NONSAPEntityCounter-1)
    ReDim Preserve ActiveEntitiesList(iCounter-1)
    ReDim Preserve NONGCPLoadEntities(NONGCPEntityCounter-1)

    For Each sBA In Array("MacGregor")

            aEntityList = HS.Entity.List(sBA, "[Base]")

        iCounter = 0
        Redim aActiveEntityList(Ubound(aEntityList))
        For Each sEnt In aEntityList
            EntUd = GetUd(sEnt, "Entity", "")
            If Instr(EntUd, "/CloseStartDate:") = 0 Then
                aActiveEntityList(iCounter) = sEnt
                iCounter = iCounter + 1
            Else

            End If
        Next
        Redim Preserve aActiveEntityList(iCounter - 1)

        If sBA = "MacGregor" Then
            MacGregorActiveEntityList = aActiveEntityList

        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N0 - OK - Time(s) = "&NO_SectionTime)

    ClosEntCounter = 0    :    ClosEntCounter2 = 0    :    ClosEntCounter3 = 0
    ClosICPCounter = 0  :    ClosICPCounter2 = 0 :    SLUEntCounter = 0

    For Each Ent in EntitiesAllList

        CloseDate = GetUD(Ent, "Entity", "CloseStartDate")
        If CloseDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(CloseDate,3)
            StartYear = right(CloseDate,4)

            ArrayC3ToClose = Array("IFRS","INP","ADJ","PPAadj","AIFRS","LOAD")

            For Each C3Mbr in ArrayC3ToClose
                Redim Preserve CloseEntitiesWithClosDateList(3,ClosEntCounter2)
                CloseEntitiesWithClosDateList(0,ClosEntCounter2) = StartMonth
                CloseEntitiesWithClosDateList(1,ClosEntCounter2) = StartYear
                CloseEntitiesWithClosDateList(2,ClosEntCounter2) = Ent
                CloseEntitiesWithClosDateList(3,ClosEntCounter2) = C3Mbr

                ClosEntCounter2 = ClosEntCounter2 + 1
            Next
        End If

        SuspendedEndDate = GetUD(Ent, "Entity", "SuspendedEndDate")
        If SuspendedEndDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(SuspendedEndDate,3)
            StartYear = right(SuspendedEndDate,4)

            Redim Preserve EntitiesWithSuspendedDateList(2,ClosEntCounter3)
            EntitiesWithSuspendedDateList(0,ClosEntCounter3) = StartMonth
            EntitiesWithSuspendedDateList(1,ClosEntCounter3) = StartYear
            EntitiesWithSuspendedDateList(2,ClosEntCounter3) = Ent

            ClosEntCounter3 = ClosEntCounter3 + 1
        End If

        If Ent <> "MSEO" Then
            Redim Preserve NonSLUEntList(SLUEntCounter)
            NonSLUEntList(SLUEntCounter) = Ent
            SLUEntCounter = SLUEntCounter + 1
        End IF
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS1 - OK - Time(s) = "&NO_SectionTime)

    C3List = HS.Custom3.List("","[Base]")

    Counter = 0
    For Each Acc In ActiveAccountsList

        If HS.Account.IsCalculated(Acc) = False and HS.Account.IsBase("COPY_SCENARIOS_FLAGS",Acc) = False and Acc <> "LOAD_DATA_BEHIND_NOINPUT_ACTIVATION" Then
            ReDim Preserve Accounts2Loop(Counter)
            Accounts2Loop(Counter) = Acc
            Counter = Counter + 1
        End If
    Next

    Redim C3ToCloseFromScenarioList(1,5000)
    Redim CloseCalculatedScenariosList(1,200000)

    C3Counter = 0     :     ScenCounter = 0
    For Each ScenMember In AllInputScenarios
        ScenarioType = Ucase(GetUD(ScenMember, "Scenario", "ScenarioType"))

        If ScenarioType = "ESTIMATE" or ScenarioType = "ACTUAL" Then
            For Each C3member in C3List
                ValidScenarioTypeForC3 = Ucase(GetUD(C3member, "Custom3", "ValidScenType"))

                If ValidScenarioTypeForC3 <> "ALL" Then
                    If ValidScenarioTypeForC3 <> ScenarioType then
                        If ScenMember <> "BUDGET" Or C3Member <> "PPAadj" Then
                            C3ToCloseFromScenarioList(0,C3Counter) = C3member
                            C3ToCloseFromScenarioList(1,C3Counter) = ScenMember
                            C3Counter = C3Counter + 1
                        End If
                    End If
                End If
            Next
        ElseIf ScenarioType = "CALCULATE" Then

            For Each Acc In Accounts2Loop

                CloseCalculatedScenariosList(0,ScenCounter) = ScenMember
                CloseCalculatedScenariosList(1,ScenCounter) = Acc

                ScenCounter = ScenCounter + 1
            Next
        End If
    Next

    Redim Preserve C3ToCloseFromScenarioList(1,C3Counter-1)
    Redim Preserve CloseCalculatedScenariosList(1,ScenCounter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS2 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each Acc In AccountsAllList
        AccCloseDate = GetUD(Acc, "Account", "CloseStartDate")
        If AccCloseDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(AccCloseDate,3)
            StartYear = right(AccCloseDate,4)

            Redim Preserve ClosedAccountsTimeSpecificList(2,Counter)
            ClosedAccountsTimeSpecificList(0,Counter) = StartMonth
            ClosedAccountsTimeSpecificList(1,Counter) = StartYear
            ClosedAccountsTimeSpecificList(2,Counter) = Acc

            Counter = Counter + 1
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS3 - OK - Time(s) = "&NO_SectionTime)

    C1Counter = 0
    For Each C1 In Custom1AllList
        C1CloseDate = GetUD(C1, "Custom1", "CloseStartDate")
        If C1CloseDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(C1CloseDate,3)
            StartYear = right(C1CloseDate,4)

            Redim Preserve ClosedC1membersTimeSpecificList(2,C1Counter)
            ClosedC1membersTimeSpecificList(0,C1Counter) = StartMonth
            ClosedC1membersTimeSpecificList(1,C1Counter) = StartYear
            ClosedC1membersTimeSpecificList(2,C1Counter) = C1

            C1Counter = C1Counter + 1
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS4 - OK - Time(s) = "&NO_SectionTime)

    C2Counter = 0
    For Each C2 In Custom2AllList

        C2CloseDate = GetUD(C2, "Custom2", "CloseStartDate")
        If C2CloseDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(C2CloseDate,3)
            StartYear = right(C2CloseDate,4)

            Redim Preserve C2timeSpecificCloseList(2,C2Counter)
            C2timeSpecificCloseList(0,C2Counter) = StartMonth
            C2timeSpecificCloseList(1,C2Counter) = StartYear
            C2timeSpecificCloseList(2,C2Counter) = C2

            C2Counter = C2Counter + 1
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS5 - OK - Time(s) = "&NO_SectionTime)

    C1_E_Counter = 0    :    Acc_Scen_Counter = 0
    C1_Counter = 0    :    C2_Counter = 0     :    C3_Counter = 0
    C1_General_Counter = 0     :    C2_General_Counter = 0     :    C3_General_Counter = 0     :    ICP_General_Counter = 0

    Redim AccC1andEntityCloseBasedOnTheUD(3,1000000)
    Redim AccC1CloseBasedOnTheUD(2,200000)
    Redim AccC2CloseBasedOnTheUD(2,200000)
    Redim AccC3CloseBasedOnTheUD(2,200000)
    Redim AccICPCloseBasedOnTheUD(2,200000)
    Redim AccScenCloseList(2,100000)
    Redim AccC1CloseBasedOnTheUD_InEveryScen(1,100000)
    Redim AccC2CloseBasedOnTheUD_InEveryScen(1,100000)
    Redim AccC3CloseBasedOnTheUD_InEveryScen(1,100000)
    Redim AccICPCloseBasedOnTheUD_InEveryScen(1,100000)

    For Each AccountInLoop In ActiveAccountsList
    If HS.Account.IsCalculated(AccountInLoop) = False Then
     FullAccUD = GetUD(AccountInLoop, "Account", "")

     If trim(FullAccUD) <> "/ / / /" and InStr(FullAccUD,"CloseStartDate") = 0 Then

        C1_A_O = GetParamFromTxt("C1_A_O", FullAccUD)    :    C1_A_C = GetParamFromTxt("C1_A_C", FullAccUD)
        C1_E_O = GetParamFromTxt("C1_E_O", FullAccUD)    :    C1_E_C = GetParamFromTxt("C1_E_C", FullAccUD)
        C1_O = GetParamFromTxt("C1_O", FullAccUD)    :    C1_C = GetParamFromTxt("C1_C", FullAccUD)

        C2_A_O = GetParamFromTxt("C2_A_O", FullAccUD)    :    C2_A_C = GetParamFromTxt("C2_A_C", FullAccUD)
        C2_E_O = GetParamFromTxt("C2_E_O", FullAccUD)    :    C2_E_C = GetParamFromTxt("C2_E_C", FullAccUD)
        C2_O = GetParamFromTxt("C2_O", FullAccUD)    :    C2_C = GetParamFromTxt("C2_C", FullAccUD)

        C3_A_O = GetParamFromTxt("C3_A_O", FullAccUD)    :    C3_A_C = GetParamFromTxt("C3_A_C", FullAccUD)
        C3_E_O = GetParamFromTxt("C3_E_O", FullAccUD)    :    C3_E_C = GetParamFromTxt("C3_E_C", FullAccUD)
        C3_O = GetParamFromTxt("C3_O", FullAccUD)    :    C3_C = GetParamFromTxt("C3_C", FullAccUD)

        ICP_A_O = GetParamFromTxt("ICP_A_O", FullAccUD)    :    ICP_A_C = GetParamFromTxt("ICP_A_C", FullAccUD)
        ICP_E_O = GetParamFromTxt("ICP_E_O", FullAccUD)    :    ICP_E_C = GetParamFromTxt("ICP_E_C", FullAccUD)
        ICP_O = GetParamFromTxt("ICP_O", FullAccUD)    :    ICP_C = GetParamFromTxt("ICP_C", FullAccUD)

        If C1_A_O <> "" Or C1_E_O <> "" Or C1_O <> "" Then
            TopMemberToCloseC1 = HS.Account.C1Top(AccountInLoop)
            All_C1_OpenMembers = HS.Custom1.List(TopMemberToCloseC1,"[Base]")
        End If

        If C2_A_O <> "" Or C2_E_O <> "" Or C2_O <> "" Then
            TopMemberToCloseC2 = HS.Account.C2Top(AccountInLoop)
            All_C2_OpenMembers = HS.Custom2.List(TopMemberToCloseC2,"[Base]")
        End If

        If C3_A_O <> "" Or C3_E_O <> "" Or C3_O <> "" Then
            TopMemberToCloseC3 = HS.Account.C3Top(AccountInLoop)
            All_C3_OpenMembers = HS.Custom3.List(TopMemberToCloseC3,"[Base]")
        End If

        If ICP_A_O <> "" Or ICP_A_C <> "" Or ICP_E_O <> "" Or ICP_E_C <> "" Or ICP_O <> "" Or ICP_C <> "" Then
            All_ICP_OpenMembers = Array("[ICP None]")
            If HS.Account.IsICP(AccountInLoop) = True Then
                TopMemberToCloseICP = HS.Account.ICPTopMember(AccountInLoop)
                If TopMemberToCloseICP <> "" And TopMemberToCloseICP <> "[ICP None]" Then
                    All_ICP_OpenMembers = HS.ICP.List(TopMemberToCloseICP,"[Base]")
                End If
            End If
        End If

        If C1_A_O <> "" Then

            If C1_A_O = "ProductLines" Then

                For Each sBA In Array("MacGregor")

                    If sBA = "MacGregor" Then
                        aEntityList = MacGregorActiveEntityList
                        aProductsList = MacGregorActiveProductsList
                    End If

                    For Each EntityToLoop In aEntityList

                            For Each C1ToLoop In aProductsList
                                If HS.Custom1.IsBase(C1_A_O,C1ToLoop) = False Then
                                    For Each sScenario In ActualScenarios

                                        AccC1andEntityCloseBasedOnTheUD(0,C1_E_Counter) = AccountInLoop
                                        AccC1andEntityCloseBasedOnTheUD(1,C1_E_Counter) = sScenario
                                        AccC1andEntityCloseBasedOnTheUD(2,C1_E_Counter) = C1ToLoop
                                        AccC1andEntityCloseBasedOnTheUD(3,C1_E_Counter) = EntityToLoop
                                        C1_E_Counter = C1_E_Counter + 1
                                    Next
                                End If
                            Next

                    Next
                Next

            Else
                C1_A_O_Top_IsBase = HS.Custom1.IsBase("",C1_A_O)
                For each C1ToLoop in All_C1_OpenMembers
                    If C1_A_O_Top_IsBase = False Then
                        If HS.Custom1.IsBase(C1_A_O,C1ToLoop) = False Then
                            For Each sScenario In ActualScenarios

                                AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                                AccC1CloseBasedOnTheUD(1,C1_Counter) = sScenario        :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1ToLoop
                                C1_Counter = C1_Counter + 1
                            Next
                        End If
                    Else
                        If C1_A_O <> C1ToLoop Then
                            For Each sScenario In ActualScenarios

                                AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                                AccC1CloseBasedOnTheUD(1,C1_Counter) = sScenario        :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1ToLoop
                                C1_Counter = C1_Counter + 1
                            Next
                        End If
                    End If
                Next
            End If
        End If

        If C1_E_O <> "" Then
            C1_E_O_Top_IsBase = HS.Custom1.IsBase("",C1_E_O)
            For each C1ToLoop in All_C1_OpenMembers
                If C1_E_O_Top_IsBase = False Then
                    If HS.Custom1.IsBase(C1_E_O,C1ToLoop) = False Then
                        For each StrScenario In EstimateScenarioslist

                            AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                            AccC1CloseBasedOnTheUD(1,C1_Counter) = StrScenario        :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1ToLoop
                            C1_Counter = C1_Counter + 1
                        Next
                    End If
                Else
                    If C1_E_O <> C1ToLoop Then
                        For each StrScenario In EstimateScenarioslist

                            AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                            AccC1CloseBasedOnTheUD(1,C1_Counter) = StrScenario        :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1ToLoop
                            C1_Counter = C1_Counter + 1
                        Next
                    End If
                End If
            Next
        End If

        If C1_O <> "" Then
            C1_O_Top_IsBase = HS.Custom1.IsBase("",C1_O)
            For each C1ToLoop in All_C1_OpenMembers
                If C1_O_Top_IsBase = False Then
                    If HS.Custom1.IsBase(C1_O,C1ToLoop) = False Then
                        AccC1CloseBasedOnTheUD_InEveryScen(0,C1_General_Counter) = AccountInLoop
                        AccC1CloseBasedOnTheUD_InEveryScen(1,C1_General_Counter) = C1ToLoop
                        C1_General_Counter = C1_General_Counter + 1
                    End If
                Else
                    If C1_O <> C1ToLoop Then
                        AccC1CloseBasedOnTheUD_InEveryScen(0,C1_General_Counter) = AccountInLoop
                        AccC1CloseBasedOnTheUD_InEveryScen(1,C1_General_Counter) = C1ToLoop
                        C1_General_Counter = C1_General_Counter + 1
                    End If
                End If
            Next
        End If

        If C1_A_C <> "" Then
            C1_A_C_Top_IsBase = HS.Custom1.IsBase("",C1_A_C)
            If C1_A_C_Top_IsBase = False Then
                For each C1_To_Close in HS.Custom1.List(C1_A_C,"[Base]")
                    For Each sScenario In ActualScenarios

                        AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                        AccC1CloseBasedOnTheUD(1,C1_Counter) = sScenario        :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1_To_Close
                        C1_Counter = C1_Counter + 1
                    Next
                Next
            Else
                For Each sScenario In ActualScenarios

                    AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                    AccC1CloseBasedOnTheUD(1,C1_Counter) = sScenario        :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1_A_C
                    C1_Counter = C1_Counter + 1
                Next
            End If
        End If

        If C1_E_C <> "" Then
            C1_E_C_Top_IsBase = HS.Custom1.IsBase("",C1_E_C)
            If C1_E_C_Top_IsBase = False Then
                For each C1_To_Close in HS.Custom1.List(C1_E_C,"[Base]")
                    For each StrScenario In EstimateScenarioslist

                        AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                        AccC1CloseBasedOnTheUD(1,C1_Counter) = StrScenario    :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1_To_Close
                        C1_Counter = C1_Counter + 1
                    Next
                Next
            Else
                For each StrScenario In EstimateScenarioslist

                    AccC1CloseBasedOnTheUD(0,C1_Counter) = AccountInLoop
                    AccC1CloseBasedOnTheUD(1,C1_Counter) = StrScenario    :    AccC1CloseBasedOnTheUD(2,C1_Counter) = C1_E_C
                    C1_Counter = C1_Counter + 1
                Next
            End If
        End If

        If C1_C <> "" Then
            C1_C_Top_IsBase = HS.Custom1.IsBase("",C1_C)
                If C1_C_Top_IsBase = False Then
                    For each C1_To_Close in HS.Custom1.List(C1_C,"[Base]")
                        AccC1CloseBasedOnTheUD_InEveryScen(0,C1_General_Counter) = AccountInLoop
                        AccC1CloseBasedOnTheUD_InEveryScen(1,C1_General_Counter) = C1_To_Close
                        C1_General_Counter = C1_General_Counter + 1
                    Next
                Else
                    AccC1CloseBasedOnTheUD_InEveryScen(0,C1_General_Counter) = AccountInLoop
                    AccC1CloseBasedOnTheUD_InEveryScen(1,C1_General_Counter) = C1_C
                    C1_General_Counter = C1_General_Counter + 1
                End If
        End If

        If C2_A_O <> "" Then
            C2_A_O_Top_IsBase = HS.Custom2.IsBase("",C2_A_O)
            For each C2ToLoop in All_C2_OpenMembers
                If C2_A_O_Top_IsBase = False Then
                    If HS.Custom2.IsBase(C2_A_O,C2ToLoop) = False Then
                        For Each sScenario In ActualScenarios

                            AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                            AccC2CloseBasedOnTheUD(1,C2_Counter) = sScenario    :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2ToLoop
                            C2_Counter = C2_Counter + 1
                        Next
                    End If
                Else
                    If C2_A_O <> C2ToLoop Then
                        For Each sScenario In ActualScenarios

                            AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                            AccC2CloseBasedOnTheUD(1,C2_Counter) = sScenario    :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2ToLoop
                            C2_Counter = C2_Counter + 1
                        Next
                    End If
                End If
            Next
        End If

        If C2_E_O <> "" Then
            C2_E_O_Top_IsBase = HS.Custom2.IsBase("",C2_E_O)
            For each C2ToLoop in All_C2_OpenMembers
                If C2_E_O_Top_IsBase = False Then
                    If HS.Custom2.IsBase(C2_E_O,C2ToLoop) = False Then
                        For each StrScenario In EstimateScenarioslist

                            AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                            AccC2CloseBasedOnTheUD(1,C2_Counter) = StrScenario        :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2ToLoop
                            C2_Counter = C2_Counter + 1
                        Next
                    End If
                Else
                    If C2_E_O <> C2ToLoop Then
                        For each StrScenario In EstimateScenarioslist

                            AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                            AccC2CloseBasedOnTheUD(1,C2_Counter) = StrScenario        :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2ToLoop
                            C2_Counter = C2_Counter + 1
                        Next
                    End If
                End If
            Next
        End If

        If C2_O <> "" Then
            C2_O_Top_IsBase = HS.Custom2.IsBase("",C2_O)
                For each C2ToLoop in All_C2_OpenMembers
                    If C2_O_Top_IsBase = False Then
                        If HS.Custom2.IsBase(C2_O,C2ToLoop) = False Then
                            AccC2CloseBasedOnTheUD_InEveryScen(0,C2_General_Counter) = AccountInLoop
                            AccC2CloseBasedOnTheUD_InEveryScen(1,C2_General_Counter) = C2ToLoop
                            C2_General_Counter = C2_General_Counter + 1
                        End If
                    Else
                        If C2_O <> C2ToLoop Then
                            AccC2CloseBasedOnTheUD_InEveryScen(0,C2_General_Counter) = AccountInLoop
                            AccC2CloseBasedOnTheUD_InEveryScen(1,C2_General_Counter) = C2ToLoop
                            C2_General_Counter = C2_General_Counter + 1
                        End If
                    End If
                Next
        End If

        If C2_A_C <> "" Then
            C2_A_C_Top_IsBase = HS.Custom2.IsBase("",C2_A_C)
            If C2_A_C_Top_IsBase = False Then
                For each C2_To_Close in HS.Custom2.List(C2_A_C,"[Base]")
                    For Each sScenario In ActualScenarios

                        AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                        AccC2CloseBasedOnTheUD(1,C2_Counter) = sScenario    :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2_To_Close
                        C2_Counter = C2_Counter + 1
                    Next
                Next
            Else
                For Each sScenario In ActualScenarios

                    AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                    AccC2CloseBasedOnTheUD(1,C2_Counter) = sScenario    :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2_A_C
                    C2_Counter = C2_Counter + 1
                Next
            End If
        End If

        If C2_E_C <> "" Then
            C2_E_C_Top_IsBase = HS.Custom2.IsBase("",C2_E_C)
            For each StrScenario In EstimateScenarioslist
                If C2_E_C_Top_IsBase = False Then
                    For each C2_To_Close in HS.Custom2.List(C2_E_C,"[Base]")

                        AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                        AccC2CloseBasedOnTheUD(1,C2_Counter) = StrScenario    :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2_To_Close
                        C2_Counter = C2_Counter + 1
                    Next
                Else

                    AccC2CloseBasedOnTheUD(0,C2_Counter) = AccountInLoop
                    AccC2CloseBasedOnTheUD(1,C2_Counter) = StrScenario    :    AccC2CloseBasedOnTheUD(2,C2_Counter) = C2_E_C
                    C2_Counter = C2_Counter + 1
                End If
            Next
        End If

        If C2_C <> "" Then
            C2_C_Top_IsBase = HS.Custom2.IsBase("",C2_C)
            If C2_C_Top_IsBase = False Then
                For each C2_To_Close in HS.Custom2.List(C2_C,"[Base]")
                    AccC2CloseBasedOnTheUD_InEveryScen(0,C2_General_Counter) = AccountInLoop
                    AccC2CloseBasedOnTheUD_InEveryScen(1,C2_General_Counter) = C2_To_Close
                    C2_General_Counter = C2_General_Counter + 1
                Next
            Else
                AccC2CloseBasedOnTheUD_InEveryScen(0,C2_General_Counter) = AccountInLoop
                AccC2CloseBasedOnTheUD_InEveryScen(1,C2_General_Counter) = C2_C
                C2_General_Counter = C2_General_Counter + 1
            End If
        End If

        If C3_A_O <> "" Then
            C3_A_O_Top_IsBase = HS.Custom3.IsBase("",C3_A_O)
            For each C3ToLoop in All_C3_OpenMembers
                If C3_A_O_Top_IsBase = False Then
                    If HS.Custom3.IsBase(C3_A_O,C3ToLoop) = False Then
                        For Each sScenario In ActualScenarios

                            AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                            AccC3CloseBasedOnTheUD(1,C3_Counter) = sScenario    :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3ToLoop
                            C3_Counter = C3_Counter + 1
                        Next
                    End If
                Else
                    If C3_A_O <> C3ToLoop Then
                        For Each sScenario In ActualScenarios

                            AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                            AccC3CloseBasedOnTheUD(1,C3_Counter) = sScenario    :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3ToLoop
                            C3_Counter = C3_Counter + 1
                        Next
                    End If
                End If
            Next
        End If

        If C3_E_O <> "" Then
            C3_E_O_Top_IsBase = HS.Custom3.IsBase("",C3_E_O)
            For each C3ToLoop in All_C3_OpenMembers
                If C3_E_O_Top_IsBase = False Then
                    If HS.Custom3.IsBase(C3_E_O,C3ToLoop) = False Then
                        For each StrScenario In EstimateScenarioslist

                            AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                            AccC3CloseBasedOnTheUD(1,C3_Counter) = StrScenario        :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3ToLoop
                            C3_Counter = C3_Counter + 1
                        Next
                    End If
                Else
                    If C3_E_O <> C3ToLoop Then
                        For each StrScenario In EstimateScenarioslist

                            AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                            AccC3CloseBasedOnTheUD(1,C3_Counter) = StrScenario        :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3ToLoop
                            C3_Counter = C3_Counter + 1
                        Next
                    End If
                End If
            Next
        End If

        If C3_O <> "" Then
            C3_O_Top_IsBase = HS.Custom3.IsBase("",C3_O)
                For each C3ToLoop in All_C3_OpenMembers
                    If C3_O_Top_IsBase = False Then
                        If HS.Custom3.IsBase(C3_O,C3ToLoop) = False Then
                            AccC3CloseBasedOnTheUD_InEveryScen(0,C3_General_Counter)  = AccountInLoop
                            AccC3CloseBasedOnTheUD_InEveryScen(1,C3_General_Counter)  = C3ToLoop
                            C3_General_Counter = C3_General_Counter + 1
                        End If
                    Else
                        If C3_O <> C3ToLoop Then
                            AccC3CloseBasedOnTheUD_InEveryScen(0,C3_General_Counter)  = AccountInLoop
                            AccC3CloseBasedOnTheUD_InEveryScen(1,C3_General_Counter)  = C3ToLoop
                            C3_General_Counter = C3_General_Counter + 1
                        End If
                    End If
                Next
        End If

        If C3_A_C <> "" Then
            C3_A_C_Top_IsBase = HS.Custom3.IsBase("",C3_A_C)
            If C3_A_C_Top_IsBase = False Then
                For each C3_To_Close in HS.Custom3.List(C3_A_C,"[Base]")
                    For Each sScenario In ActualScenarios

                        AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                        AccC3CloseBasedOnTheUD(1,C3_Counter) = sScenario    :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3_To_Close
                        C3_Counter = C3_Counter + 1
                    Next
                Next
            Else
                For Each sScenario In ActualScenarios

                    AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                    AccC3CloseBasedOnTheUD(1,C3_Counter) = sScenario    :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3_A_C
                    C3_Counter = C3_Counter + 1
                Next
            End If
        End If

        If C3_E_C <> "" Then
            C3_E_C_Top_IsBase = HS.Custom3.IsBase("",C3_E_C)
            For each StrScenario In EstimateScenarioslist
                If C3_E_C_Top_IsBase = False Then
                    For each C3_To_Close in HS.Custom3.List(C3_E_C,"[Base]")

                        AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                        AccC3CloseBasedOnTheUD(1,C3_Counter) = StrScenario    :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3_To_Close
                        C3_Counter = C3_Counter + 1
                    Next
                Else

                    AccC3CloseBasedOnTheUD(0,C3_Counter) = AccountInLoop
                    AccC3CloseBasedOnTheUD(1,C3_Counter) = StrScenario    :    AccC3CloseBasedOnTheUD(2,C3_Counter) = C3_E_C
                    C3_Counter = C3_Counter + 1
                End If
            Next
        End If

        If C3_C <> "" Then
            C3_C_Top_IsBase = HS.Custom3.IsBase("",C3_C)
            If C3_C_Top_IsBase = False Then
                For each C3_To_Close in HS.Custom3.List(C3_C,"[Base]")
                    AccC3CloseBasedOnTheUD_InEveryScen(0,C3_General_Counter)  = AccountInLoop
                    AccC3CloseBasedOnTheUD_InEveryScen(1,C3_General_Counter)  = C3_To_Close
                    C3_General_Counter = C3_General_Counter + 1
                Next
            Else
                AccC3CloseBasedOnTheUD_InEveryScen(0,C3_General_Counter)  = AccountInLoop
                AccC3CloseBasedOnTheUD_InEveryScen(1,C3_General_Counter)  = C3_C
                C3_General_Counter = C3_General_Counter + 1
            End If
        End If

        If ICP_A_O <> "" Then
            If ICP_A_O = "[ICP Top]" or ICP_A_O = "[ICP Entities]" or ICP_A_O = "[ICP None]" Then
                If ICP_A_O = "[ICP Top]" Then
                ElseIf ICP_A_O = "[ICP Entities]" Then
                    For Each sScenario In ActualScenarios

                        AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                        AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = "[ICP None]"
                        ICP_Counter = ICP_Counter + 1
                    Next
                ElseIf ICP_A_O = "[ICP None]" Then
                    For each ICPToLoop in All_ICP_OpenMembers
                        If ICPToLoop <> ICP_A_O Then
                            For Each sScenario In ActualScenarios

                                AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                ICP_Counter = ICP_Counter + 1
                            Next
                        End If

                    Next
                End If

            Else
                ICP_A_O_Top_IsBase = HS.Entity.IsBase("",ICP_A_O)
                For each ICPToLoop in All_ICP_OpenMembers
                    If ICPToLoop <> "[ICP None]" Then
                        If ICP_A_O_Top_IsBase = False Then
                            If HS.Entity.IsBase(ICP_A_O,ICPToLoop) = False Then
                                For Each sScenario In ActualScenarios

                                    AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                    AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                    ICP_Counter = ICP_Counter + 1
                                Next
                            End If
                        Else
                            If ICP_A_O <> ICPToLoop Then
                                For Each sScenario In ActualScenarios

                                    AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                    AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                    ICP_Counter = ICP_Counter + 1
                                Next
                            End If
                        End If
                    End If
                Next
            End If
        End If

        If ICP_E_O <> "" Then
            If ICP_E_O = "[ICP Top]" or ICP_E_O = "[ICP Entities]" or ICP_E_O = "[ICP None]" Then
                For each StrScenario In EstimateScenarioslist
                    If ICP_E_O = "[ICP Top]" Then
                    ElseIf ICP_E_O = "[ICP Entities]" Then

                        AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                        AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = "[ICP None]"
                        ICP_Counter = ICP_Counter + 1
                    ElseIf ICP_E_O = "[ICP None]" Then
                        For each ICPToLoop in All_ICP_OpenMembers
                            If ICPToLoop <> ICP_E_O Then

                                AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                ICP_Counter = ICP_Counter + 1
                            End If
                        Next
                    End If
                Next

            Else
                ICP_E_O_Top_IsBase = HS.Entity.IsBase("",ICP_E_O)
                For each ICPToLoop in All_ICP_OpenMembers
                    If ICPToLoop <> "[ICP None]" Then
                        If ICP_E_O_Top_IsBase = False Then
                            If HS.Entity.IsBase(ICP_E_O,ICPToLoop) = False Then
                                For each StrScenario In EstimateScenarioslist

                                    AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                    AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                    ICP_Counter = ICP_Counter + 1
                                Next
                            End If
                        Else
                            If ICP_E_O <> ICPToLoop Then
                                For each StrScenario In EstimateScenarioslist

                                    AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                    AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                    ICP_Counter = ICP_Counter + 1
                                Next
                            End If
                        End If
                    End If
                Next
            End If
        End If

        If ICP_O <> "" Then
            If ICP_O = "[ICP Top]" or ICP_O = "[ICP Entities]" or ICP_O = "[ICP None]" Then
                If ICP_O = "[ICP Top]" Then
                ElseIf ICP_O = "[ICP Entities]" Then
                    AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter)   = AccountInLoop
                    AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter)   = "[ICP None]"
                    ICP_General_Counter = ICP_General_Counter + 1
                ElseIf ICP_O = "[ICP None]" Then
                    For each ICPToLoop in All_ICP_OpenMembers
                        If ICPToLoop <> ICP_O Then
                            AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter)   = AccountInLoop
                            AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter)   = ICPToLoop
                            ICP_General_Counter = ICP_General_Counter + 1
                        End If
                    Next
                End If

            Else

                ICP_O_Top_IsBase = HS.Entity.IsBase("",ICP_O)
                For each ICPToLoop in All_ICP_OpenMembers
                    If ICPToLoop <> "[ICP None]" Then
                        If ICP_O_Top_IsBase = False Then
                            If HS.Entity.IsBase(ICP_O,ICPToLoop) = False Then
                                AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter)   = AccountInLoop
                                AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter)   = ICPToLoop
                                ICP_General_Counter = ICP_General_Counter + 1
                            End If
                        Else
                            If ICP_O <> ICPToLoop Then
                                AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter)   = AccountInLoop
                                AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter)   = ICPToLoop
                                ICP_General_Counter = ICP_General_Counter + 1
                            End If
                        End If
                    End If
                Next
            End If
        End If

        If ICP_A_C <> "" Then
            If ICP_A_C = "[ICP Top]" or ICP_A_C = "[ICP Entities]" or ICP_A_C = "[ICP None]" Then
                If ICP_A_C = "[ICP Top]" Then
                    For each ICPToLoop in All_ICP_OpenMembers
                        For Each sScenario In ActualScenarios

                            AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                            AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                            ICP_Counter = ICP_Counter + 1
                        Next
                    Next
                ElseIf ICP_A_C = "[ICP Entities]" Then
                    For each ICPToLoop in All_ICP_OpenMembers
                        If ICPToLoop <> "[ICP None]" Then
                            For Each sScenario In ActualScenarios

                                AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                ICP_Counter = ICP_Counter + 1
                            Next
                        End If
                    Next
                ElseIf ICP_A_C = "[ICP None]" Then
                    For Each sScenario In ActualScenarios

                        AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                        AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICP_A_C
                        ICP_Counter = ICP_Counter + 1
                    Next
                End If
            Else
                ICP_A_C_Top_IsBase = HS.Entity.IsBase("",ICP_A_C)
                If ICP_A_C_Top_IsBase = False Then
                    For each ICP_To_Close in HS.Entity.List(ICP_A_C,"[Base]")
                        If HS.Entity.IsICP(ICP_To_Close) = TRUE Then
                            For Each sScenario In ActualScenarios

                                AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICP_To_Close
                                ICP_Counter = ICP_Counter + 1
                            Next
                        End If
                    Next
                Else
                    If HS.Entity.IsICP(ICP_A_C) = TRUE Then
                        For Each sScenario In ActualScenarios

                            AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                            AccICPCloseBasedOnTheUD(1,ICP_Counter) = sScenario    :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICP_A_C
                            ICP_Counter = ICP_Counter + 1
                        Next
                    End If
                End If
            End If
        End If

        If ICP_E_C <> "" Then
            If ICP_E_C = "[ICP Top]" or ICP_E_C = "[ICP Entities]" or ICP_E_C = "[ICP None]" Then
                For each StrScenario In EstimateScenarioslist
                    If ICP_E_C = "[ICP Top]" Then
                        For each ICPToLoop in All_ICP_OpenMembers

                            AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                            AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                            ICP_Counter = ICP_Counter + 1
                        Next
                    ElseIf ICP_E_C = "[ICP Entities]" Then
                        For each ICPToLoop in All_ICP_OpenMembers
                            If ICPToLoop <> "[ICP None]" Then

                                AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICPToLoop
                                ICP_Counter = ICP_Counter + 1
                            End If
                        Next
                    ElseIf ICP_E_C = "[ICP None]" Then

                        AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                        AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICP_E_C
                        ICP_Counter = ICP_Counter + 1
                    End If
                Next
            Else
                ICP_E_C_Top_IsBase = HS.Entity.IsBase("",ICP_E_C)
                If ICP_E_C_Top_IsBase = False Then
                    For each ICP_To_Close in HS.Entity.List(ICP_E_C,"[Base]")
                        If HS.Entity.IsICP(ICP_To_Close) = TRUE Then
                            For each StrScenario In EstimateScenarioslist

                                AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICP_To_Close
                                ICP_Counter = ICP_Counter + 1
                            Next
                        End If
                    Next
                Else
                    If HS.Entity.IsICP(ICP_E_C) = TRUE Then
                        For each StrScenario In EstimateScenarioslist

                            AccICPCloseBasedOnTheUD(0,ICP_Counter) = AccountInLoop
                            AccICPCloseBasedOnTheUD(1,ICP_Counter) = StrScenario        :    AccICPCloseBasedOnTheUD(2,ICP_Counter) = ICP_E_C
                            ICP_Counter = ICP_Counter + 1
                        Next
                    End If
                End If
            End If
        End If

        If ICP_C <> "" Then
            If ICP_C = "[ICP Top]" or ICP_C = "[ICP Entities]" or ICP_C = "[ICP None]" Then

                    If ICP_C = "[ICP Top]" Then
                        For each ICPToLoop in All_ICP_OpenMembers
                            AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter)  = AccountInLoop
                            AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter)  = ICPToLoop
                            ICP_General_Counter = ICP_General_Counter + 1
                        Next
                    ElseIf ICP_C = "[ICP Entities]" Then
                        For each ICPToLoop in All_ICP_OpenMembers
                            If ICPToLoop <> "[ICP None]" Then
                                AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter) = AccountInLoop
                                AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter) = ICPToLoop
                                ICP_General_Counter = ICP_General_Counter + 1
                            End If
                        Next
                    ElseIf ICP_C = "[ICP None]" Then
                        AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter) = AccountInLoop
                        AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter) = ICP_C
                        ICP_General_Counter = ICP_General_Counter + 1
                    End If

            Else
                ICP_C_Top_IsBase = HS.Entity.IsBase("",ICP_C)
                If ICP_C_Top_IsBase = False Then
                    For each ICP_To_Close in HS.Entity.List(ICP_C,"[Base]")
                        If HS.Entity.IsICP(ICP_To_Close) = TRUE Then
                            AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter) = AccountInLoop
                            AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter) = ICP_To_Close
                            ICP_General_Counter = ICP_General_Counter + 1
                        End If
                    Next
                Else
                    If HS.Entity.IsICP(ICP_C) = TRUE Then
                        AccICPCloseBasedOnTheUD_InEveryScen(0,ICP_General_Counter) = AccountInLoop
                        AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter) = ICP_C
                        ICP_General_Counter = ICP_General_Counter + 1
                    End If
                End If

            End If
        End If

    End If

      If InStr(1,FullAccUD,"ClosedInEst",vbTextCompare) > 0 Then

        For Each C3MemberToClose in HS.Custom3.List("C3_TECHNICAL_PARENT", "[Base]")
            FullCustom3UD = GetUD(C3MemberToClose, "Custom3", "")
              For each StrScenario In EstimateScenarioslist
                If InStr(FullCustom3UD, "Calc") = 0 And UCase(C3MemberToClose) <> "BEGBALADJ" And InStr(FullCustom3UD, "ValidScenType:Actual") = 0 Then

                    AccScenCloseList(0, Acc_Scen_Counter) = AccountInLoop    :    AccScenCloseList(1, Acc_Scen_Counter) = StrScenario
                    AccScenCloseList(2, Acc_Scen_Counter) = C3MemberToClose
                    Acc_Scen_Counter = Acc_Scen_Counter + 1
                End If
            Next
        Next
      End If
      If InStr(1,FullAccUD,"ClosedInAct",vbTextCompare) > 0 Then

        For Each C3MemberToClose in HS.Custom3.List("C3_TECHNICAL_PARENT", "[Base]")
            FullCustom3UD = GetUD(C3MemberToClose, "Custom3", "")
            If InStr(FullCustom3UD, "Calc") = 0 And UCase(C3MemberToClose) <> "BEGBALADJ" Then
                For Each sScenario In ActualScenarios

                    AccScenCloseList(0, Acc_Scen_Counter) = AccountInLoop    :    AccScenCloseList(1, Acc_Scen_Counter) = sScenario
                    AccScenCloseList(2, Acc_Scen_Counter) = C3MemberToClose
                    Acc_Scen_Counter = Acc_Scen_Counter + 1
                Next
            End If
        Next
      End If

    End If
    Next

    Redim Preserve AccC1andEntityCloseBasedOnTheUD(3,C1_E_Counter-1)
    Redim Preserve AccC1CloseBasedOnTheUD(2,C1_Counter-1)
    Redim Preserve AccC2CloseBasedOnTheUD(2,C2_Counter-1)
    Redim Preserve AccC3CloseBasedOnTheUD(2,C3_Counter-1)
    Redim Preserve AccICPCloseBasedOnTheUD(2,ICP_Counter-1)
    Redim Preserve AccScenCloseList(2,Acc_Scen_Counter-1)
    Redim Preserve AccC1CloseBasedOnTheUD_InEveryScen(1,C1_General_Counter-1)
    Redim Preserve AccC2CloseBasedOnTheUD_InEveryScen(1,C2_General_Counter-1)
    Redim Preserve AccC3CloseBasedOnTheUD_InEveryScen(1,C3_General_Counter-1)
    Redim Preserve AccICPCloseBasedOnTheUD_InEveryScen(1,ICP_General_Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS6 - OK - Time(s) = "&NO_SectionTime)

    Redim CloseOtherBAsProducts(1,300000)
    BA_Prod_Counter = 0
    For Each EntityToLoop In ActiveEntitiesList

        If HS.Entity.IsBase("MACGREGOR_STRATEGYTOTAL", EntityToLoop) = FALSE Then
            For Each ProdInLoop In MacGregorActiveProductsList
                CloseOtherBAsProducts(0,BA_Prod_Counter) = EntityToLoop
                CloseOtherBAsProducts(1,BA_Prod_Counter) = ProdInLoop
                BA_Prod_Counter = BA_Prod_Counter + 1
            Next
        End If

    Next
    Redim Preserve CloseOtherBAsProducts(1,BA_Prod_Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS7 - OK - Time(s) = "&NO_SectionTime)

    RM70AccountsList = HS.Account.List("RM70","[Base]")
    Redim RM70_RM50_Accs_ToCloseFromSERProducts(10000)
    Counter = 0
    For each AccToClose in RM70AccountsList
        If HS.Account.IsCalculated(AccToClose) = false and HS.Account.IsBase("RM50",AccToClose) = False and AccToClose <> "RM69" Then
             RM70_RM50_Accs_ToCloseFromSERProducts(Counter) = AccToClose
            Counter = Counter + 1
        End If
    Next
    Redim Preserve RM70_RM50_Accs_ToCloseFromSERProducts(Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS10 - OK - Time(s) = "&NO_SectionTime)

    ClosEntCounter = 0
    SP_Counter = 0

    ReDim SparePartSER01CloseList(3,20000)
    ReDim EntScenCloseList(2,1000)
    ReDim ICPScenCloseList(2,1000)

    For Each EntityInLoop In ActiveEntitiesList
        FullEntUD = GetUD(EntityInLoop, "Entity", "")

        C3MembersToCloseFromClosedIn = Array("IFRS","INP","ADJ","PPAadj","AIFRS","LOAD")

        If InStr(1,FullEntUD,"ClosedInEst",vbTextCompare) > 0 Then
            For each C3Mbr in C3MembersToCloseFromClosedIn
                For each StrScenario In EstimateScenarioslist
                    EntScenCloseList(0,ClosEntCounter) = EntityInLoop    :    EntScenCloseList(1,ClosEntCounter) = StrScenario     :    EntScenCloseList(2,ClosEntCounter) = C3Mbr
                    ICPScenCloseList(0,ClosEntCounter) = EntityInLoop    :    ICPScenCloseList(1,ClosEntCounter) = StrScenario     :    ICPScenCloseList(2,ClosEntCounter) = C3Mbr
                    ClosEntCounter = ClosEntCounter + 1
                Next
            Next
        End If
        If InStr(1,FullEntUD,"ClosedInAct",vbTextCompare) > 0 Then
             For each C3Mbr in C3MembersToCloseFromClosedIn
                For Each sScenario In ActualScenarios
                    EntScenCloseList(0,ClosEntCounter) = EntityInLoop    :    EntScenCloseList(1,ClosEntCounter) = sScenario     :    EntScenCloseList(2,ClosEntCounter) = C3Mbr
                    ICPScenCloseList(0,ClosEntCounter) = EntityInLoop    :    ICPScenCloseList(1,ClosEntCounter) = sScenario     :    ICPScenCloseList(2,ClosEntCounter) = C3Mbr
                    ClosEntCounter = ClosEntCounter + 1
                Next
             Next
        End If

    Next

    Redim Preserve ICPScenCloseList(2,ClosEntCounter-1)
    Redim Preserve EntScenCloseList(2,ClosEntCounter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS11 - OK - Time(s) = "&NO_SectionTime)

    Redim ActAccsToCloseFromEST(1,100000)
    Counter = 0

    For each StrScenario In EstimateScenarioslist
        For Each AccToClose In ActiveAccountsList
            If HS.Account.IsBase("EST",AccToClose) = False and HS.Account.IsBase("VALIDATION",AccToClose) = False and HS.Account.IsBase("HELP_ACCOUNTS",AccToClose) = False and HS.Account.IsBase("GLOBAL",AccToClose) = False and HS.Account.IsBase("POST_ACQ_RE_CTA",AccToClose) = False and HS.Account.IsBase("ACQ_ACCOUNTS",AccToClose) = False Then
                ActAccsToCloseFromEST(0,Counter) = StrScenario    :    ActAccsToCloseFromEST(1,Counter) = AccToClose
                Counter = Counter + 1
            End If
        Next
    Next
    Redim Preserve ActAccsToCloseFromEST(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS14 - OK - Time(s) = "&NO_SectionTime)

    Redim AccToCloseInActual(20000)
    Counter = 0

    AccTopsToCheck = Array("GLOBAL","RESULT","BALANCE_SHEET","CAPEX","ACCREC","VOLUMES","VOLUMES_ADDINFO", "VOLUMES_SSS","CASHFLOW","SUPPORT_FUNCTIONS", _
                           "HR_MONTHLY","NOTES","KEYFIG","HELP_ACCOUNTS","ASSETS_EMPLOYED","VALIDATION", "ADDINFO","ACQ_ACCOUNTS","POST_ACQ_RE_CTA")

    For Each AccToClose In ActiveAccountsList

        CloseNeedToClose = True
        For each AccTop in AccTopsToCheck
            If HS.Account.IsBase(AccTop,AccToClose) = true then
                CloseNeedToClose = False
                Exit for
            End If
        Next

        If CloseNeedToClose = True Then
            AccToCloseInActual(Counter) = AccToClose
            Counter = Counter + 1
        End If

    Next
    Redim Preserve AccToCloseInActual(Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS15 - OK - Time(s) = "&NO_SectionTime)

    Redim RM21_ICP_C1_ToCloseList(2,500000)
    Counter = 0

    For Each C1ToClose In ActiveCustom1List

                For Each ICPToClose In ActiveICPsList
                    If ICPToClose <> "[ICP None]" Then
                        RM21_ICP_C1_ToCloseList(0,Counter) = C1ToClose    :    RM21_ICP_C1_ToCloseList(1,Counter) = ICPToClose
                        RM21_ICP_C1_ToCloseList(2,Counter) = "RM21"
                        Counter = Counter + 1
                    End If
                Next

    Next
    Redim Preserve RM21_ICP_C1_ToCloseList(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS16 - OK - Time(s) = "&NO_SectionTime)

    Redim FLU_SP_ToCloseFrom_RM21_C2Inp(2,1000)
    Counter = 0
    For Each FLU_Ent In ActiveEntitiesList

            FLU_SP_ToCloseFrom_RM21_C2Inp(0,Counter) = FLU_Ent
            FLU_SP_ToCloseFrom_RM21_C2Inp(1,Counter) = "RM21"
            FLU_SP_ToCloseFrom_RM21_C2Inp(2,Counter) = "C2_Inp"
            Counter = Counter + 1

    Next
    Redim Preserve FLU_SP_ToCloseFrom_RM21_C2Inp(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS20 - OK - Time(s) = "&NO_SectionTime)

    Redim ICPs_To_Close_From_RM21_SpareParts_Input(1,2000)
    Counter = 0
    For Each ICP_To_Close In ActiveICPsList

        ICP_UD = GetUD(ICP_To_Close, "Entity", "")
        If Instr(ICP_UD,"/SPAREPARTENT/") = 0 and ICP_To_Close <> "[ICP None]" and  InStr(ICP_UD, "/CloseStartDate:") = 0  Then
            ICPs_To_Close_From_RM21_SpareParts_Input(0,Counter) = "RM21"
            ICPs_To_Close_From_RM21_SpareParts_Input(1,Counter) = ICP_To_Close
            Counter = Counter + 1
        End If
    Next
    Redim Preserve ICPs_To_Close_From_RM21_SpareParts_Input(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS23 - OK - Time(s) = "&NO_SectionTime)

    redim CloseNonInputMonthsFromAccounts(1,50000)
    Counter = 0
    For Each AccToCheck In ActiveAccountsList
        InputFreq = GetUD(AccToCheck, "Account", "AccFreq")

        If InputFreq = "Q" Then
            For each NonQuarterMonth in PeriodNoQuarterList
                CloseNonInputMonthsFromAccounts(0,Counter) = AccToCheck
                CloseNonInputMonthsFromAccounts(1,Counter) = NonQuarterMonth
                Counter = Counter + 1
            Next
        ElseIf InputFreq = "A" Then
            For each NonYearMonth in PeriodMonthExeptDecList
                CloseNonInputMonthsFromAccounts(0,Counter) = AccToCheck
                CloseNonInputMonthsFromAccounts(1,Counter) = NonYearMonth
                Counter = Counter + 1
            Next
        ElseIf InputFreq = "S" Then
            For each NonSemiAnnualMonth in PeriodMonthList
                If NonSemiAnnualMonth <> "Jun" and NonSemiAnnualMonth <> "Dec" Then
                    CloseNonInputMonthsFromAccounts(0,Counter) = AccToCheck
                    CloseNonInputMonthsFromAccounts(1,Counter) = NonSemiAnnualMonth
                    Counter = Counter + 1
                End If
            Next
        ElseIf InputFreq = "Q3Q4" Then
            For each Q3Q4Month in PeriodMonthList
                If Q3Q4Month <> "Sep" and Q3Q4Month <> "Dec" Then
                    CloseNonInputMonthsFromAccounts(0,Counter) = AccToCheck
                    CloseNonInputMonthsFromAccounts(1,Counter) = Q3Q4Month
                    Counter = Counter + 1
                End If
            Next
        End If
    Next
    Redim Preserve CloseNonInputMonthsFromAccounts(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS24 - OK - Time(s) = "&NO_SectionTime)

    COPY_SCENARIO_FLAGS = HS.Account.List("COPY_SCENARIOS_FLAGS","[Base]")

    Redim CopyScenarioAccCloseList(1,5000)
    Counter = 0

    For Each ScenarioMB In AllScenarios
        For Each FlagAcc in COPY_SCENARIO_FLAGS
            If ScenarioMB = "ACTUAL" Then
                CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                CopyScenarioAccCloseList(1,Counter) = FlagAcc
                Counter = Counter + 1
            ElseIf ScenarioMB = "FORECAST" And FlagAcc <> "CDS_ACTUAL" Then
                CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                CopyScenarioAccCloseList(1,Counter) = FlagAcc
                Counter = Counter + 1
            ElseIf Left(ScenarioMB,9) = "FORECAST_" And Instr(ScenarioMB,"PREVY") = 0 And FlagAcc <> "CDS_FORECAST" Then

                If ScenarioMB <> "FORECAST_DEC" Or (Left(FlagAcc, 10) <> "CDS_BUDGET" And FlagAcc <> "CDS_ACTUAL") Then

                    If ScenarioMB = "FORECAST_SEP" and FlagAcc = "CDS_FORECAST_AUG" Then

                    Else
                        CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                        CopyScenarioAccCloseList(1,Counter) = FlagAcc
                        Counter = Counter + 1
                    End If
                End If
            ElseIf Left(ScenarioMB,9) = "FORECAST_" and Instr(ScenarioMB,"PREVY") > 0 Then
                ScenMonthStored = mid(ScenarioMB,Instr(ScenarioMB,"_")+1,3)
                If FlagAcc <> "CDS_FORECAST_"&ScenMonthStored Then
                    If ScenarioMB = "FORECAST_DEC_PREVY" and FlagAcc = "CDS_ACTUAL" Then

                    Else
                        CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                        CopyScenarioAccCloseList(1,Counter) = FlagAcc
                        Counter = Counter + 1
                    End If
                End If
            ElseIf ScenarioMB = "BUDGET_ACTRATE" And FlagAcc <> "CDS_BUDGET" Then
                CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                CopyScenarioAccCloseList(1,Counter) = FlagAcc
                Counter = Counter + 1
            ElseIf ScenarioMB = "ACTUALFCST_PREVYRATE" And FlagAcc <> "CDS_ACTUAL" And FlagAcc <> "CDS_FORECAST" Then
                CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                CopyScenarioAccCloseList(1,Counter) = FlagAcc
                Counter = Counter + 1
            ElseIf mid(FlagAcc,5,len(FlagAcc)-4) = ScenarioMB Then
                CopyScenarioAccCloseList(0,Counter) = ScenarioMB
                CopyScenarioAccCloseList(1,Counter) = FlagAcc
                Counter = Counter + 1
            End If

        Next
    Next
    Redim Preserve CopyScenarioAccCloseList(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS28 - OK - Time(s) = "&NO_SectionTime)

    Redim EntVsOwnICP(1,100000)
    Counter = 0
    For Each EntItem in EntitiesAllList
        If HS.Entity.IsICP(EntItem) Then
            EntVsOwnICP(0,Counter) = EntItem
            EntVsOwnICP(1,Counter) = EntItem
            Counter = Counter + 1
        End If
    Next
    Redim Preserve EntVsOwnICP(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS31 - OK - Time(s) = "&NO_SectionTime)

    C2_IO_SUB_members = HS.Custom2.List("IO_SUB","[Base]")

    Redim InternalInventotyIO_SUBClose(2,10000)
    Counter = 0

    For Each AccToClose In ActiveAccountsList
        If HS.Account.C2Top(AccToClose) = "IO_SUB_ACQ_DIS" Then
            For Each C2ToClose in C2_IO_SUB_members
                If C2ToClose <> "NO_IO_SUB" Then
                    If HS.Custom2.Isbase("NET",C2ToClose) = False Then
                        For Each EstScenToClose in EstimateScenarioslist
                            InternalInventotyIO_SUBClose(0,Counter) = C2ToClose
                            InternalInventotyIO_SUBClose(1,Counter) = EstScenToClose
                            InternalInventotyIO_SUBClose(2,Counter) = AccToClose
                            Counter = Counter + 1
                        Next
                    End If
                End If
            Next

            For Each sScenario In ActualScenarios
                InternalInventotyIO_SUBClose(0,Counter) = "NO_IO_SUB"
                InternalInventotyIO_SUBClose(1,Counter) = sScenario
                InternalInventotyIO_SUBClose(2,Counter) = AccToClose
                Counter = Counter + 1
            Next
        End If
    Next

    Redim preserve InternalInventotyIO_SUBClose(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS33 - OK - Time(s) = "&NO_SectionTime)

    Redim CapitalLoans(1,100000)
    LoanAccsList = array("N1209","N1210")

    Counter = 0
    For Each EntityNoinp In ActiveEntitiesList
         For each Acc in LoanAccsList

            If UCASE(EntityNoinp) <> "MNLD" Then
                CapitalLoans(0,Counter) = EntityNoinp
                CapitalLoans(1,Counter) = Acc
                Counter = Counter + 1
            End if
        Next
    Next
    Redim Preserve CapitalLoans(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS34 - OK - Time(s) = "&NO_SectionTime)

    Redim CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen(2,100000)
    Redim CloseTransMemberPerC2_OnlyManualElinEntOpen(1,100000)
    Redim CloseCapitalLoans(1,100000)

    Counter = 0 :    Counter2 = 0    :    Counter3 = 0
    For Each EntityNoInp In ActiveEntitiesList
        If EntityNoInp <> "[None]" Then

            If HS.Entity.IsBase("MCG_ME", EntityNoinp) = False Then

                For Each sAccount In Array("L105", "L115", "L155", "L165")
                    sC2Member2Close = "EQ_FX_INP"
                    CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen(0,Counter) = sAccount
                    CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen(1,Counter) = sC2Member2Close
                    CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen(2,Counter) = EntityNoinp
                    Counter = Counter + 1
                Next

                For Each sC2CloseMember In Array("TAX_FXME", "TAX_RESTAT", "A_FXME", "D_FXME", "ERDIN", "FAIR_VALUE", "PROV_TRE", "RET_SBP")
                    CloseTransMemberPerC2_OnlyManualElinEntOpen(0,Counter2) = sC2CloseMember
                    CloseTransMemberPerC2_OnlyManualElinEntOpen(1,Counter2) = EntityNoinp
                    Counter2 = Counter2 + 1
                Next
            End If

            If UCASE(EntityNoinp) <> "MNLD" Then

                For Each sAccount2BClosed In Array("N1209", "N1210")
                    CloseCapitalLoans(0,Counter3) = sAccount2BClosed
                    CloseCapitalLoans(1,Counter3) = EntityNoinp
                    Counter3 = Counter3 + 1
                Next
            End if
        End If
    Next

    Redim Preserve CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen(2,Counter-1)
    Redim Preserve CloseTransMemberPerC2_OnlyManualElinEntOpen(1,Counter2-1)
    Redim Preserve CloseCapitalLoans(1,Counter3-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS36 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each IntAcc In ActiveAccountsList
        If HS.Account.IsICP(IntAcc) = TRUE and HS.Account.IsCalculated(IntAcc) = False Then
            If IntAcc <> "RM21" and IntAcc <> "A216" and IntAcc <> "A217" and IntAcc <> "A218" and IntAcc <> "A219" and IntAcc <> "A234" and IntAcc <> "A252" and IntAcc <> "L165" and IntAcc <> "OC65" and IntAcc <> "DC65" And IntAcc <> "L165_EUR" _
            And IntAcc <> "R862" And IntAcc <> "R850" Then
                If HS.Account.ICPTopMember(IntAcc) <> "[ICP Entities]" Then
                    Redim Preserve ICP_Accounts_To_Close(Counter)
                    ICP_Accounts_To_Close(Counter) = IntAcc
                    Counter = Counter + 1
                End If
            End If
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS40 - OK - Time(s) = "&NO_SectionTime)

    AccsToLeaveOpen = Array("MARA")

    Redim CloseRM63(1,10000)
    Counter = 0
    For Each EntToClose In ActiveEntitiesList
        LeaveOpen = IsItemInList(EntToClose,AccsToLeaveOpen)
        If LeaveOpen = False And Instr(UCase(EntToClose), "STRATEGY") = 0 Then
            CloseRM63(0,Counter) = EntToClose
            CloseRM63(1,Counter) = "RM63"
            Counter = Counter + 1
        End If
    Next
    Redim Preserve CloseRM63(1,Counter-1)

    Redim MARA_RM63_Close(1,1000)

    MARA_RM63_Close(0,0) = "MARA"
    MARA_RM63_Close(1,0) = "PC99"
    Counter = 1

    For Each c1 In MacGregorActiveProductsList
        If c1 <> "GHQ" Then
            MARA_RM63_Close(0,Counter) = "MARA"
            MARA_RM63_Close(1,Counter) = c1
            Counter = Counter + 1
        End If
    Next
    Redim Preserve MARA_RM63_Close(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS43 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim CloseCopyFlags(2,100000)
    CopyDataFlagAccounts = HS.Account.List("COPY_SCENARIOS_FLAGS","[Base]")

    For Each ScenToLoop in Array("BUDGET_FORECAST", "BUDGET")
        For Each EntityNoInp In ActiveEntitiesList
            If EntityNoInp <> "[None]" Then
                CloseCopyFlags(0,Counter) = ScenToLoop
                CloseCopyFlags(1,Counter) = "CDS_ACTUAL"
                CloseCopyFlags(2,Counter) = EntityNoInp
                Counter = Counter + 1
            End If
        Next
    Next

    Redim Preserve CloseCopyFlags(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS44 - OK - Time(s) = "&NO_SectionTime)

    Redim CloseL176(1,10000)
    Counter = 0

    Accs = array("L176","CL176")
    For Each acc in Accs
        For Each EntToClose In ActiveEntitiesList

            If EntToClose <> "MNLD" Then
                CloseL176(0,Counter) = EntToClose
                CloseL176(1,Counter) = acc
                Counter = Counter + 1
            End If
        Next
    Next
    Redim Preserve CloseL176(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS46 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim FlagBasedNoInputs(2, 1000000)

    For Each sSrcScen In Array("ACTUAL", "FORECAST", "BUDGET")
        If sSrcScen = "ACTUAL" Then
            aScenariosToLoop = CombineLists(StrategyScenarios, ActualScenarios)
        Else
            aScenariosToLoop = Array(sSrcScen)
        End If

        For Each sBAEntity In Array("MJPM")
            Set DataUnit = HS.OpenDataUnit("E#" & sBAEntity & ".Y#2038.P#Jan.S#" & sSrcScen & ".W#YTD.V#<Entity currency>")
             NumItems = DataUnit.GetNumItems

            For i = 0 To NumItems - 1
                Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)

                If StrC1 <> "PC99" and StrC1 <> "[None]" and dData = 1 Then
                    For Each sce in aScenariosToLoop
                        If Left(sce, 8) = "STRATEGY" Then
                            STR_Open = GetUD(StrAccount, "Account", "STR_O")
                            STR_C1_List_To_Keep_Open = Split(STR_Open,",")

                            If Len(STR_Open) > 0 Then
                                If STR_Open = STR_C1_List_To_Keep_Open(0) Then
                                    If HS.Custom1.IsBase("", STR_Open) = FALSE Then
                                        STR_C1_List_To_Keep_Open = HS.Custom1.List(STR_Open, "[Base]")
                                    End If
                                End If
                            End If

                            If IsItemInList(StrC1,STR_C1_List_To_Keep_Open) = False Then
                                FlagBasedNoInputs(0,Counter) = sce
                                FlagBasedNoInputs(1,Counter) = StrAccount
                                FlagBasedNoInputs(2,Counter) = StrC1
                                Counter = Counter + 1
                            End If
                        ElseIf Left(sce, 6) = "ACTUAL" Or sce = "FORECAST" Or sce = "BUDGET" Then
                            FlagBasedNoInputs(0,Counter) = sce
                            FlagBasedNoInputs(1,Counter) = StrAccount
                            FlagBasedNoInputs(2,Counter) = StrC1
                            Counter = Counter + 1
                        End If
                    Next
                End If
            Next
        Next
    Next

    Redim Preserve FlagBasedNoInputs(2, Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS58 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each Acc In ActiveAccountsList
        If HS.Account.IsCalculated(Acc) = FALSE And HS.Account.IsICP(Acc) = TRUE Then
            If HS.Account.IsBase("VALIDATION", Acc) = FALSE Then
                AccType = HS.Account.AccountType(Acc)

                If (AccType = "ASSET" or AccType = "LIABILITY" or AccType = "BALANCE") And Acc <> "L165" Then
                    ReDim Preserve ICPAccounts2Close(Counter)
                    ICPAccounts2Close(Counter) = Acc
                    Counter = Counter + 1
                End If
            End If
        End If
    Next

    Counter = 0
    Counter2 = 0
    Counter3 = 0

    For Each Ent in EntitiesAllList
        CloseEntDate = GetUD(Ent, "Entity", "CloseEntStartDate")
        CloseICPDate = GetUD(Ent, "Entity", "CloseICPStartDate")

        If CloseEntDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(CloseEntDate,3)
            StartYear = right(CloseEntDate,4)

            ArrayC3ToClose = Array("IFRS","INP","ADJ","PPAadj","AIFRS","LOAD")

            For each C3Mbr in ArrayC3ToClose
                Redim Preserve CloseOnlyEntitiesWithDate(3,Counter)
                CloseOnlyEntitiesWithDate(0,Counter) = StartMonth
                CloseOnlyEntitiesWithDate(1,Counter) = StartYear
                CloseOnlyEntitiesWithDate(2,Counter) = Ent
                CloseOnlyEntitiesWithDate(3,Counter) = C3Mbr
                Counter = Counter + 1
            Next
        End If

        If CloseICPDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(CloseICPDate,3)
            StartYear = right(CloseICPDate,4)

            ArrayC3ToClose = Array("IFRS","INP","ADJ","PPAadj","AIFRS","LOAD")

            For Each C3Mbr in ArrayC3ToClose
                For Each sYear in YearNoInputYearsList
                    If CInt(StartYear) = CInt(sYear) Then

                        For Each Acc In ICPAccounts2Close
                            Redim Preserve CloseOnlyICPWithDate1stYear(4,Counter3)
                            CloseOnlyICPWithDate1stYear(0,Counter3) = StartMonth
                            CloseOnlyICPWithDate1stYear(1,Counter3) = StartYear
                                CloseOnlyICPWithDate1stYear(2,Counter3) = Ent
                            CloseOnlyICPWithDate1stYear(3,Counter3) = C3Mbr
                            CloseOnlyICPWithDate1stYear(4,Counter3) = Acc
                            Counter3 = Counter3 + 1
                        Next
                    ElseIf CInt(sYear) = CInt(StartYear) + 1 Then
                        SecondYear = CInt(StartYear) + 1

                        Redim Preserve CloseOnlyICPWithDate(3,Counter2)
                        CloseOnlyICPWithDate(0,Counter2) = "Jan"
                        CloseOnlyICPWithDate(1,Counter2) = SecondYear
                        CloseOnlyICPWithDate(2,Counter2) = Ent
                        CloseOnlyICPWithDate(3,Counter2) = C3Mbr
                        Counter2 = Counter2 + 1
                    End If
                Next
            Next
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS63 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim C1WithSuspendedDateList(2,10000)
    For Each C1mbr In ActiveCustom1List
        SuspendedEndDate = GetUD(C1mbr, "Custom1", "SuspendedEndDate")

        If SuspendedEndDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(SuspendedEndDate,3)
            StartYear = right(SuspendedEndDate,4)

            Redim Preserve C1WithSuspendedDateList(2,Counter)
            C1WithSuspendedDateList(0,Counter) = StartMonth
            C1WithSuspendedDateList(1,Counter) = StartYear
            C1WithSuspendedDateList(2,Counter) = C1mbr
            Counter = Counter + 1
        End If

    Next
    Redim Preserve C1WithSuspendedDateList(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS65 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim C2WithSuspendedDateList(2,10000)
    For Each C2mbr in Custom2AllList
        SuspendedEndDate = GetUD(C2mbr, "Custom2", "SuspendedEndDate")

        If SuspendedEndDate <> "" Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(SuspendedEndDate,3)
            StartYear = right(SuspendedEndDate,4)

            Redim Preserve C2WithSuspendedDateList(2,Counter)
            C2WithSuspendedDateList(0,Counter) = StartMonth
            C2WithSuspendedDateList(1,Counter) = StartYear
            C2WithSuspendedDateList(2,Counter) = C2mbr
            Counter = Counter + 1
        End If
    Next
    Redim Preserve C2WithSuspendedDateList(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS66 - OK - Time(s) = "&NO_SectionTime)

    iPeriods = 12
    If Len(CStr(Str2ndFcstYear)) > 2 Then
        aFcstYears = Array(Str2ndFcstYear, Str3rdFcstYear)
    Else
        aFcstYears = YearActReportingYearClose
    End If

    If Len(Str1stFcstPeriod) = 0 Then
        Str1stFcstPeriod = 1
    End If
    Redim aFcstMonths(12 - Str1stFcstPeriod)

    iCounter = 0
    For i = Str1stFcstPeriod To 12
        sMonth = GetPeriodLabel(i)

        aFcstMonths(iCounter) = sMonth
        iCounter = iCounter + 1
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N104 - OK - Time(s) = "&NO_SectionTime)

    Redim ClosedC1PerScen(1,10000)
    Counter = 0
    For Each C1mbr In ActiveCustom1List
        FullC1UD = GetUD(C1mbr, "Custom1", "")

          If InStr(1,FullC1UD,"ClosedInEst",vbTextCompare) > 0 Then
              For each StrScenario In EstimateScenarioslist
                ClosedC1PerScen(0,Counter) = C1mbr
                ClosedC1PerScen(1,Counter) = StrScenario
                Counter = Counter + 1
            Next
        End If

          If InStr(1,FullC1UD,"ClosedInAct",vbTextCompare) > 0 Then

            For Each sScenario In ActualScenarios
                ClosedC1PerScen(0,Counter) = C1mbr
                ClosedC1PerScen(1,Counter) = sScenario
                Counter = Counter + 1
            Next
        End If
    Next

    Redim Preserve ClosedC1PerScen(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS73 - OK - Time(s) = "&NO_SectionTime)

    Redim ClosedC2PerScen(1,10000)
    Counter = 0
    For Each C2mbr in Custom2AllList
        FullC2UD = GetUD(C2mbr, "Custom2", "")

          If InStr(1,FullC2UD,"ClosedInEst",vbTextCompare) > 0 Then
              For each StrScenario In EstimateScenarioslist
                ClosedC2PerScen(0,Counter) = C2mbr
                ClosedC2PerScen(1,Counter) = StrScenario
                Counter = Counter + 1
            Next
        End If

          If InStr(1,FullC2UD,"ClosedInAct",vbTextCompare) > 0 Then

            For Each sScenario In ActualScenarios
                ClosedC2PerScen(0,Counter) = C2mbr
                ClosedC2PerScen(1,Counter) = sScenario
                Counter = Counter + 1
            Next
        End If
    Next

    Redim Preserve ClosedC2PerScen(1,Counter-1)

    Redim ClosedC3PerScen(1,10000)
    Counter = 0
    For Each C3mbr in Custom3AllList
        FullC3UD = GetUD(C3mbr, "Custom3", "")

          If InStr(1,FullC3UD,"ClosedInEst",vbTextCompare) > 0 Then
              For each StrScenario In EstimateScenarioslist
                ClosedC3PerScen(0,Counter) = C3mbr
                ClosedC3PerScen(1,Counter) = StrScenario
                Counter = Counter + 1
            Next
        End If

          If InStr(1,FullC3UD,"ClosedInAct",vbTextCompare) > 0 Then
            For Each sScenario In ActualScenarios
                ClosedC3PerScen(0,Counter) = C3mbr
                ClosedC3PerScen(1,Counter) = sScenario
                Counter = Counter + 1
            Next
        End If
    Next

    Redim Preserve ClosedC3PerScen(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS74 - OK - Time(s) = "&NO_SectionTime)

    ACC_AccountToCloseHC_MCG = array("HC003A", "HC003B")

    Redim MG_SER_HC_Close(2,40000)
    Counter = 0
    For Each StrAccount in ACC_AccountToCloseHC_MCG
        For each HC_Prod in HS.Custom1.List("Headcount_Products","[Base]")
            If HS.Custom1.IsBase("MAR",HC_Prod) = True and left(HC_Prod,3) = "SER" Then

                For Each sScenario In Array("ACTUAL", "FORECAST", "BUDGET")
                    If HC_Prod <> "SER97_MG" And HC_Prod <> "SER99_MG" And (HC_Prod <> "SER98_MG" Or sScenario <> "BUDGET") Then
                        MG_SER_HC_Close(0,Counter) = HC_Prod
                        MG_SER_HC_Close(1,Counter) = sScenario
                        MG_SER_HC_Close(2,Counter) = StrAccount
                        Counter = Counter + 1
                    End If
                Next
            End If
        Next
    Next

    Redim Preserve MG_SER_HC_Close(2,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS75 - OK - Time(s) = "&NO_SectionTime)

    AccsToCloseInNote9List1 = array("N0905","N0903","N0901")
    C2ToCloseInNote9List1 = array("ERDINEQ","CACQEQ","DIV","SACNI","CSLDEQ","DECREQ","TRDIFF","IMPAIEQ")

    AccsToCloseInNote9List2 = array("N0903","N0901","N0906","N0902")
    C2ToCloseInNote9List2 = array("FVEQ","FVV")

    Counter = 0
    For Each Acc in AccsToCloseInNote9List1
        For Each C2 in C2ToCloseInNote9List1
            Redim Preserve Note9AccC2Close(1,Counter)
            Note9AccC2Close(0,Counter) = Acc
            Note9AccC2Close(1,Counter) = C2
            Counter = Counter + 1
        Next
    Next

    For Each Acc in AccsToCloseInNote9List2
        For Each C2 in C2ToCloseInNote9List2
            Redim Preserve Note9AccC2Close(1,Counter)
            Note9AccC2Close(0,Counter) = Acc
            Note9AccC2Close(1,Counter) = C2
            Counter = Counter + 1
        Next
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS78 - OK - Time(s) = "&NO_SectionTime)

    Redim ClosePRE_RATES(1,200)

    Counter = 0

        For Each Scen In AllInputScenarios
            If Scen = "BUDGET" or Scen = "FORECAST" or Scen = "BUDGET_FORECAST" or Left(Scen,8) = "FORECAST" Then

            Else

                    ClosePRE_RATES(0,Counter) = "PRE_RATES"
                    ClosePRE_RATES(1,Counter) = Scen

                    Counter = Counter + 1

            End If
        Next

    Redim Preserve ClosePRE_RATES(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS80 - OK - Time(s) = "&NO_SectionTime)

    Counter2 = 0

    Redim CloseMSD99_OFS99_FromAccounts2(2,300000)
    ProdList = array("MSD99","OFS99")

    For Each Ent in MacGregorActiveEntityList

        If HS.Entity.IsBase("MCG_ME",Ent) = False or Ent = "AMS_ADJE" or Ent = "CHD_ADJE"_
        or Ent = "CSS_ADJE" or Ent = "GLS_ADJE" or Ent = "ODM_ADJE" or Ent = "OLH_ADJE" or Ent = "ROR_ADJE" Then

            For Each Prod in ProdList
                If HS.Entity.IsBase("MCG_ME",Ent) = False Then
                    CloseMSD99_OFS99_FromAccounts2(0,Counter2) = Ent
                    CloseMSD99_OFS99_FromAccounts2(1,Counter2) = Prod
                    CloseMSD99_OFS99_FromAccounts2(2,Counter2) = "[None]"
                    Counter2 = Counter2 + 1
                End If
            Next

        End If
    Next

    Redim Preserve CloseMSD99_OFS99_FromAccounts2(2,Counter2-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS81 - OK - Time(s) = "&NO_SectionTime)

    AcqDisTopsToClose = array("ACQTOT","DISPBUSINTOT")

    Redim C2AcQDisCloseList(1,50000)
    Counter = 0
    For Each Scen In AllInputScenarios
        ScenarioType = Ucase(GetUD(scen, "Scenario", "ScenarioType"))
        If ScenarioType <> "CALCULATE" and Ucase(Left(Scen, 6)) <> "ACTUAL" Then
            For Each sC2Top in AcqDisTopsToClose
                C2MbrsToClose = HS.Custom2.LIst(sC2Top,"[Base]")

                For Each C2 in C2MbrsToClose
                    If C2 <> "ACQEXCHRATE" and C2 <> "DISPBUSINEXCHRATE" Then
                        C2AcQDisCloseList(0,Counter) = Scen
                        C2AcQDisCloseList(1,Counter) = C2
                        Counter = Counter + 1
                    End If
                Next
            Next
        End If
    Next

    Redim Preserve C2AcQDisCloseList(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS82 - OK - Time(s) = "&NO_SectionTime)

    C2ToClose = array("A_CFI","D_CFI")

    Redim CapexClose(1,100000)
    Counter = 0

    For Each NoteAcc in HS.Account.List("NOTES","[Base]")
        If HS.Account.IsCalculated(NoteAcc) = False Then
            C2_Top = HS.Account.C2Top(NoteAcc)
            If C2_Top = "" Then C2_Top = "[None]"

            If HS.Custom2.IsBase(C2_Top,"A_CFI") = True Then

                    For Each C2 in C2ToClose
                        CapexClose(0,Counter) = NoteAcc
                        CapexClose(1,Counter) = C2
                        Counter = Counter + 1
                    Next

            End If
        End If
    Next
    Redim Preserve CapexClose(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NS83 - OK - Time(s) = "&NO_SectionTime)

    Redim C3Close(1,10000)
    Counter = 0
    C3ToClose = array("[None]")

    For Each acc in AccountsAllList
        For Each C3 in C3ToClose
            If HS.Account.IsBase("GLOBAL",acc) = False and HS.Account.IsCalculated(acc) = False Then
                C3Close(0,Counter) = acc
                C3Close(1,Counter) = C3
                Counter = Counter + 1
            End If
        Next
    Next

    Redim Preserve C3Close(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N84 - OK - Time(s) = "&NO_SectionTime)

    Redim ACQ_DISPBUSIN_RATES_Close(1,10000)
    Counter = 0
    For Each nYear in YearNoInputYearsList
        For Each acqdis in HS.Account.List("ACQ_DISPBUSIN_RATES","[Base]")

            C2 = Mid(acqdis,6,80)
            ACQDIS_year = GetUD(C2, "Custom2", "ACQDIVY")

            If Int(nYear) <> Int(ACQDIS_year) Then
                ACQ_DISPBUSIN_RATES_Close(0,Counter) = nYear
                ACQ_DISPBUSIN_RATES_Close(1,Counter) = acqdis
                Counter = Counter + 1
            End If
        Next
    Next

    Redim Preserve ACQ_DISPBUSIN_RATES_Close(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N87 - OK - Time(s) = "&NO_SectionTime)

    Redim Close_INP_FROM_SAP_LOAD(3,300000)
    Counter = 0

    For Each ent in ActiveEntitiesList
        EntUD = GetUD(Ent, "Entity", "")
        If Instr(EntUD,"/SAP_LOAD/") > 0 Then

            For Each Acc In SAPLoadAccounts
                Close_INP_FROM_SAP_LOAD(0,Counter) = Ent
                Close_INP_FROM_SAP_LOAD(1,Counter) = Acc
                Close_INP_FROM_SAP_LOAD(2,Counter) = "INP"
                Close_INP_FROM_SAP_LOAD(3,Counter) = "ACTUAL"
                Counter = Counter + 1
            Next
        End If

        If HR_LOAD_ACTIVE = True Then

            For Each Acc In SAPHRLoadAccounts
                Close_INP_FROM_SAP_LOAD(0,Counter) = Ent
                Close_INP_FROM_SAP_LOAD(1,Counter) = Acc
                Close_INP_FROM_SAP_LOAD(2,Counter) = "INP"
                Close_INP_FROM_SAP_LOAD(3,Counter) = "ACTUAL"
                Counter = Counter + 1
            Next
        End If

    Next
    Redim Preserve Close_INP_FROM_SAP_LOAD(3,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N90 - OK - Time(s) = "&NO_SectionTime)

    SAP_FLAGS = array("COPY_C3_LOAD_TO_INP")
    Counter = 0

    For Each Scen In AllInputScenarios
        ScenarioType = Ucase(GetUD(scen, "Scenario", "ScenarioType"))
        If ScenarioType <> "CALCULATE" And Ucase(Left(Scen, 6)) <> "ACTUAL" And Ucase(Scen) <> "FORECAST" Then
            Redim preserve ScenarisToCloseFromSAPFlags(Counter)
            ScenarisToCloseFromSAPFlags(Counter) = Scen
            Counter = Counter + 1
        End If
    Next
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N91 - OK - Time(s) = "&NO_SectionTime)

    If AppName <> "ASAPHFM" Then
    If HR_LOAD_ACTIVE = False Then
        Counter = 0 : Counter2 = 0
        Redim CloseLOAD_FROM_NON_SAP_ENTC3(1,5000)
        Redim CloseLOAD_FROM_NON_SAP_ENTACC(1,5000)

        SAP_Flags = array("COPY_C3_LOAD_TO_INP")

        For Each Ent In NONSAPLoadEntities
                CloseLOAD_FROM_NON_SAP_ENTC3(0,Counter) = Ent
                CloseLOAD_FROM_NON_SAP_ENTC3(1,Counter) = "LOAD"
                Counter = Counter + 1

                For each Acc in SAP_Flags
                    CloseLOAD_FROM_NON_SAP_ENTACC(0,Counter2) = Ent
                    CloseLOAD_FROM_NON_SAP_ENTACC(1,Counter2) = Acc
                    Counter2 = Counter2 + 1
                Next

        Next
        Redim Preserve CloseLOAD_FROM_NON_SAP_ENTC3(1,Counter-1)
        Redim Preserve CloseLOAD_FROM_NON_SAP_ENTACC(1,Counter2-1)

        If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N92 - OK - Time(s) = "&NO_SectionTime)

    End If
    End If

    Redim N132CloseList(1,33)
    Counter = 0

    For Each sAccount2BClosed In Array("N3C_4010A", "N3C_4015A", "N3C_4025A", "N3C_4030A", "N3C_4045A", "N3C_4050A", "N3C_4040A", "N3C_4035A", "N3C_4070A", "N3C_4055A", "N3C_4075A", "N3C_4080A", "N3C_4085A", "N3C_4090A", "N3C_5033L", "N3C_5015L", "N3C_5020L", "N3C_5025L", "N3C_5085L", "N3C_5082L", "N3C_5070L", "N3C_5075L", "N3C_5080L","N3C_4020A","N3C_5030L")
        N132CloseList(0, Counter) = sAccount2BClosed
        N132CloseList(1, Counter) = "TAX_CHGEQ"
        Counter = Counter + 1
    Next
    Redim Preserve N132CloseList(1, Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N93 - OK - Time(s) = "&NO_SectionTime)

    N133AccsToCLOSE = array("N3C_4085A", "N3C_4090A", "N3C_5075L", "L168", "L200", "CL191")
    Counter = 0

    Redim N133CloseList(1,10000)
    For Each Ent In ActiveEntitiesList

        If HS.Entity.IsBase("MCG_ME", Ent) = False Then
            For each Acc in N133AccsToCLOSE
                N133CloseList(0,Counter) = Ent
                N133CloseList(1,Counter) = Acc
                Counter = Counter + 1
            Next
        End If
    Next
    Redim Preserve N133CloseList(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N94 - OK - Time(s) = "&NO_SectionTime)

    If AppName <> "ASAPHFM" Then
    If HR_LOAD_ACTIVE = False Then
        Counter = 0
        Redim SAP_LOAD_EntityClose(1,50000)

        For Each Ent In NONSAPLoadEntities
                SAP_LOAD_EntityClose(0,Counter) = Ent
                SAP_LOAD_EntityClose(1,Counter) = "NMAP"
                Counter = Counter + 1
        Next
        Redim Preserve SAP_LOAD_EntityClose(1,Counter-1)

        If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N95 - OK - Time(s) = "&NO_SectionTime)

    End If
    End If

    Counter = 0
    Redim SAP_LOAD_AccountClose(2, Ubound(NONSAPLoadAccounts))

    For Each Acc In NONSAPLoadAccounts
        If HS.Account.IsBase("VALIDATION",Acc) = False Then

            AccUD = GetUD(Acc, "Account", "")
            If Instr(AccUD,"/SAP_HR_LOAD/") = 0 Then
                SAP_LOAD_AccountClose(0,Counter) = Acc
                SAP_LOAD_AccountClose(1,Counter) = "NMAP"
                SAP_LOAD_AccountClose(2,Counter) = "ACTUAL"
                Counter = Counter + 1
            End If
        End If
    Next
    Redim Preserve SAP_LOAD_AccountClose(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N96 - OK - Time(s) = "&NO_SectionTime)

    If AppName <> "ASAPHFM" Then
    Counter = 0
    Redim SAP_LOAD_ICPClose(2,50000)

    For Each Ent In NONSAPLoadEntities
        For each iYear in YearActReportingYearClose
            SAP_LOAD_ICPClose(0,Counter) = Ent
            SAP_LOAD_ICPClose(1,Counter) = "NMAP_ICP"
            SAP_LOAD_ICPClose(2,Counter) = iYear
            Counter = Counter + 1
        Next

    Next
    Redim Preserve SAP_LOAD_ICPClose(2,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N97 - OK - Time(s) = "&NO_SectionTime)
    End If

    Counter = 0
    Redim SAP_LOAD_AccountCloseC3LOAD(1,50000)

    For Each Acc In NONSAPLoadAccounts
        If HS.Account.IsBase("VALIDATION",Acc) = False and HS.Account.IsCalculated(Acc) = False Then
            AccUD = GetUD(Acc, "Account", "")
            If Instr(AccUD,"/CloseStartDate:") = 0 and Instr(AccUD,"/SAP_HR_LOAD/") = 0 and Instr(AccUD,"/SAP_LOAD/") = 0 Then

                SAP_LOAD_AccountCloseC3LOAD(0,Counter) = Acc
                SAP_LOAD_AccountCloseC3LOAD(1,Counter) = "LOAD"
                Counter = Counter + 1
            End If
        End If
    Next
    Redim Preserve SAP_LOAD_AccountCloseC3LOAD(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N99 - OK - Time(s) = "&NO_SectionTime)

    N140AccsToCLOSE = array("N3B_4085A", "N3B_5075L")
    Counter = 0

    Redim N140CloseList(1,10000)
    For Each Ent In ActiveEntitiesList

        If HS.Entity.IsBase("MCG_ME", Ent) = False Then
            For each Acc in N140AccsToCLOSE
                N140CloseList(0,Counter) = Ent
                N140CloseList(1,Counter) = Acc
                Counter = Counter + 1
            Next
        End If
    Next
    Redim Preserve N140CloseList(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N101 - OK - Time(s) = "&NO_SectionTime)

    Redim OtherThanGLSProducts(50000)
    Counter = 0

    For Each Prod In ActiveCustom1List

        If Prod <> "SER99_MG" and Prod <> "SER97_MG" And Prod <> "COMO" and Prod <> "PC98" Then

            OtherThanGLSProducts(Counter) = Prod
            Counter = Counter + 1
        End If
    Next
    Redim Preserve OtherThanGLSProducts(Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N102 - OK - Time(s) = "&NO_SectionTime)

    Redim NMAP_ICP_ICACC_CLOSE(1,1000)

    Counter = 0

    For Each Acc In NONSAPLoadAccounts
        If HS.Account.IsICP(Acc) = True And HS.Account.IsBase("VALIDATION",Acc) = False Then
            NMAP_ICP_ICACC_CLOSE(0,Counter) = Acc
            NMAP_ICP_ICACC_CLOSE(1,Counter) = "NMAP_ICP"
            Counter = Counter + 1
        End If
    Next

    Redim preserve NMAP_ICP_ICACC_CLOSE(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N103 - OK - Time(s) = "&NO_SectionTime)

    If AppName <> "ASAPHFM" Then
    If HR_LOAD_ACTIVE = False Then
        Counter = 0
        Redim C3ADJ_ENT_CLOSE_ACTUAL(2,10000)

        For Each Ent In NONSAPLoadEntities
            C3ADJ_ENT_CLOSE_ACTUAL(0,Counter) = Ent
            C3ADJ_ENT_CLOSE_ACTUAL(1,Counter) = "ACTUAL"
            C3ADJ_ENT_CLOSE_ACTUAL(2,Counter) = "ADJ"
            Counter = Counter + 1
        Next
        Redim Preserve C3ADJ_ENT_CLOSE_ACTUAL(2,Counter-1)
    End if
    End if

    Counter = 0
    Redim C3ADJ_SCENARIOCLOSE(1, 2*UBound(AllInputScenarios))
    For Each sce In AllInputScenarios

        If sce <> "ACTUAL" and Left(sce, 6) <> "CONSOL" And sce <> "FORECAST" And sce <> "BUDGET" Then
            For Each sC3Member In Array("LOAD", "ADJ")
                C3ADJ_SCENARIOCLOSE(0, Counter) = sce
                C3ADJ_SCENARIOCLOSE(1, Counter) = sC3Member
                Counter = Counter + 1
            Next
        End If
    Next

    Redim Preserve C3ADJ_SCENARIOCLOSE(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N105 - OK - Time(s) = "&NO_SectionTime)

    Redim C3ADJ_Acc_Close(2,5000)
    Counter = 0

    For Each Acc In NONSAPLoadAccounts

        If HS.Account.IsCalculated(Acc) = False And (HS.Account.IsBase("VALIDATION", Acc) = FALSE Or HS.Account.IsBase("IC_Matching_HelpStructures", Acc) = TRUE) Then
            AccUD = GetUD(Acc, "Account", "")
            If Instr(AccUD,"/CloseStartDate:") = 0 And Instr(AccUD, "/SAP_LOAD/") = 0 And Instr(AccUD, "/SAP_HR_LOAD/") = 0 And Instr(AccUD, "/ADJ_INP/") = 0 Then
                sC3Top = HS.Account.C3Top(Acc)
                If sC3Top = "" Then
                    sC3Top = "[None]"
                ElseIf sC3Top = "ALL" Then
                    sC3Top = "CUSTOM3_TOP"
                End If

                If sC3Top = "ADJ" or HS.Custom3.Isbase(sC3Top,"ADJ") = True Then
                    C3ADJ_Acc_Close(0,Counter) = Acc
                    C3ADJ_Acc_Close(1,Counter) = "ADJ"
                    C3ADJ_Acc_Close(2,Counter) = "ACTUAL"
                    Counter = Counter + 1
                End If
            End If
        End If
    Next

    Redim Preserve C3ADJ_Acc_Close(2,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N107 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim IFRS_LOCALGAAP_Ent_Close(3000)
    For Each Ent In ActiveEntitiesList
        EntUD = GetUD(Ent, "Entity", "")
        If Instr(EntUD,"/CloseStartDate:") = 0 And (IsActiveGL(EntUD,sYearCurrentActualReportingYear,12,"ACTUAL") = False Or HS.Entity.IsBase("MCG_ME", Ent) = True) And Ent <> "[None]" Then
            IFRS_LOCALGAAP_Ent_Close(Counter) = Ent
            Counter = Counter + 1
        End If
    Next
    Redim Preserve IFRS_LOCALGAAP_Ent_Close(Counter-1)

     If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N109 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim STRATEGY_Ent_Close(1,8000)

    For Each Sce In AllInputScenarios
        SceUD = GetUD(Sce, "Scenario", "ScenarioType")
        If UCase(SceUD) <> "CALCULATE" Then
            For Each Ent In ActiveEntitiesList
                If Instr(Sce,"STRATEGY") > 0 Then
                    If Instr(UCase(Ent),"STRATEGY") = 0 and Instr(UCase(Ent),"STRACQ") = 0 Then

                        If Ucase(Ent) <> "COPY_SCENARIOS" And Ent <> "[None]" Then
                            STRATEGY_Ent_Close(0,Counter) = Ent
                            STRATEGY_Ent_Close(1,Counter) = Sce
                            Counter = Counter + 1
                        End If
                    End If
                Else
                    If Instr(UCase(Ent),"STRATEGY") > 0 or Instr(UCase(Ent),"STRACQ") > 0 Then

                            STRATEGY_Ent_Close(0,Counter) = Ent
                            STRATEGY_Ent_Close(1,Counter) = Sce
                            Counter = Counter + 1

                    End If
                End If
            Next
        End If
    Next

    Redim Preserve STRATEGY_Ent_Close(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N110 - OK - Time(s) = "&NO_SectionTime)

    Redim StrategyC3Close(1,1000)
    Counter = 0

    For Each Sce In StrategyScenarios
        For Each C3Mbr in HS.Custom3.List("","[Base]")
            If Instr(Sce,"STRATEGY") > 0 Then
                If C3Mbr <> "INP" and C3Mbr <> "ValByPass" And C3Mbr <> "[None]" Then
                    StrategyC3Close(0,Counter) = C3Mbr
                    StrategyC3Close(1,Counter) = Sce
                    Counter = Counter + 1
                End If
            End If
        Next
    Next

    Redim Preserve StrategyC3Close(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N111 - OK - Time(s) = "&NO_SectionTime)

    Redim StrategyAccClose(1,20000)
    Redim StrategyAccC1Close(2,20000)

    Counter = 0
    Counter3 = 0

    For Each Sce In StrategyScenarios
        If Instr(Sce,"STRATEGY") > 0 Then
            For Each Acc In ActiveAccountsList

                If HS.Account.IsCalculated(Acc) = False And HS.Account.IsBase("GLOBAL",Acc) = False And HS.Account.IsBase("VALIDATION", Acc) = False And (HS.Account.IsBase("HELP_ACCOUNTS", Acc) = False Or HS.Account.IsBase("IC_Accounts", Acc) = True) Then

                        If Acc <> "RM21" And HS.Account.IsBase("HELP_ACCOUNTS", Acc) = False And HS.Account.IsBase("EST",Acc) = False and Acc <> "OC06" and Acc <> "DC06" Then

                            StrategyAccClose(0,Counter) = Acc
                            StrategyAccClose(1,Counter) = Sce
                            Counter = Counter + 1
                        Else

                            If Acc = "RM21" or HS.Account.IsICP(Acc) = False or (HS.Account.IsICP(Acc) = True and HS.Account.IsBase("A301",Acc) = True) Then

                                 If trim(AccUD) <> "/ / / /" Then

                                    C1_A_O = GetUD(Acc, "Account", "C1_A_O")        :    C1_A_C = GetUD(Acc, "Account", "C1_A_C")

                                    STR_Close = GetUD(Acc, "Account", "STR_C")
                                    STR_C1_List_To_Close = Split(STR_Close, ",")
                                    If Len(STR_Close) > 0 Then
                                        If STR_Close = STR_C1_List_To_Close(0) Then
                                            If HS.Custom1.IsBase("", STR_Close) = FALSE Then
                                                STR_C1_List_To_Close = HS.Custom1.List(STR_Close, "[Base]")
                                            End If
                                        End If
                                    End If

                                    STR_Open = GetUD(Acc, "Account", "STR_O")
                                    STR_C1_List_To_Keep_Open = Split(STR_Open,",")
                                    If Len(STR_Open) > 0 Then
                                        If STR_Open = STR_C1_List_To_Keep_Open(0) Then
                                            If HS.Custom1.IsBase("", STR_Open) = FALSE Then
                                                STR_C1_List_To_Keep_Open = HS.Custom1.List(STR_Open, "[Base]")
                                            End If
                                        End If
                                    End If

                                    If C1_A_O <> "" Then
                                        TopMemberToCloseC1 = HS.Account.C1Top(Acc)
                                        All_C1_OpenMembers = HS.Custom1.List(TopMemberToCloseC1,"[Base]")

                                        C1_A_O_Top_IsBase = HS.Custom1.IsBase("",C1_A_O)
                                        For each C1ToLoop in All_C1_OpenMembers
                                            If C1_A_O_Top_IsBase = False Then
                                                If HS.Custom1.IsBase(C1_A_O,C1ToLoop) = False Or IsItemInList(C1ToLoop, STR_C1_List_To_Close) = True Then

                                                    If IsItemInList(C1ToLoop,STR_C1_List_To_Keep_Open) = False Then
                                                        StrategyAccC1Close(0,Counter3) = Acc
                                                        StrategyAccC1Close(1,Counter3) = Sce
                                                        StrategyAccC1Close(2,Counter3) = C1ToLoop
                                                        Counter3 = Counter3 + 1
                                                    End If
                                                End If
                                            Else
                                                If C1_A_O <> C1ToLoop Or IsItemInList(C1ToLoop, STR_C1_List_To_Close) = True Then

                                                    If IsItemInList(C1ToLoop,STR_C1_List_To_Keep_Open) = False Then
                                                        StrategyAccC1Close(0,Counter3) = Acc
                                                        StrategyAccC1Close(1,Counter3) = Sce
                                                        StrategyAccC1Close(2,Counter3) = C1ToLoop
                                                        Counter3 = Counter3 + 1
                                                    End If
                                                End If
                                            End If
                                        Next
                                    End If

                                    If C1_A_C <> "" Then
                                        C1_A_C_Top_IsBase = HS.Custom1.IsBase("",C1_A_C)
                                        If C1_A_C_Top_IsBase = False Or STR_Close <> "" Then
                                            If C1_A_C_Top_IsBase = False Then
                                                Custom1MembersList = HS.Custom1.List(C1_A_C,"[Base]")
                                                If STR_Close <> "" Then
                                                    Custom1MembersList = CombineLists(STR_C1_List_To_Close, Custom1MembersList)
                                                End If
                                            Else
                                                Custom1MembersList = CombineLists(STR_C1_Close, Array(C1_A_C))
                                            End If

                                            For each C1_To_Close in Custom1MembersList
                                                If IsItemInList(C1_To_Close,STR_C1_List_To_Keep_Open) = False Then
                                                    StrategyAccC1Close(0,Counter3) = Acc
                                                    StrategyAccC1Close(1,Counter3) = Sce
                                                    StrategyAccC1Close(2,Counter3) = C1_To_Close
                                                    Counter3 = Counter3 + 1
                                                End If
                                            Next
                                        Else
                                            If IsItemInList(C1_A_C,STR_C1_List_To_Keep_Open) = False Then
                                                StrategyAccC1Close(0,Counter3) = Acc
                                                StrategyAccC1Close(1,Counter3) = Sce
                                                StrategyAccC1Close(2,Counter3) = C1_A_C
                                                Counter3 = Counter3 + 1
                                            End If
                                        End If
                                    End If
                                 End If
                            Else

                                StrategyAccClose(0,Counter) = Acc
                                StrategyAccClose(1,Counter) = Sce
                                Counter = Counter + 1
                            End If
                        End If
                End If
            Next
        End If
    Next

    Redim Preserve StrategyAccClose(1,Counter-1)
    Redim Preserve StrategyAccC1Close(2,Counter3-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N112 - OK - Time(s) = "&NO_SectionTime)

    C2ToLeaveOpen = Array("[None]","NO_IO_SUB","NO_COUNTRY", "ConsC2")

    AccsNotHavingC2CloseInStrategy  = CombineLists(HS.Account.List("SUST_PORTFOLIO","[Base]"), array("RM01E","URM01E","MORE"))

    AccsNotHavingC2CloseInStrategy =  CombineLists(AccsNotHavingC2CloseInStrategy, HS.Account.list("RM70","[Base]"))

    ReDim StrategyAccounts2bClosed(Ubound(AccountsAllList))

    Counter = 0
    For Each Acc In HS.Account.List("EST","[Base]")
        If HS.Account.IsCalculated(Acc) = False Then
            If IsItemInList(Acc,AccsNotHavingC2CloseInStrategy) = False Then
                StrategyAccounts2bClosed(Counter) = Acc
                Counter = Counter + 1
            End If
        End If
    Next
    ReDim Preserve StrategyAccounts2bClosed(Counter-1)

    ReDim Custom2Members2bClosed(Ubound(Custom2AllList))

    Counter = 0
    For Each sC2 In Custom2AllList
        If HS.Custom2.IsBase("ASSCO_JV",sC2) = False Then
            If IsItemInList(sC2, C2ToLeaveOpen) = False Then
                Custom2Members2bClosed(Counter) = sC2
                Counter = Counter + 1
            End If
        End If
    Next
    ReDim Preserve Custom2Members2bClosed(Counter-1)

    Counter = 0
    Redim CloseC2InSTR(2,100000)

    For Each Acc In StrategyAccounts2bClosed
        Custom2Top = HS.Account.C2Top(Acc)
        If Custom2Top = "" Then Custom2Top = "[None]"

        For Each sC2 In Custom2Members2bClosed
            If HS.Custom2.IsBase(Custom2Top, sC2) = True Then
                For Each Sce In StrategyScenarios
                    If Instr(Sce,"STRATEGY") > 0 Then
                        CloseC2InSTR(0,Counter) = sC2
                        CloseC2InSTR(1,Counter) = Sce
                        CloseC2InSTR(2,Counter) = Acc
                        Counter = Counter + 1
                    End If
                Next
            End If
        Next
    Next
    Redim Preserve CloseC2InSTR(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N114 - OK - Time(s) = "&NO_SectionTime)

    Redim CloseRM21_ICP_InStrategy(2,10000)
    Counter = 0
    For Each Sce In StrategyScenarios
        If Instr(Sce,"STRATEGY") > 0 Then
            For Each sICP In ActiveICPsList
                If sICP <> "[ICP None]" Then
                    CloseRM21_ICP_InStrategy(0,Counter) = "RM21"
                    CloseRM21_ICP_InStrategy(1,Counter) = Sce
                    CloseRM21_ICP_InStrategy(2,Counter) = sICP
                    Counter = Counter + 1
                End If
            Next
        End If
    Next
    Redim Preserve CloseRM21_ICP_InStrategy(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N115 - OK - Time(s) = "&NO_SectionTime)

    Redim CloseStrategyMonths(1,1000)
    Counter = 0
    For Each Sce In StrategyScenarios
        If Instr(Sce,"STRATEGY") > 0 Then
            For each Per in PeriodMonthList
                If Per <> "Mar" And Per <> "Jun" And Per <> "Sep" And Per <> "Dec" Then
                    CloseStrategyMonths(0,Counter) = Sce
                    CloseStrategyMonths(1,Counter) = Per
                    Counter = Counter + 1
                End If
            Next
        End If
    Next

    Redim Preserve CloseStrategyMonths(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N157 - OK - Time(s) = "&NO_SectionTime)

    ProdsToClose = Array("PC99", "CBS99")

    Counter = 0
    For Each Acc In ActiveAccountsList
        If HS.Account.IsCalculated(Acc) = FALSE Then
            sC1Top = HS.Account.C1Top(Acc)
            AccUD = GetUD(Acc, "Account", "")

            If sC1Top = "ProductLines_and_Service99" or Instr(AccUD,"ProductLines_and_Service99") > 0 Then
                ReDim Preserve Accounts2Close(Counter)
                Accounts2Close(Counter) = Acc
                Counter = Counter + 1
            End If
        End If
    Next

    Counter = 0
    Redim InvAccSpecialCloseDueToStrategyInput(2,10000)
    For Each Sce In AllInputScenarios
        SceUD = GetUD(Sce, "Scenario", "ScenarioType")
        If UCase(SceUD) <> "CALCULATE" and Instr(Sce,"STRATEGY") = 0 Then

            For Each Acc In Accounts2Close
                For each sC1 in ProdsToClose
                    sClose = True
                    If (Acc = "A272I" And sC1 = "PC99") Then sClose = False

                    If sClose = True Then
                        InvAccSpecialCloseDueToStrategyInput(0,Counter) = Sce
                        InvAccSpecialCloseDueToStrategyInput(1,Counter) = Acc
                        InvAccSpecialCloseDueToStrategyInput(2,Counter) = sC1
                        Counter = Counter + 1
                    End If

                Next
            Next
        End If
    Next

    Redim Preserve InvAccSpecialCloseDueToStrategyInput(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N117 - OK - Time(s) = "&NO_SectionTime)

    CommonProductsToOpenInActForHC = array("CSS99","CMH99","CHD99","ROR99","SOT99","MRC99","OFF99")

    Redim CommonProductsToCloseInAct(2,50000)
    Counter = 0
    For Each Acc In ActiveAccountsList

        If HS.Account.IsCalculated(Acc) = False Then

            If Acc <> "A135" And Acc <> "A355E" And Acc <> "L345E" And Acc <> "L355E" And Acc <> "N01575" And HS.Account.IsDescendant("N01500", Acc) = FALSE Then

            If Acc <> "A375I" And Acc <> "L375I" And Acc <> "L175" And Acc <> "L191" And Acc <> "CA375I" And Acc <> "CL375I" And Acc <> "CL175" And Acc <> "CL191" And Acc <> "A375E" And Acc <> "L375E" And Acc <> "R846" Then
                If HS.Account.IsBase("HEADCOUNT",Acc) = False and HS.Account.IsBase("VALIDATION",Acc) = False And Acc <> "Active_column" Then
                    For each Prod in CommonProductsToOpenInActForHC

                        Custom1Top = HS.Account.C1Top(Acc)
                        If Custom1Top = "" Then Custom1Top = "[None]"
                        If Custom1Top ="ALL" Then Custom1Top = "CUSTOM1_TOP"

                        If HS.Custom1.IsBase(Custom1Top,Prod) = True Then

                            For Each sScenario In ActualScenarios
                                CommonProductsToCloseInAct(0,Counter) = sScenario
                                CommonProductsToCloseInAct(1,Counter) = Prod
                                CommonProductsToCloseInAct(2,Counter) = Acc
                                Counter = Counter + 1
                            Next
                        End If

                    Next
                End If
                End If
            End If
        End If
    Next

    CommonProducts2CloseInActual = array("CSS99","ROR99","OFF99")
    For Each Acc In Array("A135", "A355E", "L345E", "L355E")
        For Each Prod In CommonProducts2CloseInActual

            For Each sScenario In ActualScenarios
                CommonProductsToCloseInAct(0,Counter) = sScenario
                CommonProductsToCloseInAct(1,Counter) = Prod
                CommonProductsToCloseInAct(2,Counter) = Acc
                Counter = Counter + 1
            Next
        Next
    Next

    CommonProducts3CloseInActual = array("CSS99","CMH99","SOT99","MRC99","OFF99")
    For Each Acc In Array("A375I","L375I","L175","L191","CA375I","CL375I","CL175", "CL191")
        For Each Prod In CommonProducts3CloseInActual
            For Each sScenario In ActualScenarios
                CommonProductsToCloseInAct(0,Counter) = sScenario
                CommonProductsToCloseInAct(1,Counter) = Prod
                CommonProductsToCloseInAct(2,Counter) = Acc
                Counter = Counter + 1
            Next
        Next
    Next
    Redim Preserve CommonProductsToCloseInAct(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N119 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    Redim EQ_OPE_Close(1,10000)

    For Each Acc In ActiveAccountsList
        Custom2Top = HS.Account.C2Top(Acc)
        If Custom2Top = "" Then Custom2Top = "[None]"
        If Custom2Top ="ALL" Then Custom2Top = "CUSTOM2_TOP"

        If HS.Custom2.IsBase(Custom2Top,"EQ_OPE") = True Then
            If Acc <> "CL165" and HS.Account.IsBase("HELP_ACCOUNTS",Acc) = False and HS.Account.IsBase("VALIDATION",Acc) = False and HS.Account.IsCalculated(Acc) = False Then
                EQ_OPE_Close(0,Counter) = Acc
                EQ_OPE_Close(1,Counter) = "EQ_OPE"
                Counter = Counter + 1
            End If
        End If
    Next

    Redim Preserve EQ_OPE_Close(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N121 - OK - Time(s) = "&NO_SectionTime)

    Redim CloseSTR_PC99_FromInvAccs(2,10000)
    Counter = 0

    For Each Acc In ActiveAccountsList
        If HS.Account.IsCalculated(Acc) = FALSE Then
            sC1Top = HS.Account.C1Top(Acc)
            AccUD = GetUD(Acc, "Account", "")

            If sC1Top = "ProductLines_and_Service99" or Instr(AccUD,"ProductLines_and_Service99") > 0 Then
                ReDim Preserve Accounts2Close(Counter)
                Accounts2Close(Counter) = Acc
                Counter = Counter + 1
            End If
        End If
    Next

    Counter = 0
    For Each Ent In ActiveEntitiesList
        If Instr(Ent,"STRATEGY") > 0 Then
            If Ent <> "STRATEGY_MCG" Then

                For Each Acc In Accounts2Close
                    CloseSTR_PC99_FromInvAccs(0,Counter) = Ent
                    CloseSTR_PC99_FromInvAccs(1,Counter) = Acc
                    CloseSTR_PC99_FromInvAccs(2,Counter) = "PC99"
                    Counter = Counter + 1
                Next
            End If
        End If
    Next
    Redim Preserve CloseSTR_PC99_FromInvAccs(2,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N122 - OK - Time(s) = "&NO_SectionTime)

    Redim GHQ_ONE_Close(1,10000)
    Counter = 0
    C1List = array ("GHQ_ONE", "GHQ_PLM")

    For Each Acc In ActiveAccountsList
        If Acc <> "RM55" And Acc <> "RM60" And UCase(Acc) <> UCase("Active_Column") Then
            For each C1 in C1List
                GHQ_ONE_Close(0,Counter) = Acc
                GHQ_ONE_Close(1,Counter) = C1
                Counter = Counter + 1
            Next
        End If
    Next

    Redim Preserve GHQ_ONE_Close(1,Counter-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N123 - OK - Time(s) = "&NO_SectionTime)

    ReDim ActiveEntityList(Ubound(ActiveEntitiesList))
    Redim N165_CloseTaxNotesAccountsFromOtherThanGLEnts(3, 200000)

    TaxNoteAccTops = array("NOTE3A","NOTE3B","NOTE3C","NOTE3D","NOTE_NT1","NOTE_NT2","NOTE_NT3","NOTE_NT4")

    Counter = 0
    For Each sEnt In ActiveEntitiesList
        EntUD = GetUD(sEnt, "Entity", "")

        If Instr(EntUD,"/CloseStartDate:") = 0 and Instr(EntUD,"/ClosedInAct/") = 0 and IsActiveGL(EntUD,sYearCurrentActualReportingYear,12,"ACTUAL") = False Then

                ActiveEntityList(Counter) = sEnt
                Counter = Counter + 1

        End If
    Next
    ReDim Preserve ActiveEntityList(Counter-1)
    Counter = 0
    aAccToSkip = CombineLists(HS.Account.List("NT1_20_BS", "[Base]"),HS.Account.List("NT1_40_BS", "[Base]"))
    For each AccTop in TaxNoteAccTops
        If AccTop = "NOTE_NT1" Then
            aAccToProcess = RemoveMembersFromArray(HS.Account.List(AccTop, "[Base]"),aAccToSkip)
        Else
            aAccToProcess = HS.Account.List(AccTop, "[Base]")
        End If
        For Each Acc In aAccToProcess

            If HS.Account.IsCalculated(Acc) = FALSE And Acc <> "TAX_CALC_STOP" Then
                AccUD = GetUD(Acc, "Account", "")
                If Instr(AccUD,"/CloseStartDate:") = 0 Then
                    For Each Ent In ActiveEntityList
                        For each sYear in YearFutureYearsList
                            N165_CloseTaxNotesAccountsFromOtherThanGLEnts(0,Counter) = Acc
                            N165_CloseTaxNotesAccountsFromOtherThanGLEnts(1,Counter) = Ent
                            N165_CloseTaxNotesAccountsFromOtherThanGLEnts(2,Counter) = sYear
                            N165_CloseTaxNotesAccountsFromOtherThanGLEnts(3,Counter) = "ACTUAL"
                            Counter = Counter + 1
                        Next
                    Next
                End If
            End If
        Next
    Next
    Redim Preserve N165_CloseTaxNotesAccountsFromOtherThanGLEnts(3, Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N124 - OK - Time(s) = "&NO_SectionTime)

    If AppName <> "ASAPHFM" Then
    If HR_LOAD_ACTIVE = True Then
        ReDim N166_SAP_LOAD_ADJ_Close(3, 500000)
        ReDim N166_SAP_LOAD_LOAD_Close(4, 500000)

        Counter = 0
        Counter2 = 0

        For Each Ent In NONSAPLoadEntities
            For Each Acc In SAPLoadAccounts
                N166_SAP_LOAD_ADJ_Close(0,Counter) = Ent
                N166_SAP_LOAD_ADJ_Close(1,Counter) = Acc
                N166_SAP_LOAD_ADJ_Close(2,Counter) = "ADJ"
                N166_SAP_LOAD_ADJ_Close(3,Counter) = "ACTUAL"
                Counter = Counter + 1

                For each iYear in YearActReportingYearClose
                    N166_SAP_LOAD_LOAD_Close(0,Counter2) = Ent
                    N166_SAP_LOAD_LOAD_Close(1,Counter2) = Acc
                    N166_SAP_LOAD_LOAD_Close(2,Counter2) = "LOAD"
                    N166_SAP_LOAD_LOAD_Close(3,Counter2) = iYear
                    N166_SAP_LOAD_LOAD_Close(4,Counter2) = "ACTUAL"
                    Counter2 = Counter2 + 1
                Next
            Next
        Next

        Redim Preserve N166_SAP_LOAD_ADJ_Close(3,Counter-1)
        ReDim Preserve N166_SAP_LOAD_LOAD_Close(4,Counter2-1)

        If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N125 - OK - Time(s) = "&NO_SectionTime)
    End If
    End If

    AccsToCloseN19 = Array("N19_L325E","N19_L326","N19_L305E","N19_L475","N19_L455E")
    C2ToClose = Array("LR34")
    Counter = 0

    For each Acc in AccsToCloseN19
        For each C2 in C2ToClose
            Redim Preserve N19AccC2Close(1,Counter)
            N19AccC2Close(0,Counter) = Acc
            N19AccC2Close(1,Counter) = C2
            Counter = Counter + 1
        Next
    Next
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N127 - OK - Time(s) = "&NO_SectionTime)

        Counter = 0
        For Each Ent In ActiveEntitiesList
            EntUD = GetUD(Ent, "Entity", "")
            If Instr(EntUD,"/HEDGE/") = 0 and Instr(EntUD,"/CloseStartDate:") = 0  Then
                For each Acc in HS.Account.List("NOTE28","[Base]")
                    If HS.Account.IsCalculated(Acc) = False Then
                        Redim Preserve N169_N28_Close(1,Counter)
                        N169_N28_Close(0,Counter) = Ent
                        N169_N28_Close(1,Counter) = Acc
                        Counter = Counter + 1
                    End If
                Next
            End If
        Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N169 - OK - Time(s) = "&NO_SectionTime)

    Redim N170_A272IClose(3, 10000)

        Counter = 0
        For Each Sce In AllInputScenarios
            SceUD = GetUD(Sce, "Scenario", "ScenarioType")
            If UCase(SceUD) <> "CALCULATE" and Instr(Sce,"STRATEGY") = 0 Then
                For Each Ent In ActiveEntitiesList

                        N170_A272IClose(0,Counter) = Sce
                        N170_A272IClose(1,Counter) = Ent
                        N170_A272IClose(2,Counter) = "A272I"
                        N170_A272IClose(3,Counter) = "PC99"
                        Counter = Counter + 1

                Next
            End if
        Next

    Redim Preserve N170_A272IClose(3, Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N170 - OK - Time(s) = "&NO_SectionTime)

    Redim N171_CloseAccountsOtherThanGLEnts(2, 10000)
    AccToClose = CombineLists(HS.Account.List("R93NET", "[Base]"), Array("A195", "A362E", "L295", "L366E", "L174", "L177"))
    AccToClose = RemoveMembersFromArray(AccToClose, Array("R936"))

    Counter = 0
    For each AccClose in AccToClose
        AccUD = GetUD(AccClose, "Account", "")
        If Instr(AccUD,"/CloseStartDate:") = 0 and HS.Account.IsCalculated(AccClose) = False Then
            For Each Ent In ActiveEntitiesList
                EntUD = GetUD(Ent, "Entity", "")

                If Instr(EntUD,"/CloseStartDate:") = 0 and Instr(EntUD,"/ClosedInAct/") = 0 and IsActiveGL(EntUD,sYearCurrentActualReportingYear,12,"ACTUAL") = False Then

                    N171_CloseAccountsOtherThanGLEnts(0,Counter) = AccClose
                    N171_CloseAccountsOtherThanGLEnts(1,Counter) = Ent
                    N171_CloseAccountsOtherThanGLEnts(2,Counter) = "Actual"
                    Counter = Counter + 1
                End If
            Next
        End If
    Next
    Redim Preserve N171_CloseAccountsOtherThanGLEnts(2, Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N128 - OK - Time(s) = "&NO_SectionTime)

    Acclist = array("RM91","RM92")

    Counter = 0
    For Each sEnt In MacGregorActiveEntityList
        If sEnt <> "MDEH" And Left(sEnt, 8) <> "STRATEGY" Then
            For Each sAcc In Acclist
                Redim Preserve SER01_MG_Close(2,Counter)
                SER01_MG_Close(0,Counter) = sEnt
                SER01_MG_Close(1,Counter) = sAcc
                SER01_MG_Close(2,Counter) = "SER01_MG"
                Counter = Counter + 1
            Next
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N129 - OK - Time(s) = "&NO_SectionTime)

    aNotEstimatedAccounts = Array("RM54", "RM59", "RM60", "R812I", "R813I", "R832I", "R833I", "R852I", "R853I", "R872I", "R873I")

    aNotEstimatedAccounts4MacGregor = Array("RM56I", "RM58I", "RM12", "RM14", "RM21", "RM22")

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N133 - OK - Time(s) = "&NO_SectionTime)

    SSSAccounts2Close = Array("SSS_ORDERBOOK", "GPOBTESSS", "GPOBTECYSSS", "GPOBTECYSSS1", "GPOBTECYSSS2", "GPOBTECYSSS3")
    SSSAccounts2Close = CombineLists(HS.Account.List("STOTOBCY_TOP", "[Base]"), SSSAccounts2Close)
    SSSAccounts2Close = RemoveMembersFromArray(SSSAccounts2Close, Array("STOTOBCY4"))

    Counter = 0
    For Each sC1Member In HS.Custom1.List("SSS", "[Base]")
        sC1UD = GetUD(sC1Member, "Custom1", "")
        If InStr(sC1UD, "CloseStartDate:") = 0 Then

            If Left(sC1Member, 5) <> "SER07" Then
                ReDim Preserve SSSC1Members2Close(Counter)
                SSSC1Members2Close(Counter) = sC1Member
                Counter = Counter + 1
            End If
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N181 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each sAccount In HS.Account.List("CAPEX", "[Base]")
        If HS.Account.IsCalculated(sAccount) = FALSE Then
            ReDim Preserve CapexC1NoneCloseAcc(Counter)
            CapexC1NoneCloseAcc(Counter) = sAccount
            Counter = Counter + 1
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N182 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each sEntity In ActiveEntitiesList
        If Right(sEntity, 6) = "MACGREGOR_STRACQ" Then
            ReDim Preserve StrategyBusinessEntities(Counter)
            StrategyBusinessEntities(Counter) = sEntity
            Counter = Counter + 1
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N185 - OK - Time(s) = "&NO_SectionTime)

    GLAccountList = Array("A165I", "R842I", "R873I")
    GLICPAccountList = Array("A165I", "R842I", "L165", "R872I", "R873I", "R850", "R862")

    iNumEntities = Ubound(ActiveEntitiesList)
    Redim NonGLICPCloseList(iNumEntities)
    Redim NonGLEntityCloseList(iNumEntities)
    Redim NonCAROEntityCloseList(iNumEntities)

    iCounter = 0
    iCounter2 = 0
    iCounter3 = 0
    iCounterNorsu = 0
    iCounter2Norsu = 0

    For Each sEntity In ActiveEntitiesList
        EntUD = GetUD(sEntity, "Entity", "")

        bIsGL = IsActiveGL(EntUD,sYearCurrentActualReportingYear,12,"ACTUAL")
        bIsNorsuGL = IsActiveGL(EntUD,sYearCurrentActualReportingYear,12,"NORSU_ACTUAL")
        If bIsGL = False And bIsNorsuGL = False Then
            If HS.Entity.IsICP(sEntity) = TRUE Then

                NonGLICPCloseList(iCounter) = sEntity
                iCounter = iCounter + 1
            End If

            NonGLEntityCloseList(iCounter2) = sEntity
            iCounter2 = iCounter2 + 1
        End If

        If sEntity <> "MSEO"  Then
            NonCAROEntityCloseList(iCounter3) = sEntity
            iCounter3 = iCounter3 + 1
        End If
    Next

    Redim Preserve NonGLICPCloseList(iCounter-1)
    Redim Preserve NonGLEntityCloseList(iCounter2-1)
    Redim Preserve NonCAROEntityCloseList(iCounter3-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N190 - OK - Time(s) = "&NO_SectionTime)

    Redim N195_Note20_C2Close(1,10000)
    Counter = 0
    For each Acc in HS.Account.List("NOTE20","[Base]")
        ValidC2Top = GetUD(Acc, "Account", "C2TopAct")
        If ValidC2Top <> "" Then
            For each C2mbr in HS.Custom2.List("ASSCO_JV","[Base]")
                C2Closed = GetUD(C2mbr, "Custom2", "CloseStartDate")
                If C2Closed = "" Then
                    If HS.Custom2.IsBase(ValidC2Top,C2mbr) = False Then
                        N195_Note20_C2Close(0,Counter) = Acc
                        N195_Note20_C2Close(1,Counter) = C2mbr
                        Counter = Counter + 1
                    End If
                End If

            Next
        End If
    Next
    Redim preserve N195_Note20_C2Close(1,Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N194 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each sC2Member In HS.Custom2.List("EQUITYADJ", "[Base]")
        sC2UD = GetUD(sC2Member, "Custom2", "")
        If InStr(sC2UD, "CloseStartDate") = 0 And InStr(sC2UD, "Calc") = 0 Then
            ReDim Preserve aEquityAdj2Close(Counter)
            aEquityAdj2Close(Counter) = sC2Member
            Counter = Counter + 1
        End If
    Next

    ReDim Preserve aEquityAdj2Close(Counter)
    aEquityAdj2Close(Counter) = "RET_CTA"

    Counter = 0
    ReDim aEquityEntity2Close(Ubound(ActiveEntitiesList))
    For Each sEntity In ActiveEntitiesList

        If HS.Entity.IsBase("MCG_ME", sEntity) = FALSE Then
            aEquityEntity2Close(Counter) = sEntity
            Counter = Counter + 1
        End If
    Next
    ReDim Preserve aEquityEntity2Close(Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N196 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    aLegalCompanies = Array("MFI1", "MDE2", "MNO1", "MSE1", "MSG3")
    For Each sLegalCompany In aLegalCompanies
        For Each sEntity In HS.Entity.List(sLegalCompany, "[Base]")
            ReDim Preserve aEntities2LeftOpen(Counter)
            aEntities2LeftOpen(Counter) = sEntity
            Counter = Counter + 1
        Next
    Next
    aEntities2CloseFromRM54 = RemoveMembersFromArray(HS.Entity.List("MACGREGOR","[Base]"), aEntities2LeftOpen)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N197 - OK - Time(s) = "&NO_SectionTime)

    CloseEntityListPRD01 = Array("MKRM","MDEH")

    PRD02Counter = 0
    PRD03Counter = 0
    ReDim CloseEntityListPRD02(Ubound(MacGregorActiveEntityList))
    ReDim CloseEntityListPRD03(Ubound(MacGregorActiveEntityList))
    For Each sEntity In MacGregorActiveEntityList
        If sEntity <> "MNOA" Then
            CloseEntityListPRD02(PRD02Counter) = sEntity
            PRD02Counter = PRD02Counter + 1
        End If
        If sEntity <> "MDEH" And sEntity <> "MKRM" Then
            CloseEntityListPRD03(PRD03Counter) = sEntity
            PRD03Counter = PRD03Counter + 1
        End If
    Next
    ReDim Preserve CloseEntityListPRD02(PRD02Counter-1)
    ReDim Preserve CloseEntityListPRD03(PRD03Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N199 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    TAX_NOTES = Array("NOTE3A","NOTE3B","NOTE3C","NOTE3D")

        EntList = HS.Entity.List("ADD_TAX","[Base]")
        For each Ent in EntList
            EntUD = GetUD(Ent, "Entity", "")

            If Instr(EntUD,"/sGLstart:") = 0 and Instr(EntUD,"/sInTaxGroupEnd:") = 0 and Instr(EntUD,"/CloseStartDate:") = 0 Then

                For each TaxNote in TAX_NOTES
                    AccList = HS.Account.List(TaxNote,"[Base]")
                    For each Acc in AccList
                        AccUD = GetUD(Acc, "Account", "")
                        If Instr(AccUD,"/SuperGL/") > 0 and Instr(AccUD,"/CloseStartDate:") = 0 and HS.Account.IsCalculated(Acc) = False Then
                            Redim Preserve N201_SuperGL_Close(2,Counter)
                            N201_SuperGL_Close(0,Counter) = Ent
                            N201_SuperGL_Close(1,Counter) = Acc
                            N201_SuperGL_Close(2,Counter) = "ACTUAL"
                            Counter = Counter + 1
                        End If
                    Next
                Next

            End If
        Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N200 - OK - Time(s) = "&NO_SectionTime)

    ReDim NONGCPLoadAccountsList(Ubound(NONGCPLoadAccounts))
    Counter = 0

    For Each sAcc In NONGCPLoadAccounts
        If HS.Account.IsCalculated(sAcc) = False And HS.Account.IsBase("VALIDATION", sAcc) = False Then
            sC3Top = HS.Account.C3Top(sAcc)
            If sC3Top = "" Then
                sC3Top = "[None]"
            ElseIf sC3Top = "ALL" Then
                sC3Top = "CUSTOM3_TOP"
            End If

            If HS.Custom3.Isbase(sC3Top, "ADJ") = True And HS.Custom3.IsBase(sC3Top, "LOAD") = True Then
                NONGCPLoadAccountsList(Counter) = sAcc
                Counter = Counter + 1
            End If
        End If
    Next
    ReDim Preserve NONGCPLoadAccountsList(Counter-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N207 - OK - Time(s) = "&NO_SectionTime)

    AccList_N210 = HS.Account.List("N15088b","[Base]")
    Redim EntCloseList_N210(Ubound(EntitiesAllList))
    c=0
    For Each sEnt In ActiveEntitiesList
        If sEnt <> "[None]" Then
            EntCloseList_N210(c) = sEnt
            c = c + 1
        End If
    Next
    Redim Preserve EntCloseList_N210(c-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N210 - OK - Time(s) = "&NO_SectionTime)

    Redim N212_CloseList(1,Ubound(HS.Custom1.List("CUSTOM1_TOP","[Base]")))
    c = 0

    N212_Close = Array("GSD")
    For each Prod in N212_Close
        N211_List = HS.Custom1.List(Prod,"[Base]")
        For Each LstMbr In N211_List
            If LstMbr <> "SER03_MG" Then
                N212_CloseList(0,c) = "N0431"
                N212_CloseList(1,c) = LstMbr
                c = c + 1
            End If
        Next
    Next
    Redim Preserve N212_CloseList(1,c-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N209 - OK - Time(s) = "&NO_SectionTime)

    N214_AccClose = CombineLists(HS.Account.List("N3C_4100A", "[Base]"), HS.Account.List("N3C_5100L", "[Base]"))
    N214_AccClose = RemoveMembersFromArray(N214_AccClose, Array("N3C_4010A","N3C_4095A"))
    N214_C2Close = Array("TAX_CHGIS")

    N214_EntClose = RemoveMembersFromArray(ActiveEntitiesList, Hs.Entity.List("MCG_ME", "[Base]"))

    N214_EntClose = RemoveMembersFromArray(N214_EntClose, Hs.Entity.List("RAPP_USA_TAX","[Base]"))

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N214 - OK - Time(s) = "&NO_SectionTime)

    c=0
    Redim EntCloseList_N215(Ubound(EntitiesAllList))
    For Each sEnt In ActiveEntitiesList

        If HS.Entity.IsBase("MCG_ME", sEnt) = False Then
            EntCloseList_N215(c) = sEnt
            c=c+1
        End If
    Next
    Redim Preserve EntCloseList_N215(c-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N215 - OK - Time(s) = "&NO_SectionTime)

    iCounter = 0
    ReDim C2Members2CloseFromACQDIS(Ubound(Custom2AllList))
    C3Members2CloseFromACQDIS = HS.Custom3.List("ACQ_DISP", "[Base]")
    C2MembersInACQDIS = RemoveMembersFromArray(HS.Custom2.List("NONE_ACQ_DIS", "[Base]"), Array("[None]"))

    For Each sC2Member In Custom2AllList
        If HS.Custom2.IsBase("NONE_ACQ_DIS", sC2Member) = FALSE Or sC2Member = "[None]" Then
            C2Members2CloseFromACQDIS(iCounter) = sC2Member
            iCounter = iCounter + 1
        End If
    Next
    ReDim Preserve C2Members2CloseFromACQDIS(iCounter - 1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N218 - OK - Time(s) = "&NO_SectionTime)

    N220_AccClose = HS.Account.List("NOTE31", "[Base]")
    N220_AccClose = CombineLists(N220_AccClose,Array("L166"))
    N220_C3Close = Hs.Custom3.List("C3_TECHNICAL_PARENT", "[Base]")
    N220_C3Close = RemoveMembersFromArray(N220_C3Close, Array("LOAD","BEGBALadj"))
    N220_C3Close = RemoveMembersFromArray(N220_C3Close, Hs.Custom3.List("ACQ_DISP", "[Base]"))

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N220 - OK - Time(s) = "&NO_SectionTime)

    c = 0
    For each Acc in HS.Account.List("NOTE32","[Base]")
        If HS.Account.IsCalculated(Acc) = False Then
            For each sC3 in HS.Custom3.List("CUSTOM3_TOP","[Base]")
                If sC3 <> "ACQ_DISP_INP" Then
                    Redim Preserve N223_CloseList(1,c)
                    N223_CloseList(0,c) = Acc
                    N223_CloseList(1,c) = sC3
                    c = c + 1
                End if
            Next
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N223 - OK - Time(s) = "&NO_SectionTime)

    Counter = 0
    For Each C3Member In HS.Custom3.List("", "[Base]")
        C3CloseDate = GetUD(C3Member, "Custom3", "CloseStartDate")
        If C3CloseDate <> "" And Len(C3CloseDate) > 4 Then
            StartMonth = ""    :    StartYear = ""
            StartMonth = left(C3CloseDate,3)
            StartYear = CInt(Right(C3CloseDate,4))

            If UCase(StartMonth) <> "JAN" Then
                StartYear = CInt(StartYear) + 1
            End If

            For Each iCloseYear In YearFutureYearsList
                If StartYear <= CInt(iCloseYear) Then
                    ReDim Preserve ClosedC3Members(1, Counter)
                    ClosedC3Members(0, Counter) = iCloseYear
                    ClosedC3Members(1, Counter) = C3Member

                    Counter = Counter + 1
                End If
            Next
        End If
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N225 - OK - Time(s) = "&NO_SectionTime)

    sC1TopMember = HS.Account.C1Top("L165")
    N227_C1Close = RemoveMembersFromArray(Hs.Custom1.List(sC1TopMember,"[Base]"), Array("[None]"))
    sC2TopMember = HS.Account.C2Top("L165")
    N227_C2Close = RemoveMembersFromArray(Hs.Custom2.List(sC2TopMember,"[Base]"), Array("RET_SBP"))
    N227_AccClose = Array("L165")

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N227 - OK - Time(s) = "&NO_SectionTime)

    Redim aScenarioHierarchies(Ubound(AllScenarios))

    Counter = 0
    For Each sScen In HS.Scenario.List("","")
        If HS.Scenario.IsBase("", sScen) = FALSE Then
            aScenarioHierarchies(Counter) = sScen
            Counter = Counter + 1
        End If
    Next
    Redim Preserve aScenarioHierarchies(Counter - 1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N232 - OK - Time(s) = "&NO_SectionTime)

    Redim N13C_NoInoput_List(1,4)
    N13C_NoInoput_List(0,0) = "N13_Assets"        :     N13C_NoInoput_List(1,0) = "PS311"
    N13C_NoInoput_List(0,1) = "N13_Assets"        :     N13C_NoInoput_List(1,1) = "PS312"
    N13C_NoInoput_List(0,2) = "N13_Assets"        :     N13C_NoInoput_List(1,2) = "PS313"
    N13C_NoInoput_List(0,3) = "N13_Liabilities"        :     N13C_NoInoput_List(1,3) = "PS32"
    N13C_NoInoput_List(0,4) = "N13_Liabilities"        :     N13C_NoInoput_List(1,4) = "PS33"

    c = 0
    ReDim AllEntsExceptTobesold(Ubound(ActiveEntitiesList))
    For Each Ent In ActiveEntitiesList

            AllEntsExceptTobesold(c) = Ent
            c = c + 1

    Next
    ReDim Preserve AllEntsExceptTobesold(c-1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N233 - OK - Time(s) = "&NO_SectionTime)

    c = 0
    For each acc in HS.Account.List("NOTE19","[Base]")
        if acc <> "N19_L225" and acc <> "N19_L326" Then
            C2List = Array("LR301","LR302")
            For each c2 in C2List
                Redim preserve N241_Note19_close(1,c)
                N241_Note19_close(0,c) = acc
                N241_Note19_close(1,c) = c2
                c = c + 1
            Next
        End if
    Next

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N234 - OK - Time(s) = "&NO_SectionTime)

    iCounter = 0
    aAllACQAccounts = HS.Account.List("ACQ_ACCOUNTS", "[Base]")
    ReDim aACQCalcAccounts(Ubound(aAllACQAccounts))

    For Each acc In aAllACQAccounts
        If Instr(GetUD(acc, "Account", ""),"/Calc/") > 0 Then
            aACQCalcAccounts(iCounter) = acc
            iCounter = iCounter + 1
        End If
    Next
    ReDim Preserve aACQCalcAccounts(iCounter - 1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N245 - OK - Time(s) = "&NO_SectionTime)

    Redim NonTTSentities(UBound(ActiveEntitiesList))
    c = 0
    For each Ent in ActiveEntitiesList

            NonTTSentities(c) = Ent
            c = c + 1

    Next
    Redim Preserve NonTTSentities(c-1)

    iCounter = 0
    aAllPostACQ_CTA_C2 = Array("RET_MIN")
    aAllPostACQ_CTA_C2 = CombineLists(aAllPostACQ_CTA_C2,HS.custom2.List("POST_ACQ_CTA", "[Base]"))
    aAllPostACQ_CTA_C2 = CombineLists(aAllPostACQ_CTA_C2,HS.custom2.List("CTA", "[Base]"))
    aAllPostACQ_CTA_C2 = CombineLists(aAllPostACQ_CTA_C2,HS.custom2.List("C2_NCI", "[Base]"))
    ReDim aAllPostACQ_CTA_Calc_C2(Ubound(aAllPostACQ_CTA_C2))

    For Each c2Member In aAllPostACQ_CTA_C2
        If Instr(GetUD(c2Member, "Custom2", ""),"/Calc/") > 0 Then
            aAllPostACQ_CTA_Calc_C2(iCounter) = c2Member
            iCounter = iCounter + 1
        End If
    Next
    ReDim Preserve aAllPostACQ_CTA_Calc_C2(iCounter - 1)

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N245 - OK - Time(s) = "&NO_SectionTime)

    Redim N249_ProvisionClose(1,100)
    i = 0
    For each Acc in HS.Account.List("N01500","[Base]")
        If Acc <> "N01511" Then
            N249_ProvisionClose(0,i) = Acc
            N249_ProvisionClose(1,i) = "PROV_RECUR"
            i = i + 1
        Else
            N249_ProvisionClose(0,i) = Acc
            N249_ProvisionClose(1,i) = "PROV_INC"
            i = i + 1
            N249_ProvisionClose(0,i) = Acc
            N249_ProvisionClose(1,i) = "PROV_REV"
            i = i + 1
        End If
    Next
    Redim Preserve N249_ProvisionClose(1,i-1)
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N246 - OK - Time(s) = "&NO_SectionTime)

    aN263_Valid_entities = Array("MARADJE")
    aN263_Not_Valid_entities = RemoveMembersFromArray(ActiveEntitiesList,aN263_Valid_entities)
    aN263_Eco_Accounts = CombineLists(HS.Account.List("ECO_PORTFOLIO", "[Base]"),HS.Account.List("SUST_PORTFOLIO", "[Base]"))

    aN263_Other_Than_Eco_Accounts = RemoveMembersFromArray(ActiveAccountsList,aN263_Eco_Accounts)
    aN263_ECOSCEN = Array("ACTUAL","FORECAST")

    N265_C3Close = Array("ACQ","NCI")
    N265_EntClose = RemoveMembersFromArray(ActiveEntitiesList, Hs.Entity.List("MCG_ME","[Base]"))

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N265 - OK - Time(s) = "&NO_SectionTime)

    aN279Acc = Hs.Account.List("NT1_10","[Base]")
    aN279Acc_NT1_80 = Hs.Account.List("NT1_80","[Base]")
    aN279C2Tax1 = Array("ND_PREV","TAX_PREV","VA_PREV","ND_CB","TAX_CB","VA_CB")
    aN279C2Tax2 = Array("ND_CB","TAX_CB","VA_CB")
    aN279C2Tax1_NT1_80 = Array("ND_PREV","TAX_PREV","ND_CB","TAX_CB")
    aN279C2Tax2_NT1_80 = Array("ND_CB","TAX_CB")

    Counter1 = 0
    Counter2 = 0
    Redim aN279EntTax1(Ubound(ActiveEntitiesList))
    Redim aN279EntTax2(Ubound(ActiveEntitiesList))
    For Each sEnt In ActiveEntitiesList
        EntUD = GetUD(sEnt, "Entity", "")

        If IsActiveGL(EntUD,sYearCurrentActualReportingYear,12,"ACTUAL") = True Then
            dData = Hs.GetCell("S#Actual.A#TAX_CATEGORY.I#[ICP Top].E#" & sEnt & ".V#<Entity Currency>.C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None].W#YTD.P#Dec.Y#" & sYearCurrentActualReportingYear)
            dDataPrevY = Hs.GetCell("S#Actual.A#TAX_CATEGORY.I#[ICP Top].E#" & sEnt & ".V#<Entity Currency>.C1#[None].C2#[None].C3#CUSTOM3_TOP.C4#[None].W#YTD.P#Dec.Y#" & CInt(sYearCurrentActualReportingYear)-1)
            If dData = 1 And dDataPrevY = 1 Then
                aN279EntTax1(Counter1) = sEnt
                Counter1 = Counter1 + 1
            ElseIf dData = 2 Then
                aN279EntTax2(Counter2) = sEnt
                Counter2 = Counter2 + 1
            End If
        End If
    Next
    If Counter1  = 0 Then
        aN279EntTax1(Counter1) = "ADMIN_ENTITY"
        ReDim Preserve aN279EntTax1(Counter1)
    Else
        ReDim Preserve aN279EntTax1(Counter1-1)
    End If
    If Counter2  = 0 Then
        aN279EntTax2(Counter2) = "ADMIN_ENTITY"
        ReDim Preserve aN279EntTax2(Counter2)
    Else
        ReDim Preserve aN279EntTax2(Counter2-1)
    End If

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N279 - OK - Time(s) = "&NO_SectionTime)

    FirstWriteToFileSection = True

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N1",N1_WriteToFile,dimC3,"IFRS",dimYear,YearFutureYearsList,dimSce,RemoveMembersFromArray(AllInputScenarios, CombineLists(ActualScenarios,Array("NORSU_ACTUAL"))),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC1 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N2",N2_WriteToFile,dimC3,"BEGBALadj",dimPeriod,PeriodMonthExeptDecList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC2 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N3",N3_WriteToFile,dimPeriod,dimYear,dimAcc,PeriodMonthList,YearNoInputYearsList,ClosedAccountsTimeSpecificList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If IsEmpty(ClosedAccountsTimeSpecificList) = False Then Erase ClosedAccountsTimeSpecificList
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC3 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N4",N4_WriteToFile,dimPeriod,dimYear,dimEnt,dimC3,PeriodMonthList,YearNoInputYearsList,CloseEntitiesWithClosDateList,"","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC4 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N5",N5_WriteToFile,dimPeriod,dimYear,dimICP,DimC3,PeriodMonthList,YearNoInputYearsList,CloseEntitiesWithClosDateList,"","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC5 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ClosedC1membersTimeSpecificList) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N7",N7_WriteToFile,dimPeriod,dimYear,dimC1,PeriodMonthList,YearNoInputYearsList,ClosedC1membersTimeSpecificList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If IsEmpty(ClosedC1membersTimeSpecificList) = False Then Erase ClosedC1membersTimeSpecificList
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC7 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C2timeSpecificCloseList) = False  Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N8",N8_WriteToFile,dimPeriod,dimYear,dimC2,PeriodMonthList,YearNoInputYearsList,C2timeSpecificCloseList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If IsEmpty(C2timeSpecificCloseList) = False Then Erase C2timeSpecificCloseList
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC8 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(EntitiesWithSuspendedDateList) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseEndDate","N9",N9_WriteToFile,dimPeriod,dimYear,dimEnt,PeriodMonthList,YearNoInputYearsList,EntitiesWithSuspendedDateList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC9 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C3ToCloseFromScenarioList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N10",N10_WriteToFile,dimC3,dimSce,C3ToCloseFromScenarioList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC10 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseCalculatedScenariosList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N11",N11_WriteToFile,dimSce,dimAcc,CloseCalculatedScenariosList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC11 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC1CloseBasedOnTheUD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N12a",N12_WriteToFile,dimAcc,dimSce,dimC1,AccC1CloseBasedOnTheUD,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC12 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC1andEntityCloseBasedOnTheUD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N12b",N12_WriteToFile,dimAcc,dimSce,dimC1,dimEnt,AccC1andEntityCloseBasedOnTheUD,"","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC13 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC1CloseBasedOnTheUD_InEveryScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N12c",N12_WriteToFile,dimAcc,dimC1,AccC1CloseBasedOnTheUD_InEveryScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC14 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC2CloseBasedOnTheUD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N13a",N13_WriteToFile,dimAcc,dimSce,dimC2,AccC2CloseBasedOnTheUD,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC15 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC2CloseBasedOnTheUD_InEveryScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N13b",N13_WriteToFile,dimAcc,dimC2,AccC2CloseBasedOnTheUD_InEveryScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC16 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC3CloseBasedOnTheUD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N14a",N14_WriteToFile,dimAcc,dimSce,dimC3,AccC3CloseBasedOnTheUD,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC17 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccC3CloseBasedOnTheUD_InEveryScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N14b",N14_WriteToFile,dimAcc,dimC3,AccC3CloseBasedOnTheUD_InEveryScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC18 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccICPCloseBasedOnTheUD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N15a",N15_WriteToFile,dimAcc,dimSce,dimICP,AccICPCloseBasedOnTheUD,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC19 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccICPCloseBasedOnTheUD_InEveryScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N15b",N15_WriteToFile,dimAcc,dimICP,AccICPCloseBasedOnTheUD_InEveryScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC20 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccScenCloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N16",N16_WriteToFile,dimAcc,dimSce,dimC3,AccScenCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC21 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseOtherBAsProducts) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N17",N17_WriteToFile,dimEnt,dimC1,CloseOtherBAsProducts,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC22 - OK - Time(s) = "&NO_SectionTime)

    AccsToCloseSER99 = array("RM01E","RM01I","RM12","RM14","RM21","RM22","RM23","RM24","RM31","RM32","RM34","RM36")
    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N20d",N20d_WriteToFile,dimC1,Array("SER99_MG"),dimAcc,AccsToCloseSER99,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC20d - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(EntScenCloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N22a",N22_WriteToFile,dimEnt,dimSce,dimC3,EntScenCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC27 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ICPScenCloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N22b",N22_WriteToFile,dimICP,dimSce,dimC3,ICPScenCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC28 - OK - Time(s) = "&NO_SectionTime)

    Custom1WONone = Filter(HS.Custom1.List("", "[Base]"),"[None]",false)
    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N28",N28_WriteToFile,dimC1,Custom1WONone,dimC2,HS.Custom2.List("COUNTRIES", "[Base]"),dimAcc,"Active_Column","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC33 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N28b",N28_WriteToFile,dimC2,Array("C2_Inp", "[None]"),dimAcc,"Active_Column","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC33 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ActAccsToCloseFromEST) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N33",N33_WriteToFile,dimSce,dimAcc,ActAccsToCloseFromEST,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC39 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N34",N34_WriteToFile,dimAcc,AccToCloseInActual,dimSce,ActualScenarios,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC40 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(RM21_ICP_C1_ToCloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N35",N35_WriteToFile,dimC1,dimICP,dimAcc,RM21_ICP_C1_ToCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC41 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(FLU_SP_ToCloseFrom_RM21_C2Inp) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N40",N40_WriteToFile,dimEnt,dimAcc,dimC2,FLU_SP_ToCloseFrom_RM21_C2Inp,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC47 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N42",N42_WriteToFile,dimAcc,HS.Account.List("ACCREC", "[Base]"),dimC1,Array("PC99"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC49 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ICPs_To_Close_From_RM21_SpareParts_Input) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N43",N43_WriteToFile,dimAcc,dimICP,ICPs_To_Close_From_RM21_SpareParts_Input,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC50 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseNonInputMonthsFromAccounts) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N44",N44_WriteToFile,dimAcc,dimPeriod,CloseNonInputMonthsFromAccounts,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC51 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N50",N50_WriteToFile,dimC1,MacGregorActiveProductsList,dimC2,C2_Markets_List,dimSce,EstimateScenarioslist,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC58 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CopyScenarioAccCloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N51",N51_WriteToFile,dimSce,dimAcc,CopyScenarioAccCloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC59 - OK - Time(s) = "&NO_SectionTime)

    YearstoClose_FCST_CurrFcstYearAndPeriod = Array("2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036","2037","2038")
    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N55a",N55_WriteToFile,dimAcc,"FCST_CurrFcstYearAndPeriod",dimYear,YearstoClose_FCST_CurrFcstYearAndPeriod,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC61 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N55b",N55_WriteToFile,dimAcc,"FCST_CurrFcstYearAndPeriod",dimPeriod,PeriodMonthExeptDecList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC62 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(EntVsOwnICP) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N58",N58_WriteToFile,dimEnt,dimICP,EntVsOwnICP,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC64 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(InternalInventotyIO_SUBClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N61",N61_WriteToFile,dimC2,dimSce,dimAcc,InternalInventotyIO_SUBClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N61 - OK - Time(s) = "&NO_SectionTime)

    aCustom2ToCloseA218 = RemoveMembersFromArray(HS.Custom2.List("IO_SUB", "[Base]"), Array("Gross_Ext"))
    If IsEmpty(aCustom1ToCloseA218) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N61c",N61c_WriteToFile,dimC2,aCustom2ToCloseA218,dimAcc,Array("A218"),dimICP,aICPs2CloseA218,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N61c - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CapitalLoans) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N62",N62_WriteToFile,dimEnt,dimAcc,CapitalLoans,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC67 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N65",N65_WriteToFile,dimAcc,dimC2,dimEnt,CloseTransMemberPerAccountPerC2_OnlyManualElinEntOpen,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC70 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseTransMemberPerC2_OnlyManualElinEntOpen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N66",N66_WriteToFile,dimC2,dimEnt,CloseTransMemberPerC2_OnlyManualElinEntOpen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC71 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseCapitalLoans) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N67",N67_WriteToFile,dimAcc,dimEnt,CloseCapitalLoans,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC72 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(MacGregorOrdersToCloseFromC2CountriesInAct) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N69",N69_WriteToFile,dimAcc,dimC1,dimC2,dimPeriod,dimSce,MacGregorOrdersToCloseFromC2CountriesInAct,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC74 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N73",N73_WriteToFile,dimICP,"[ICP None]",dimAcc,ICP_Accounts_To_Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC79 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseRM63) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N76a",N76_WriteToFile,dimEnt,dimAcc,CloseRM63,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False

    If IsEmpty(MARA_RM63_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N76b",N76_WriteToFile,dimEnt,dimC1,MARA_RM63_Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False

    If IsEmpty(StrategyEntities2LeaveOpen) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N76c",N76_WriteToFile,dimEnt,StrategyEntities2LeaveOpen,dimAcc,Array("RM63"),dimSce,CombineLists(ActualScenarios, EstimateScenarioslist),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False

    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC82 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseCopyFlags) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N77",N77_WriteToFile,dimSce,dimAcc,dimEnt,CloseCopyFlags,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC83 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseL176) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N79",N79_WriteToFile,dimEnt,dimAcc,CloseL176,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC85 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(FlagBasedNoInputs) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N91",N91_WriteToFile,dimSce,dimAcc,dimC1,FlagBasedNoInputs,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC94 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N93",N93_WriteToFile,dimAcc,"L165",dimC2,"EQ_OPE","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC97 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseOnlyEntitiesWithDate) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N98a",N98_WriteToFile,dimPeriod,dimYear,dimEnt,dimC3,PeriodMonthList,YearNoInputYearsList,CloseOnlyEntitiesWithDate,"","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC102 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseOnlyICPWithDate1stYear) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N98b",N98_WriteToFile,dimPeriod,dimYear,dimICP,dimC3,dimAcc,PeriodMonthList,YearNoInputYearsList,CloseOnlyICPWithDate1stYear,"","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC103 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseOnlyICPWithDate) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseStartDate","N98c",N98_WriteToFile,dimPeriod,dimYear,dimICP,dimC3,PeriodMonthList,YearNoInputYearsList,CloseOnlyICPWithDate,"","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC103 - OK - Time(s) = "&NO_SectionTime)

    K107_Scenario_CloseList = RemoveMembersFromArray(AllInputScenarios, Array("BUDGET_FORECAST"))
    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N99",N99_WriteToFile,dimAcc,"K107",dimSce,K107_Scenario_CloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC104 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C1WithSuspendedDateList) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseEndDate","N100",N100_WriteToFile,dimPeriod,dimYear,dimC1,PeriodMonthList,YearNoInputYearsList,C1WithSuspendedDateList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC105 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C2WithSuspendedDateList) = False Then NoInputList = CreateNoInputs("CLOSETIMESPECIFICLIST",False,"CloseEndDate","N101",N101_WriteToFile,dimPeriod,dimYear,dimC2,PeriodMonthList,YearNoInputYearsList,C2WithSuspendedDateList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC106 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N104a",N104_WriteToFile,dimAcc,"FCST_ActDataMonth",dimSce,"FORECAST",dimPeriod,aFcstMonths,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC109 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N104b",N104_WriteToFile,dimAcc,"FCST_ActDataMonth",dimSce,"FORECAST",dimYear,aFcstYears,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC109b - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CM_CloseInputAccsFromFLU) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N109",N109_WriteToFile,dimEnt,dimAcc,CM_CloseInputAccsFromFLU,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC114 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ClosedC1PerScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N110",N110_WriteToFile,dimC1,dimSce,ClosedC1PerScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC115 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ClosedC2PerScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N111",N110_WriteToFile,dimC2,dimSce,ClosedC2PerScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC116 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ClosedC3PerScen) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N111",N111_WriteToFile,dimC3,dimSce,ClosedC3PerScen,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC116b - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(MG_SER_HC_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N112",N112_WriteToFile,dimC1,dimSce,dimAcc,MG_SER_HC_Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC117 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(Note9AccC2Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N115",N115_WriteToFile,dimAcc,dimC2,Note9AccC2Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC120 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ClosePRE_RATES) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N118",N118_WriteToFile,dimAcc,dimSce,ClosePRE_RATES,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC123 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseMSD99_OFS99_FromAccounts2) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N119",N119_WriteToFile,dimEnt,dimC1,dimC4,CloseMSD99_OFS99_FromAccounts2,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC124 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C2AcQDisCloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N120",N120_WriteToFile,dimSce,dimC2,C2AcQDisCloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC125 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CapexClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N121",N121_WriteToFile,dimAcc,dimC2,CapexClose,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC126 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C3Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N122",N122_WriteToFile,dimAcc,dimC3,C3Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC127 - OK - Time(s) = "&NO_SectionTime)

    ScenariosToClose = array("BUDGET_ACTRATE","ACTUALFCST_PREVYRATE")
    AccsToClose = array("END_RATES","AVG_RATES")
    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N125",N125_WriteToFile,dimSce,ScenariosToClose,dimAcc,AccsToClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC130 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ACQ_DISPBUSIN_RATES_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N126",N126_WriteToFile,dimYear,dimAcc,ACQ_DISPBUSIN_RATES_Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC131 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(Close_INP_FROM_SAP_LOAD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N129",N129_WriteToFile,dimEnt,dimAcc,dimC3,dimSce,Close_INP_FROM_SAP_LOAD,"","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC134 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ScenarisToCloseFromSAPFlags) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N130",N130_WriteToFile,dimAcc,SAP_FLAGS,dimSce,ScenarisToCloseFromSAPFlags,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC135 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseLOAD_FROM_NON_SAP_ENTC3) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N131a",N131_WriteToFile,dimEnt,dimC3,CloseLOAD_FROM_NON_SAP_ENTC3,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC136 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseLOAD_FROM_NON_SAP_ENTACC) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N131b",N131_WriteToFile,dimEnt,dimAcc,CloseLOAD_FROM_NON_SAP_ENTACC,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC137 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N132CloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N132",N132_WriteToFile,dimAcc,dimC2,N132CloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC138 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N133CloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N133",N133_WriteToFile,dimEnt,dimAcc,N133CloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC139 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NONSAPLoadEntitites) = False Then NoInputList = CreateNoInputs("CLOSELISTS",True,"","N134",N134_WriteToFile,dimEnt,NONSAPLoadEntitites,dimC1,Array("NMAP"),dimSce,Array("Actual"),"","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC139 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(SAP_LOAD_AccountClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",True,"","N135a",N135_WriteToFile,dimAcc,dimC1,dimSce,SAP_LOAD_AccountClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC139 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(SAP_LOAD_ICPClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",True,"","N136",N136_WriteToFile,dimEnt,dimICP,dimYear,SAP_LOAD_ICPClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC142 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(SAP_LOAD_AccountCloseC3LOAD) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N138",N138_WriteToFile,dimAcc,dimC3,SAP_LOAD_AccountCloseC3LOAD,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC139 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N140CloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N140",N140_WriteToFile,dimEnt,dimAcc,N140CloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC141 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N141",N141_WriteToFile,dimAcc,"RM54",dimC1,OtherThanGLSProducts,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC142 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NMAP_ICP_ICACC_CLOSE) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N142",N142_WriteToFile,dimAcc,dimICP,NMAP_ICP_ICACC_CLOSE,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC143 - OK - Time(s) = "&NO_SectionTime)

    Scenarios_wo_Actual = RemoveMembersFromArray(AllInputScenarios, Array("ACTUAL"))
    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N143a",N143_WriteToFile,dimSce,Scenarios_wo_Actual,dimICP,"NMAP_ICP","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC144 - OK - Time(s) = "&NO_SectionTime)

    Scenarios_wo_Actual_and_FCST = RemoveMembersFromArray(Scenarios_wo_Actual, Array("FORECAST"))
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N143b",N143_WriteToFile,dimSce,Scenarios_wo_Actual_and_FCST,dimC1,"NMAP","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC145 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C3ADJ_ENT_CLOSE_ACTUAL) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N144a",N144_WriteToFile,dimEnt,dimSce,dimC3,C3ADJ_ENT_CLOSE_ACTUAL,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC146 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C3ADJ_SCENARIOCLOSE) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N144b",N144_WriteToFile,dimSce,dimC3,C3ADJ_SCENARIOCLOSE,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC147 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C3ADJ_Acc_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N146",N146_WriteToFile,dimAcc,dimC3,dimSce,C3ADJ_Acc_Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC147 - OK - Time(s) = "&NO_SectionTime)

    Note40accs = HS.account.list("NOTE40","[Base]")
    If IsEmpty(IFRS_LOCALGAAP_Ent_Close) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N148",N148_WriteToFile,dimEnt,IFRS_LOCALGAAP_Ent_Close,dimAcc,Note40accs,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC176a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(STRATEGY_Ent_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N151",N151_WriteToFile,dimEnt,dimSce,STRATEGY_Ent_Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC152 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(StrategyC3Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N152",N152_WriteToFile,dimC3,dimSce,StrategyC3Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC153 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(StrategyAccClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N153a",N153_WriteToFile,dimAcc,dimSce,StrategyAccClose,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC154 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(StrategyAccC1Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N153c",N153_WriteToFile,dimAcc,dimSce,dimC1,StrategyAccC1Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC156 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseC2InSTR) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N155",N155_WriteToFile,dimC2,dimSce,DimAcc,CloseC2InSTR,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC158 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseRM21_ICP_InStrategy) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N156",N156_WriteToFile,dimAcc,dimSce,dimICP,CloseRM21_ICP_InStrategy,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC159 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseStrategyMonths) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N157",N157_WriteToFile,dimSce,dimPeriod,CloseStrategyMonths,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC160 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CloseStrategyMonths) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N158",N158_WriteToFile,dimSce,dimAcc,dimC1,InvAccSpecialCloseDueToStrategyInput,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC161 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CommonProductsToCloseInAct) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N160",N160_WriteToFile,dimSce,dimC1,dimAcc,CommonProductsToCloseInAct,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC164 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(EQ_OPE_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N162",N162_WriteToFile,dimAcc,dimC2,EQ_OPE_Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC166 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(EQ_OPE_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N163",N163_WriteToFile,dimEnt,dimAcc,dimC1,CloseSTR_PC99_FromInvAccs,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC167 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(GHQ_ONE_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N164",N162_WriteToFile,dimAcc,dimC1,GHQ_ONE_Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC168 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N165_CloseTaxNotesAccountsFromOtherThanGLEnts) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N165a",N165_WriteToFile,dimAcc,dimEnt,dimYear,DimSce,N165_CloseTaxNotesAccountsFromOtherThanGLEnts,"","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC169a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N166_SAP_LOAD_ADJ_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N166a",N166_WriteToFile,dimEnt,dimAcc,dimC3,dimSce,N166_SAP_LOAD_ADJ_Close,"","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC166a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N166_SAP_LOAD_LOAD_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N166b",N166_WriteToFile,dimEnt,dimAcc,dimC3,dimYear,dimSce,N166_SAP_LOAD_LOAD_Close,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC166b - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N167",N167_WriteToFile,dimSce,StrategyScenarios,dimAcc,Array("MOBE"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N167 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N19AccC2Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N168",N168_WriteToFile,dimAcc,dimC2,N19AccC2Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC172 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N169_N28_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N169",N169_WriteToFile,dimEnt,dimAcc,N169_N28_Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC173 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N170_A272IClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N170",N170_WriteToFile,dimSce,dimEnt,DimAcc,DimC1,N170_A272IClose,"","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC174 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N171_CloseAccountsOtherThanGLEnts) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N171a",N171_WriteToFile,dimAcc,dimEnt,DimSce,N171_CloseAccountsOtherThanGLEnts,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC175a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(SER01_MG_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N172",N172_WriteToFile,dimEnt,dimAcc,DimC1,SER01_MG_Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC176 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(aAccountsToCloseHeadCountProducts) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N173",N173_WriteToFile,dimAcc,aAccountsToCloseHeadCountProducts,dimC1,aHeadCountProductsClosedFromOtherAccounts,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC173 - OK - Time(s) = "&NO_SectionTime)

    AccRecAccounts2Close = HS.Account.List("AR20", "[Base]")
    If IsEmpty(AccRecAccounts2Close) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N174a",N174_WriteToFile,dimAcc,AccRecAccounts2Close,dimEnt,MacGregorActiveEntityList,dimC1,Array("[None]"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC174a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(aNotEstimatedAccounts) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N176a",N176_WriteToFile,dimSce,EstimateScenarioslist,dimAcc,aNotEstimatedAccounts,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC176a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(aNotEstimatedAccounts4MacGregor) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N176c",N176_WriteToFile,dimSce,EstimateScenarioslist,dimEnt,MacGregorActiveEntityList,dimAcc,aNotEstimatedAccounts4MacGregor,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC176c - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N177",N177_WriteToFile,dimSce,"Actual",dimAcc,"RM01E",dimC2,"NO_COUNTRY",dimC3,"Inp","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC177 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(SSSC1Members2Close) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N181",N181_WriteToFile,dimAcc,SSSAccounts2Close,dimC1,SSSC1Members2Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC181 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(CapexC1NoneCloseAcc) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N182",N182_WriteToFile,dimAcc,CapexC1NoneCloseAcc,dimC1,Array("[None]"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC182 - OK - Time(s) = "&NO_SectionTime)

    aYearEndAccounts = Array("MTOTOBCY", "STOTOBCY", "GPOBTECY", "GPOBTECYSSS")
    If IsEmpty(aYearEndAccounts) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N183",N183_WriteToFile,dimAcc,aYearEndAccounts,dimPeriod,Array("DEC"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC183 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(StrategyBusinessEntities) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N185",N185_WriteToFile,dimEnt,StrategyBusinessEntities,dimC1,Array("PC99"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC185 - OK - Time(s) = "&NO_SectionTime)

    YearActiveColumnClose = RemoveMembersFromArray(YearNoInputYearsList, YearFutureYearsList)
    If IsEmpty(YearActiveColumnClose) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N186",N186_WriteToFile,dimAcc,Array("Active_column"),dimYear,YearActiveColumnClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC186 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NonGLICPCloseList) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N190a",N190_WriteToFile,dimAcc,GLICPAccountList,dimICP,NonGLICPCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC190 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NonGLEntityCloseList) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N190b",N190_WriteToFile,dimAcc,GLAccountList,dimEnt,NonGLEntityCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC190b - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NonGLEntityCloseList) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N190c",N190_WriteToFile,dimAcc,Array("R872I"),dimEnt,NonCAROEntityCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC190c - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NonGLEntityCloseList) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N190d",N190_WriteToFile,dimAcc,Array("L165"),dimEnt,NonGLEntityCloseList,dimC2,Array("RET_DPI"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC190d - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N191",N191_WriteToFile,dimSce,ActualScenarios,dimAcc,Array("MORE"),dimC2,"NO_COUNTRY","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC191 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N195_Note20_C2Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N195",N195_WriteToFile,dimAcc,dimC2,N195_Note20_C2Close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC195 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(aEquityAdj2Close) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N196",N196_WriteToFile,dimEnt,aEquityEntity2Close,dimC2,aEquityAdj2Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC196 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(aEntities2CloseFromRM54) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N197",N197_WriteToFile,dimEnt,aEntities2CloseFromRM54,dimAcc,Array("RM54"),dimC1,Array("COMO"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC197 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N13_CloseAccList) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N198",N198_WriteToFile,dimAcc,Array("N1325","N1326"),"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC198 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N199a",N199a_WriteToFile,dimC1,Array("PRD01"),dimEnt,CloseEntityListPRD01,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC199 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N199b",N199b_WriteToFile,dimC1,Array("PRD02"),dimEnt,CloseEntityListPRD02,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC199 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N199c",N199c_WriteToFile,dimC1,Array("PRD03"),dimEnt,CloseEntityListPRD03,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC199 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N200",N200_WriteToFile,dimC2,Array("D_DEPRE"),dimAcc,Array("N0510", "N0601"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC200 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N201_SuperGL_Close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N201a",N201_WriteToFile,dimEnt,dimAcc,DimSce,N201_SuperGL_Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC201a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NONGCPLoadAccountsList) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N207",N207_WriteToFile,dimSce,Array("FORECAST", "BUDGET"),dimAcc,NONGCPLoadAccountsList,dimC3,Array("LOAD","ADJ"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC207 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(NONGCPLoadEntities) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N208",N208_WriteToFile,dimSce,Array("FORECAST"),dimEnt,NONGCPLoadEntities,dimC3,Array("LOAD","ADJ"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC208 - OK - Time(s) = "&NO_SectionTime)

    AccList_N209 = HS.Account.List("N15088","[Base]")
    If IsEmpty(AccList_N209) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N209",N209_WriteToFile,dimAcc,AccList_N209,DimC2,"PROV_HIST","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC209 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(AccList_N210) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N210",N210_WriteToFile,dimAcc,AccList_N210,DimEnt,EntCloseList_N210,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC210 - OK - Time(s) = "&NO_SectionTime)

    N211_Accs = Array("N04111","N04112")
    If IsEmpty(N211_Accs) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N211",N211_WriteToFile,dimAcc,N211_Accs,DimC2,Array("CNA60"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC211 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N212_CloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N212",N212_WriteToFile,dimAcc,dimC1,N212_CloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC212 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N213_Yearlist) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N213",N213_WriteToFile,dimYear,YearFutureYearsList,DimAcc,Array("N0401", "N0410"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC213 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N214_AccClose) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N214",N214_WriteToFile,dimYear,YearActReportingYearClose,DimAcc,N214_AccClose,DimEnt,N214_EntClose,DimC2,N214_C2Close,"","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC214 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(EntCloseList_N215) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N215",N215_WriteToFile,dimC2,Array("PROV_RESTAT"),DimEnt,EntCloseList_N215,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC215 - OK - Time(s) = "&NO_SectionTime)

    N0432_Prods= Array("SER07_MG","SER06_MG")
    If IsEmpty(N0432_Prods) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N216",N216_WriteToFile,dimAcc,Array("N0432"),DimC1,N0432_Prods,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC216 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",False,"","N217",N217_WriteToFile,dimAcc,Array("A355E"),DimC1,array("[None]"),DimSce,Array("FORECAST","BUDGET"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC217 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C2Members2CloseFromACQDIS) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N218",N218_WriteToFile,dimC2,C2Members2CloseFromACQDIS,DimC3,C3Members2CloseFromACQDIS,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC218 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(C2MembersInACQDIS) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N218b",N218_WriteToFile,dimC2,C2MembersInACQDIS,DimC3,Array("INP","ADJ"),dimYear,RemoveMembersFromArray(YearFutureYearsList, Array("2018")),DimC4,"[None]","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC218b - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N220_AccClose) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N220",N220_WriteToFile,DimAcc,N220_AccClose,DimC3,N220_C3Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC220 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N223_CloseList) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N223",N223_WriteToFile,dimAcc,dimC3,N223_CloseList,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC212 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ClosedC3Members) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N225",N225_WriteToFile,dimYear,dimC3,ClosedC3Members,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC225 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N226",N226_WriteToFile,DimC1,Array("NMAP"),DimC3,Array("INP", "ADJ"),DimSce,Array("FORECAST"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC226 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N226b",N226_WriteToFile,DimC1,Array("NMAP"),DimEnt,NONGCPLoadEntities,DimSce,Array("FORECAST"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC226b - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N227",N227_WriteToFile,DimC1,N227_C1Close,DimC2,N227_C2Close,DimAcc,N227_AccClose,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC227 - OK - Time(s) = "&NO_SectionTime)

    EntListPriceCopy = Filter(ActiveEntitiesList,"COPY_SCENARIOS",false)
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N228a",N228_WriteToFile,DimEnt,EntListPriceCopy,DimAcc,Array("CopyForecastPricesAndAllocationsFromPrevQ"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC228a - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N228b",N228_WriteToFile,DimPeriod,Array("Jan","Feb","Apr","May","Jul","Aug","Oct","Nov"),DimAcc,Array("CopyForecastPricesAndAllocationsFromPrevQ"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC228a - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N230",N230_WriteToFile,DimAcc,array("A355E"),DimC1,Array("[None]"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC230 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N231",N231_WriteToFile,DimC1,Array("[None]"),DimC2,Array("RET_SBP"),DimAcc,Array("L165"),dimYear,YearActReportingYearClose,"","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC231 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N232",N232_WriteToFile,DimSce,aScenarioHierarchies,"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC232 - OK - Time(s) = "&NO_SectionTime)

    Note19AccsList1 = Filter(HS.Account.List("NOTE19","[Base]"),"N19_L225",false)
    Note19AccsList1 = Filter(Note19AccsList1,"N19_L326",false)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N234a",N234_WriteToFile,DimAcc,Note19AccsList1,DimC2,Array("LR32","LR37"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC234 - OK - Time(s) = "&NO_SectionTime)

    Note19_EntList = Filter(ActiveEntitiesList,"MNLD",false)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N234b",N234_WriteToFile,DimEnt,Note19_EntList,DimC2,"LR45","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC235 - OK - Time(s) = "&NO_SectionTime)

    N237_accOpen = Array("RM21","RM23","RM32", "RM51", "RM55", "RM56", "RM58", "RM60", "RM69", "L345E", "L345I", "L355E", "L355I", "A355E", "Active_column", "CL184", "A305E","RM91","RM92","RM31","RM35","A305I","A355I")

    N237_accOpen = CombineLists(N237_accOpen,Hs.Account.List("NOTE39","[Base]"))
    N237_AccList = RemoveMembersFromArray(ActiveAccountsList, N237_accOpen)
    N237_AccList = RemoveMembersFromArray(N237_AccList, Hs.Account.List("VALIDATION","[Base]"))

    N237_C1List = Hs.Custom1.List("TOTCOP","[Base]")

     N237b_C1List = RemoveMembersFromArray(N237_C1List, Array("COMOCOP"))

     N237e_C1List = RemoveMembersFromArray(N237_C1List, Array("COMOCOP"))

    N237_accClose_LHS00COP = RemoveMembersFromArray(ActiveAccountsList, N237_accOpen)

    N237_accClose_LHS00COP = RemoveMembersFromArray(N237_accClose_LHS00COP, array("RM53","A325","L335E"))

    N237_accClose_LHS00COP = CombineLists(N237_accClose_LHS00COP,Array("RM21","RM23","L355I","RM69"))

    N237f_AccList = RemoveMembersFromArray(N237_AccList, Array("RM53"))
    N237f_AccList = CombineLists(N237f_AccList,Array("RM69", "RM57", "RM21", "RM23", "L345I"))

    Counter = 0
    ReDim N237_TempList(UBound(N237_AccList))
    For Each Acc In N237_AccList
        sC1Top = HS.Account.C1Top(Acc)
        If sC1Top = "" Then sC1Top = "[None]"
        If sC1Top = "[None]" Or sC1Top = "None_NMAP" Then
            N237_TempList(Counter) = Acc
            Counter = Counter + 1
        End If
    Next
    ReDim Preserve N237_TempList(Counter)
    N237_AccList = RemoveMembersFromArray(N237_AccList, N237_TempList)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N237",N237_WriteToFile,DimAcc,N237_AccList,DimC1,N237_C1List,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC237 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N237b",N237b_WriteToFile,DimAcc,Array("RM21","RM23","L345I", "L355E", "L355I", "A355E","RM31","RM35","A305I","A355I"),DimC1,N237b_C1List,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC237b - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N237e",N237e_WriteToFile,DimAcc,Array("L345E"),DimC1,N237e_C1List,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC237e - OK - Time(s) = "&NO_SectionTime)

    N238_AccList = Array("OC66","DC66")

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N238",N238_WriteToFile,DimAcc,N238_AccList,DimYear,YearActReportingYearClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC238 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N13C_NoInoput_List) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N240a",N240_WriteToFile,dimAcc,dimC2,N13C_NoInoput_List,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC233 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N240b",N240_WriteToFile,DimEnt,AllEntsExceptTobesold,DimC2,Array("PS90"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC232 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N240c",N240_WriteToFile,DimC2,Array("PS10","PS24","PS21","PS23","PS25"),"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC232 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N241_Note19_close) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N241",N241_WriteToFile,dimAcc,dimC2,N241_Note19_close,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC233 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N242",N242_WriteToFile,DimAcc,Array("RM23","RM31","RM32"),dimC2,Array("[None]"),dimSce,HS.Scenario.List("STRATEGY","[Base]"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N242 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N245",N245_WriteToFile,DimAcc,aACQCalcAccounts,"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC245 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N246",N246_WriteToFile,DimEnt,NonTTSentities,DimC3,Array("PPAadj"),DimYear,YearFutureYearsList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC246 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N247",N247_WriteToFile,DimC3,Array("ACQ_DISP_ACQ"),"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC247 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N248",N248_WriteToFile,DimC2,aAllPostACQ_CTA_Calc_C2,dimYear,YearActReportingYearClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC248 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N250",N250_WriteToFile,DimEnt,Array("GW_MCG"),dimC4,Array("[None]"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC250 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N253",N252_WriteToFile,DimAcc,Array("L165"),DimC2,HS.Custom2.List("ACQ","[Base]"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC253 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N249_ProvisionClose) = False Then NoInputList = CreateNoInputs("CLOSEMULTIDIMLIST",False,"","N255",N255_WriteToFile,dimAcc,dimC2,N249_ProvisionClose,"","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC225 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N256",N256_WriteToFile,DimAcc,HS.Account.List("N0450","[Base]"),DimC1,Array("PC99","[NOne]"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N254a - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N262",N262_WriteToFile,DimAcc,HS.Account.List("N14_A500", "[Base]"),DimC2,Array("RC37"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N262 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N263a",N263_WriteToFile,DimAcc,aN263_Eco_Accounts,DimEnt,aN263_Not_Valid_entities,dimSce,aN263_ECOSCEN,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N263a - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N263b",N263_WriteToFile,DimAcc,aN263_Other_Than_Eco_Accounts,DimEnt,aN263_Valid_entities,DimSce,Array("Actual"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N263b - OK - Time(s) = "&NO_SectionTime)

    C2ToCloseList = RemoveMembersFromArray(HS.Custom2.List("D","[Base]"), Array("D_IMPT", "D_ADJ"))
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N264",N264_WriteToFile,DimAcc,Array("N0605","N0606","N0506"),DimC2,C2ToCloseList,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N264 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(N265_EntClose) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N265",N265_WriteToFile,DimEnt,N265_EntClose,DimC3,N265_C3Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC265 - OK - Time(s) = "&NO_SectionTime)

    DummyICPEntities = Array("ICP_MACGREGOR")
    ICPEntities = RemoveMembersFromArray(ActiveICPsList, DummyICPEntities)

    iCounter = 0
    ReDim ICPAccounts(Ubound(ActiveAccountsList))
    For Each sAcc In ActiveAccountsList
        If HS.Account.IsCalculated(sAcc) = FALSE And HS.Account.IsICP(sAcc) = TRUE Then
            If HS.Account.IsBase("VOLUMES", sAcc) = FALSE Then
                ICPAccounts(iCounter) = sAcc
                iCounter = iCounter + 1
            End If
        End If
    Next
    ReDim Preserve ICPAccounts(iCounter-1)

    iCounter = 0
    ReDim VolumeICPAccs(UBound(ActiveAccountsList))
    For Each sAcc In HS.Account.List("VOLUMES", "[Base]")
        If HS.Account.IsCalculated(sAcc) = FALSE And HS.Account.IsICP(sAcc) = TRUE Then
            VolumeICPAccs(iCounter) = sAcc
            iCounter = iCounter + 1
        End If
    Next
    ReDim Preserve VolumeICPAccs(iCounter-1)

    aCloseICPAccounts = RemoveMembersFromArray(ICPAccounts, VolumeICPAccs)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N268a",N268a_WriteToFile,DimEnt,DummyICPEntities,"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N268a - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(ICPAccounts) = False Then NoInputList = CreateNoInputs("CLOSELISTS",True,"","N268b",N268b_WriteToFile,DimICP,DummyICPEntities,DimAcc,aCloseICPAccounts,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N268b - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(VolumeICPAccs) = False Then NoInputList = CreateNoInputs("CLOSELISTS",True,"","N268c",N268c_WriteToFile,DimICP,ICPEntities,DimAcc,VolumeICPAccs,DimYear,YearFutureYearsList,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N268c - OK - Time(s) = "&NO_SectionTime)

    AccList = array("R862","R850")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N269",N269_WriteToFile,DimAcc,AccList,DimYear,YearActReportingYearClose,DimICP,array("[ICP None]"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N269 - OK - Time(s) = "&NO_SectionTime)

    PPAaccOpen = Array("RM32", "RM36", "RM51", "RM53", "RM55", "RM57", "RM58", "RM69", "A115", "A122", "A125", "A216", "A217", "A218", "A219", "CL184", "Active_column")
    PPAAccList = RemoveMembersFromArray(ActiveAccountsList, PPAaccOpen)
    PPAAccList = RemoveMembersFromArray(PPAAccList, Hs.Account.List("VALIDATION","[Base]"))

    PPAAccList = RemoveMembersFromArray(PPAAccList, Hs.Account.List("ACQ_ACCOUNTS","[Base]"))

    PPAC1List = Hs.Custom1.List("PPATOTAL","[Base]")

    Counter = 0
    ReDim PPATempList(UBound(PPAAccList))
    For Each sAcc In PPAAccList
        sC1Top = HS.Account.C1Top(sAcc)
        If sC1Top = "" Then sC1Top = "[None]"
        If sC1Top = "[None]" Or sC1Top = "None_NMAP" Then
            PPATempList(Counter) = sAcc
            Counter = Counter + 1
        End If
    Next
    ReDim Preserve PPATempList(Counter)
    PPAAccList = RemoveMembersFromArray(PPAAccList, PPATempList)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N271",N271_WriteToFile,DimAcc,PPAAccList,DimC1,PPAC1List,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N271 - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N272",N272_WriteToFile,DimAcc,Array("N0107"),"","","","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N272 - OK - Time(s) = "&NO_SectionTime)

    N275EntClose = RemoveMembersFromArray(ActiveEntitiesList, Array("MSEO"))
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N275",N275_WriteToFile,DimAcc,Array("L167"),DimEnt,N275EntClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N275 - OK - Time(s) = "&NO_SectionTime)

    N275bEntClose = RemoveMembersFromArray(ActiveEntitiesList, Array("MSEO"))
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N275b",N275_WriteToFile,DimC2,Array("RET_TRS"),DimEnt,N275bEntClose,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N275b - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N279a",N279_WriteToFile,DimYear,Array(sYearCurrentActualReportingYear),DimAcc,aN279Acc,DimEnt,aN279EntTax1,DimC2,aN279C2Tax1,DimSce,"ACTUAL","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N279a - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N279b",N279_WriteToFile,DimYear,Array(sYearCurrentActualReportingYear),DimAcc,aN279Acc,DimEnt,aN279EntTax2,DimC2,aN279C2Tax2,DimSce,"ACTUAL","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N279b - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N279c",N279_WriteToFile,DimYear,Array(sYearCurrentActualReportingYear),DimAcc,aN279Acc_NT1_80,DimEnt,aN279EntTax1,DimC2,aN279C2Tax1_NT1_80,DimSce,"ACTUAL","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N279c - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N279d",N279_WriteToFile,DimYear,Array(sYearCurrentActualReportingYear),DimAcc,aN279Acc_NT1_80,DimEnt,aN279EntTax2,DimC2,aN279C2Tax2_NT1_80,DimSce,"ACTUAL","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N279d - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N280a",N280_WriteToFile,DimYear,Array("2039"),DimC2,Array("TAX_CB"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N280a - OK - Time(s) = "&NO_SectionTime)

    aN280bC2 = Array("ND_PREV","TAX_PREV","VA_PREV","ND_CB","TAX_CB","VA_CB","DT_OFFSET")
    aN280bAcc = Array("NT1_820","NT1_830","NT1_420","NT1_440","NT1_450","NT1_510")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N280b",N280_WriteToFile,DimAcc,aN280bAcc,DimC2,aN280bC2,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N280b - OK - Time(s) = "&NO_SectionTime)

    aN280cC2 = Array("TAX_PREV","TAX_CB")
    aN280cAcc = Array("NT1_81","NT1_82")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N280c",N280_WriteToFile,DimAcc,aN280cAcc,DimC2,aN280cC2,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N280c - OK - Time(s) = "&NO_SectionTime)

    aN280gC2 = Array("ND_PREV","ND_CB")

    aN280gAcc = Array("NT1_81","NT1_82","NT1_97","NT1_98","NT1_99")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N280g",N280_WriteToFile,DimAcc,aN280gAcc,DimC2,aN280gC2,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N280g - OK - Time(s) = "&NO_SectionTime)

    aN280dEnt = RemoveMembersFromArray(ActiveEntitiesList,Array("FLAG_ENTITY"))
    aN280dAcc = Array("TAX_CALC_STOP")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N280d",N280_WriteToFile,DimAcc,aN280dAcc,DimEnt,aN280dEnt,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N280d - OK - Time(s) = "&NO_SectionTime)

    aN280fEnt = ActiveEntitiesList

    aN280fAcc = Array("NT1_440")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N280f",N280_WriteToFile,DimAcc,aN280fAcc,DimEnt,aN280fEnt,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N280f - OK - Time(s) = "&NO_SectionTime)

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N281",N281_WriteToFile,DimAcc,Array("NT4_50", "NT4_60"),DimC2,Array("TaxAG40"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N281 - OK - Time(s) = "&NO_SectionTime)

    N285_scenarioCloseList = array("ACTUAL","BUDGET","BUDGET_FORECAST","FORECAST")
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N285",N285_WriteToFile,DimSce,N285_scenarioCloseList,DimAcc,hs.account.list("RM66","[Base]"),DimC2,Hs.Custom2.List("KALMAR_STR_REGIONS","[Base]"),"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N285 - OK - Time(s) = "&NO_SectionTime)

    aN287entities = RemoveMembersFromArray(ActiveEntitiesList,ARRAY("CARGO_RE"))
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N287",N287_WriteToFile,DimSce,EstimateScenarioslist,DimAcc,hs.account.list("IS_Non_Operative","[Base]"),DimEnt,aN287entities,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N287 - OK - Time(s) = "&NO_SectionTime)

    PC98_Keep_Open = array("A305I","A355E","A355I","A375I","L173","L175","L245","L247","L255E","L345E","L345I","L355E","L355I","L375I","L425","RM51","RM53","RM54","RM55","RM56","RM57","RM58","RM60","RM63","RM68","RM69")
    PC98_Close = RemoveMembersFromArray(ActiveAccountsList,PC98_Keep_Open)

    PC98_Close = RemoveMembersFromArray(PC98_Close,Array("RM91","RM92"))
    PC98_Close = RemoveMembersFromArray(PC98_Close,Hs.Account.List("HEADCOUNT","[Base]"))

    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N291a",N291_WriteToFile,DimC1,"PC98",DimAcc,PC98_Close,"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N291 - OK - Time(s) = "&NO_SectionTime)

    PC98_RM54_EntsToClose = ActiveEntitiesList
    NoInputList = CreateNoInputs("CLOSELISTS",True,"","N291b",N291_WriteToFile,DimC1,"PC98",DimAcc,Array("RM54"),DimEnt,PC98_RM54_EntsToClose,"","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section N291 - OK - Time(s) = "&NO_SectionTime)

    Close_Accs = Array("N04111","N04112")
    If IsEmpty(Close_Accs) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N296a",N296_WriteToFile,dimAcc,Close_Accs,DimC2,Array("CNA50"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC298 - OK - Time(s) = "&NO_SectionTime)

    Close_Accs = Array("N04121","N04122","N04123")
    If IsEmpty(Close_Accs) = False Then NoInputList = CreateNoInputs("CLOSELISTS",False,"","N296b",N296_WriteToFile,dimAcc,Close_Accs,DimC2,Array("CNL50"),"","","","","","","","")
    If IsEmpty(NoInputList) = False Then WriteToFileList = CombineList(WriteToFileList,NoInputList,FirstWriteToFileSection) : FirstWriteToFileSection = False
    If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC299 - OK - Time(s) = "&NO_SectionTime)

        b = 0
        For each AccToClose in ActiveAccountsList

            If IsArray(AccCloseList) = True Then AccCloseList = Empty
            If IsArray(AccOpenList) = True Then AccOpenList = Empty
            If IsArray(CloseListForAcc) = True Then CloseListForAcc = Empty

            FULL_AccUD = GetUD(AccToClose, "Account", "")
            AccPOV = "A#"&AccToClose&"."

            general_close = GetParamFromTxt("Close", FULL_AccUD)
            actual_close = GetParamFromTxt("CloseA", FULL_AccUD)
            estimate_close = GetParamFromTxt("CloseE", FULL_AccUD)

            general_open = GetParamFromTxt("Open", FULL_AccUD)
            actual_open = GetParamFromTxt("OpenA", FULL_AccUD)
            estimate_open = GetParamFromTxt("OpenE", FULL_AccUD)

            If general_close <> "" or  actual_close <> "" or estimate_close <> "" then

                Redim CloseList(1,10)
                j = 0

                If general_close <> "" Then CloseList(0,j) = ""    :    CloseList(1,j) = general_close     : j = j + 1
                If actual_close <> "" Then CloseList(0,j) = "S#ACTUAL."    :    CloseList(1,j) = actual_close    : j = j + 1
                If estimate_close <> "" Then CloseList(0,j) = "S#FORECAST."    :    CloseList(1,j) = estimate_close    :  j = j + 1 : CloseList(0,j) = "S#BUDGET."    :    CloseList(1,j) = estimate_close :  j = j + 1
                Redim Preserve CloseList(1,j-1)

                Redim AccCloseList(10000)
                Counter = 0

                For i = 0 to Ubound(CloseList,2)

                    scenarioPOV = CloseList(0,i)
                    UDList = CloseList(1,i)

                    ListOfAttributes = Split(UDList,",")

                    For each DimMbrToClose in ListOfAttributes

                        dimPrefix = Mid(DimMbrToClose,1,3)
                        DimShortName = Mid(dimPrefix,1,Instr(dimPrefix,"#")-1)

                        If Mid(DimMbrToClose,4,1) = "(" Then

                            dimStr = Mid(DimMbrToClose,5,len(DimMbrToClose)-5)
                            ListMembers = Split(dimStr,"|")

                            For each listMbr in ListMembers

                                DimMbrInLoop = Mid(listMbr,Instr(listMbr,"#")+1,len(listMbr)-Instr(listMbr,"#"))

                                Call CheckIfBase(DimShortName,DimMbrInLoop,ParentBaselist,bIsBase)

                                If bIsBase = True Then
                                    AccCloseList(Counter) = AccPOV & scenarioPOV & dimPrefix & listMbr
                                    Counter = Counter + 1
                                Else
                                    For each BaseMbr in ParentBaselist
                                        AccCloseList(Counter) = AccPOV & scenarioPOV & dimPrefix & BaseMbr
                                        Counter = Counter + 1
                                    Next
                                End if

                            Next
                        Else

                            DimMbrInLoop = Mid(DimMbrToClose,Instr(DimMbrToClose,"#")+1,len(DimMbrToClose)-Instr(DimMbrToClose,"#"))

                            Call CheckIfBase(DimShortName,DimMbrInLoop,ParentBaselist,bIsBase)

                            If bIsBase = True Then
                                AccCloseList(Counter) = AccPOV & scenarioPOV & dimPrefix & DimMbrInLoop
                                Counter = Counter + 1
                            Else
                                For each BaseMbr in ParentBaselist
                                    AccCloseList(Counter) = AccPOV & scenarioPOV & dimPrefix & BaseMbr
                                    Counter = Counter + 1
                                Next
                            End if

                        End If
                    Next
                Next

                Redim Preserve AccCloseList(counter-1)

            ElseIf general_open <> "" or  actual_open <> "" or estimate_open <> "" then

                Redim OpenList(1,10)
                x = 0

                If general_open <> "" Then OpenList(0,x) = ""    :    OpenList(1,x) = general_open    : x = x + 1
                If actual_open <> "" Then OpenList(0,x) = "S#ACTUAL."    :    OpenList(1,x) = actual_open    : x = x + 1
                If estimate_open <> "" Then OpenList(0,x) = "S#FORECAST."    :    OpenList(1,x) = estimate_open    :  x = x + 1 : OpenList(0,x) = "S#BUDGET."    :    OpenList(1,x) = estimate_open :  x = x + 1
                Redim Preserve OpenList(1,x-1)

                Redim AccOpenList(10000)
                Counter2 = 0    :     Counter3 = 0

                For g = 0 to Ubound(OpenList,2)

                    scenarioPOV = OpenList(0,g)
                    UDList = OpenList(1,g)

                    ListOfAttributes = Split(UDList,",")

                    For each DimMbrToClose in ListOfAttributes

                        dimPrefix = Mid(DimMbrToClose,1,3)
                        DimShortName = Mid(dimPrefix,1,Instr(dimPrefix,"#")-1)

                        If Mid(DimMbrToClose,4,1) = "(" Then

                            dimStr = Mid(DimMbrToClose,5,len(DimMbrToClose)-5)
                            ListMembers = Split(dimStr,"|")

                            For each listMbr in ListMembers

                                DimMbrInLoop = Mid(listMbr,Instr(listMbr,"#")+1,len(listMbr)-Instr(listMbr,"#"))

                                Call CheckIfBase(DimShortName,DimMbrInLoop,ParentBaselist,bIsBase)

                                If Counter2 = 0 Then
                                    CombinedOpenList = ParentBaselist
                                    Counter2 = Counter2 + 1
                                Else
                                    CombinedOpenList =  CombineLists(CombinedOpenList, ParentBaselist)
                                    Counter2 = Counter2 + 1
                                End If

                            Next

                        Else

                            DimMbrInLoop = Mid(DimMbrToClose,Instr(DimMbrToClose,"#")+1,len(DimMbrToClose)-Instr(DimMbrToClose,"#"))

                            Call CheckIfBase(DimShortName,DimMbrInLoop,ParentBaselist,bIsBase)

                            If Counter2 = 0 Then
                                CombinedOpenList = ParentBaselist
                                Counter2 = Counter2 + 1
                            Else
                                CombinedOpenList =  CombineLists(CombinedOpenList, ParentBaselist)
                                Counter2 = Counter2 + 1
                            End If

                        End If

                        AccTopBaseMembers = GetAccountDimTopMemberBaseList(AccToClose,DimShortName)
                        For each h in AccTopBaseMembers
                            If IsItemInList(h,CombinedOpenList) = False Then
                                AccOpenList(Counter3) = AccPOV & scenarioPOV & dimPrefix & h
                                Counter3 = Counter3 + 1
                            End If
                        Next

                    Next

                Next

                Redim Preserve AccOpenList(counter3-1)

            End If

            ListCreated = False
            If IsEmpty(AccCloseList) = False and IsEmpty(AccOpenList) = False Then
                CloseListForAcc =  CombineLists(AccCloseList, AccOpenList)
                ListCreated = True
            ElseIf IsEmpty(AccCloseList) = False Then
                CloseListForAcc = AccCloseList
                ListCreated = True
            ElseIf IsEmpty(AccOpenList) = False Then
                CloseListForAcc = AccOpenList
                ListCreated = True
            End If

            If ListCreated = True Then
                If b = 0 Then
                    AllAccountsCloseList = CloseListForAcc
                Else
                    AllAccountsCloseList = CombineLists(AllAccountsCloseList, CloseListForAcc)
                End If
                b = b + 1
            End If

        Next

        If IsEmpty(AllAccountsCloseList) = False Then

            For each NoInputLine in AllAccountsCloseList
                HS.NoInput NoInputLine
            Next

            If N901_WriteToFile = True or bWriteNoInputToFile = True Then
                e = 0
                LinesToClose = Ubound(AllAccountsCloseList)
                Redim AllAccountsCloseListForLogging(7,LinesToClose)
                For each s in AllAccountsCloseList

                    AllAccountsCloseListForLogging(0,e) = "N901."
                    AllAccountsCloseListForLogging(1,e) = s
                    e = e + 1

                Next

                If IsEmpty(AllAccountsCloseListForLogging) = False Then WriteToFileList = CombineList(WriteToFileList,AllAccountsCloseListForLogging,FirstWriteToFileSection) : FirstWriteToFileSection = False
            End If

        End If
        If CHECK_NOINPUT_SECTIONS = True Then NO_SectionTime = Timer() - NO_Timer    :    NO_Timer = Timer()    :    Call WriteToFile("NoInput Section NC901 - OK - Time(s) = "&NO_SectionTime)

    If IsEmpty(WriteToFileList) = False Then

            Call WriteListToFile(WriteToFileList,startTimer)

    End If

End Sub

Function CreateNoInputs(ListType,IncNMAP,ClosePeriods,SectionName,SectionWTF,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12)

    If IsArray(d1) = False Then
        If d1 = "" Then
            LastAttribute = 0
            NoInputList = ""
        End if
    ElseIf Ubound(d1) < 0 Then
        LastAttribute = 0
        NoInputList = ""
    End If

    If LastAttribute = "" Then
        If IsArray(d2) = False Then
            If d2 = "" Then
                LastAttribute = 1
                NoInputList = d1
            End if
        ElseIf Ubound(d2) < 0 Then
            LastAttribute = 1
            NoInputList = d1
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d3) = False Then
            If d3 = "" Then
                LastAttribute = 2
                NoInputList = d2
            End if
        ElseIf Ubound(d3) < 0 Then
            LastAttribute = 2
            NoInputList = d2
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d4) = False Then
            If d4 = "" Then
                LastAttribute = 3
                NoInputList = d3
            End if
        ElseIf Ubound(d4) < 0 Then
            LastAttribute = 3
            NoInputList = d3
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d5) = False Then
            If d5 = "" Then
                LastAttribute = 4
                NoInputList = d4
            End if
        ElseIf Ubound(d5) < 0 Then
            LastAttribute = 4
            NoInputList = d4
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d6) = False Then
            If d6 = "" Then
                LastAttribute = 5
                NoInputList = d5
            End if
        ElseIf Ubound(d6) < 0 Then
            LastAttribute = 5
            NoInputList = d5
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d7) = False Then
            If d7 = "" Then
                LastAttribute = 6
                NoInputList = d6
            End if
        ElseIf Ubound(d7) < 0 Then
            LastAttribute = 6
            NoInputList = d6
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d8) = False Then
            If d8 = "" Then
                LastAttribute = 7
                NoInputList = d7
            End if
        ElseIf Ubound(d8) < 0 Then
            LastAttribute = 7
            NoInputList = d7
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d9) = False Then
            If d9 = "" Then
                LastAttribute = 8
                NoInputList = d8
            End if
        ElseIf Ubound(d9) < 0 Then
            LastAttribute = 8
            NoInputList = d8
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d10) = False Then
            If d10 = "" Then
                LastAttribute = 9
                NoInputList = d9
            End if
        ElseIf Ubound(d10) < 0 Then
            LastAttribute = 9
            NoInputList = d9
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d11) = False Then
            If d11 = "" Then
                LastAttribute = 10
                NoInputList = d10
            End if
        ElseIf Ubound(d11) < 0 Then
            LastAttribute = 10
            NoInputList = d10
        End If
    End If

    If LastAttribute = "" Then
        If IsArray(d12) = False Then
            If d12 = "" Then
                LastAttribute = 11
                NoInputList = d11
            End if
        ElseIf Ubound(d12) < 0 Then
            LastAttribute = 11
            NoInputList = d11
        End If
    End If

    If LastAttribute = "" Then
            LastAttribute = 12
            NoInputList = d12
    End If

    If Ucase(ListType) = "CLOSELISTS" Then

        If LastAttribute = 0 Then
            Err.raise -1, "ERROR - You have not specified correct parameters for noinput function - "&SectionName&" - you need to have dimension prefix + list for each dimension you are about to close. Now there is no lists specified", ""
        ElseIf LastAttribute Mod 2 <> 0 Then
            Err.raise -1, "ERROR - You have not specified correct parameters for noinput function - "&SectionName&" - There is uneven number of parameters, you need to have dimension prefix + list for each dimension you are about to close", ""
        End If

        If LastAttribute >= 2 Then
            If not IsArray(d2) Then : d2 = Array(d2)
        End If
         If LastAttribute >= 4 Then
            If not IsArray(d4) Then : d4 = Array(d4)
        End If
         If LastAttribute >= 6 Then
            If not IsArray(d6) Then : d6 = Array(d6)
        End If
         If LastAttribute >= 8 Then
            If not IsArray(d8) Then : d8 = Array(d8)
        End If
         If LastAttribute >= 10 Then
            If not IsArray(d10) Then : d10 = Array(d10)
        End If
         If LastAttribute >= 12 Then
            If not IsArray(d12) Then : d12 = Array(d12)
        End If

        counter = 0
        For each list2mbr in d2
            If LastAttribute = 2 Then
                If Instr(d1&list2mbr,"C1#NMAP") = 0 or IncNMAP = True Then
                    Hs.Noinput(d1 & list2mbr)
                    counter = counter + 1
                    If  Err.Number <> 0  Then
                        Call WriteToFile("ERROR: Invalid NoInput: " & SectionName & "." & d1 & list2mbr)
                    End If
                    If bWriteNoInputToFile or SectionWTF Then
                        Redim Preserve WriteToFileSectionList(7,counter-1)
                        WriteToFileSectionList(0,counter-1) = SectionName
                        WriteToFileSectionList(1,counter-1) = "."&d1 & list2mbr
                    End If
                End If
            Else
                For each list4mbr in d4
                    If LastAttribute = 4 Then
                        If Instr(d1&list2mbr&d3&list4mbr,"C1#NMAP") = 0 or IncNMAP = True Then
                            Hs.Noinput(d1&list2mbr&"."&d3&list4mbr)
                            counter = counter + 1
                            If  Err.Number <> 0  Then
                                Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&list2mbr&"."&d3&list4mbr)
                            End If
                            If bWriteNoInputToFile or SectionWTF Then
                                Redim Preserve WriteToFileSectionList(7,counter-1)
                                WriteToFileSectionList(0,counter-1) = SectionName
                                WriteToFileSectionList(1,counter-1) = "."&d1 & list2mbr
                                WriteToFileSectionList(2,counter-1) = "."&d3 & list4mbr
                            End If
                        End If
                    Else
                        For each list6mbr in d6
                            If LastAttribute = 6 Then
                                If Instr(d1&list2mbr&d3&list4mbr&d5&list6mbr,"C1#NMAP") = 0 or IncNMAP = True Then
                                    Hs.Noinput(d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr)
                                    counter = counter + 1
                                    If  Err.Number <> 0  Then
                                        Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr)
                                    End If
                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter-1)
                                        WriteToFileSectionList(0,counter-1) = SectionName
                                        WriteToFileSectionList(1,counter-1) = "."&d1 & list2mbr
                                        WriteToFileSectionList(2,counter-1) = "."&d3 & list4mbr
                                        WriteToFileSectionList(3,counter-1) = "."&d5 & list6mbr
                                    End If
                                End If
                            Else
                                For each list8mbr in d8
                                    If LastAttribute = 8 Then
                                        If Instr(d1&list2mbr&d3&list4mbr&d5&list6mbr&d7&list8mbr,"C1#NMAP") = 0 or IncNMAP = True Then
                                            Hs.Noinput(d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr&"."&d7&list8mbr)
                                            counter = counter + 1
                                            If  Err.Number <> 0  Then
                                                Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr&"."&d7&list8mbr)
                                            End If
                                            If bWriteNoInputToFile or SectionWTF Then
                                                Redim Preserve WriteToFileSectionList(7,counter-1)
                                                WriteToFileSectionList(0,counter-1) = SectionName
                                                WriteToFileSectionList(1,counter-1) = "."&d1 & list2mbr
                                                WriteToFileSectionList(2,counter-1) = "."&d3 & list4mbr
                                                WriteToFileSectionList(3,counter-1) = "."&d5 & list6mbr
                                                WriteToFileSectionList(4,counter-1) = "."&d7 & list8mbr
                                            End If
                                        End If
                                    Else
                                        For each list10mbr in d10
                                            If LastAttribute = 10 Then
                                                If Instr(d1&list2mbr&d3&list4mbr&d5&list6mbr&d7&list8mbr&d9&list10mbr,"C1#NMAP") = 0 or IncNMAP = True Then
                                                    Hs.Noinput(d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr&"."&d7&list8mbr&"."&d9&list10mbr)
                                                    counter = counter + 1
                                                    If  Err.Number <> 0  Then
                                                        Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr&"."&d7&list8mbr&"."&d9&list10mbr)
                                                    End If
                                                    If bWriteNoInputToFile or SectionWTF Then
                                                        Redim Preserve WriteToFileSectionList(7,counter-1)
                                                        WriteToFileSectionList(0,counter-1) = SectionName
                                                        WriteToFileSectionList(1,counter-1) = "."&d1 & list2mbr
                                                        WriteToFileSectionList(2,counter-1) = "."&d3 & list4mbr
                                                        WriteToFileSectionList(3,counter-1) = "."&d5 & list6mbr
                                                        WriteToFileSectionList(4,counter-1) = "."&d7 & list8mbr
                                                        WriteToFileSectionList(5,counter-1) = "."&d9 & list10mbr
                                                    End If
                                                End If
                                            Else
                                                For each list12mbr in d12
                                                    If LastAttribute = 12 Then
                                                        If Instr(d1&list2mbr&d3&list4mbr&d5&list6mbr&d7&list8mbr&d9&list10mbr&d11&list12mbr,"C1#NMAP") = 0 or IncNMAP = True Then
                                                            Hs.Noinput(d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr&"."&d7&list8mbr&"."&d9&list10mbr&"."&d11&list12mbr)
                                                            counter = counter + 1
                                                            If  Err.Number <> 0  Then
                                                                Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&list2mbr&"."&d3&list4mbr&"."&d5&list6mbr&"."&d7&list8mbr&"."&d9&list10mbr&"."&d11&list12mbr)
                                                            End If
                                                            If bWriteNoInputToFile or SectionWTF Then
                                                                Redim Preserve WriteToFileSectionList(7,counter-1)
                                                                WriteToFileSectionList(0,counter-1) = SectionName
                                                                WriteToFileSectionList(1,counter-1) = "."&d1 & list2mbr
                                                                WriteToFileSectionList(2,counter-1) = "."&d3 & list4mbr
                                                                WriteToFileSectionList(3,counter-1) = "."&d5 & list6mbr
                                                                WriteToFileSectionList(4,counter-1) = "."&d7 & list8mbr
                                                                WriteToFileSectionList(5,counter-1) = "."&d9 & list10mbr
                                                                WriteToFileSectionList(6,counter-1) = "."&d11 & list12mbr
                                                            End If
                                                        End If
                                                    Else

                                                    End If
                                                Next
                                            End If
                                        Next
                                    End If
                                Next
                            End If
                        Next
                    End If
                Next
            End if
        Next

    ElseIf Ucase(ListType) = "CLOSEMULTIDIMLIST" Then

        If LastAttribute < 3 Then
            Err.raise -1, "ERROR - You have not specified correct parameters for noinput function - "&SectionName&" - You need atleast have two dimensions + the multidimensional array specified", ""
        ElseIf LastAttribute > 8 Then
            Err.raise -1, "ERROR - You have not specified correct parameters for noinput function - "&SectionName&" - Function can only handle 7 dimensional array", ""
        End If
        DimsInList = Ubound(NoInputList, 1) + 1
        If LastAttribute <> DimsInList + 1 Then
            Err.raise -1, "ERROR - Dimensions specified in the function parameters, does not match the dimension count in the multidimensional array - "&SectionName&" - Update the MultiDimArray or update the dimension prefixes which are in the function parameters", ""
        End If

        If IsEmpty(NoInputList) = False Then
            j = 0
            For i=0 to Ubound(NoInputList,2)
                If LastAttribute = 3 Then
                    ListColumn1member = NoInputList(0,i)
                    ListColumn2member = NoInputList(1,i)
                    If Instr(d1&ListColumn1member&"."&d2&ListColumn2member,"C1#NMAP") = 0 or IncNMAP = True Then
                        Hs.Noinput(d1&ListColumn1member&"."&d2&ListColumn2member)
                        If  Err.Number <> 0  Then
                            Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&ListColumn1member&"."&d2&ListColumn2member)
                        End If
                        If bWriteNoInputToFile or SectionWTF Then
                            Redim Preserve WriteToFileSectionList(7,j)
                            WriteToFileSectionList(0,j) = SectionName
                            WriteToFileSectionList(1,j) = "."&d1&ListColumn1member
                            WriteToFileSectionList(2,j) = "."&d2&ListColumn2member
                        End IF
                        j = j + 1
                    End If
                ElseIf LastAttribute = 4 Then
                    ListColumn1member = NoInputList(0,i)
                    ListColumn2member = NoInputList(1,i)
                    ListColumn3member = NoInputList(2,i)

                    If Instr(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member,"C1#NMAP") = 0 or IncNMAP = True Then
                        Hs.Noinput(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member)
                        If  Err.Number <> 0  Then
                            Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member)
                        End If
                        If bWriteNoInputToFile or SectionWTF Then
                            Redim Preserve WriteToFileSectionList(7,j)
                            WriteToFileSectionList(0,j) = SectionName
                            WriteToFileSectionList(1,j) = "."&d1&ListColumn1member
                            WriteToFileSectionList(2,j) = "."&d2&ListColumn2member
                            WriteToFileSectionList(3,j) = "."&d3&ListColumn3member
                        End IF
                        j = j + 1
                    End If
                ElseIf LastAttribute = 5 Then
                    ListColumn1member = NoInputList(0,i)
                    ListColumn2member = NoInputList(1,i)
                    ListColumn3member = NoInputList(2,i)
                    ListColumn4member = NoInputList(3,i)
                    If Instr(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member,"C1#NMAP") = 0 or IncNMAP = True Then
                        Hs.Noinput(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member)
                        If Err.Number <> 0  Then
                            Err.raise 1000, "ERROR: Invalid NoInput: " &SectionName&"."&d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member,""
                        End If
                        If bWriteNoInputToFile or SectionWTF Then
                            Redim Preserve WriteToFileSectionList(7,j)
                            WriteToFileSectionList(0,j) = SectionName
                            WriteToFileSectionList(1,j) = "."&d1&ListColumn1member
                            WriteToFileSectionList(2,j) = "."&d2&ListColumn2member
                            WriteToFileSectionList(3,j) = "."&d3&ListColumn3member
                            WriteToFileSectionList(4,j) = "."&d4&ListColumn4member
                        End IF
                        j = j + 1
                    End If
                ElseIf LastAttribute = 6 Then
                    ListColumn1member = NoInputList(0,i)
                    ListColumn2member = NoInputList(1,i)
                    ListColumn3member = NoInputList(2,i)
                    ListColumn4member = NoInputList(3,i)
                    ListColumn5member = NoInputList(4,i)
                    If Instr(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member,"C1#NMAP") = 0 or IncNMAP = True Then
                        Hs.Noinput(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member)
                        If  Err.Number <> 0  Then
                            Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member)
                        End If
                        If bWriteNoInputToFile or SectionWTF Then
                            Redim Preserve WriteToFileSectionList(7,j)
                            WriteToFileSectionList(0,j) = SectionName
                            WriteToFileSectionList(1,j) = "."&d1&ListColumn1member
                            WriteToFileSectionList(2,j) = "."&d2&ListColumn2member
                            WriteToFileSectionList(3,j) = "."&d3&ListColumn3member
                            WriteToFileSectionList(4,j) = "."&d4&ListColumn4member
                            WriteToFileSectionList(5,j) = "."&d5&ListColumn5member
                        End IF
                        j = j + 1
                    End If
                ElseIf LastAttribute = 7 Then
                    ListColumn1member = NoInputList(0,i)
                    ListColumn2member = NoInputList(1,i)
                    ListColumn3member = NoInputList(2,i)
                    ListColumn4member = NoInputList(3,i)
                    ListColumn5member = NoInputList(4,i)
                    ListColumn6member = NoInputList(5,i)
                    If Instr(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member&"."&d6&ListColumn6member,"C1#NMAP") = 0 or IncNMAP = True Then
                        Hs.Noinput(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member&"."&d6&ListColumn6member)
                        If  Err.Number <> 0  Then
                            Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member&"."&d6&ListColumn6member)
                        End If
                        If bWriteNoInputToFile or SectionWTF Then
                            Redim Preserve WriteToFileSectionList(7,j)
                            WriteToFileSectionList(0,j) = SectionName
                            WriteToFileSectionList(1,j) = "."&d1&ListColumn1member
                            WriteToFileSectionList(2,j) = "."&d2&ListColumn2member
                            WriteToFileSectionList(3,j) = "."&d3&ListColumn3member
                            WriteToFileSectionList(4,j) = "."&d4&ListColumn4member
                            WriteToFileSectionList(5,j) = "."&d5&ListColumn5member
                            WriteToFileSectionList(6,j) = "."&d6&ListColumn6member
                        End IF
                        j = j + 1
                    End If
                ElseIf LastAttribute = 8 Then
                    ListColumn1member = NoInputList(0,i)
                    ListColumn2member = NoInputList(1,i)
                    ListColumn3member = NoInputList(2,i)
                    ListColumn4member = NoInputList(3,i)
                    ListColumn5member = NoInputList(4,i)
                    ListColumn6member = NoInputList(5,i)
                    ListColumn7member = NoInputList(6,i)
                    If Instr(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member&"."&d6&ListColumn6member&"."&d7&ListColumn7member,"C1#NMAP") = 0 or IncNMAP = True Then
                        Hs.Noinput(d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member&"."&d6&ListColumn6member&"."&d7&ListColumn7member)
                        If  Err.Number <> 0  Then
                            Call WriteToFile("ERROR: Invalid NoInput: " &SectionName&"."&d1&ListColumn1member&"."&d2&ListColumn2member&"."&d3&ListColumn3member&"."&d4&ListColumn4member&"."&d5&ListColumn5member&"."&d6&ListColumn6member&"."&d7&ListColumn7member)
                        End If
                        If bWriteNoInputToFile or SectionWTF Then
                            Redim Preserve WriteToFileSectionList(7,j)
                            WriteToFileSectionList(0,j) = SectionName
                            WriteToFileSectionList(1,j) = "."&d1&ListColumn1member
                            WriteToFileSectionList(2,j) = "."&d2&ListColumn2member
                            WriteToFileSectionList(3,j) = "."&d3&ListColumn3member
                            WriteToFileSectionList(4,j) = "."&d4&ListColumn4member
                            WriteToFileSectionList(5,j) = "."&d5&ListColumn5member
                            WriteToFileSectionList(6,j) = "."&d6&ListColumn6member
                            WriteToFileSectionList(7,j) = "."&d7&ListColumn7member
                        End IF
                        j = j + 1
                    End If
                End If
            Next
        End If

    ElseIf Ucase(ListType) = "CLOSETIMESPECIFICLIST" Then
        If LastAttribute = 6 Then
            PeriodList = d4
            YearsList = d5
            dim1Prefix = d1
            dim2Prefix = d2
            dim3Prefix = d3
        ElseIf LastAttribute = 7 Then
            PeriodList = d5
            YearsList = d6
            dim1Prefix = d1
            dim2Prefix = d2
            dim3Prefix = d3
            dim4Prefix = d4
        ElseIf LastAttribute = 8 Then
            PeriodList = d6
            YearsList = d7
            dim1Prefix = d1
            dim2Prefix = d2
            dim3Prefix = d3
            dim4Prefix = d4
            dim5Prefix = d5
        End If

        If LastAttribute < 6 Then
            Err.raise -1, "ERROR - Invalid number of parameters in the NoInput function - "&SectionName&" - You need to have dimension prefix for all dimensions in the list + period list + year list + multidimensional array", ""
        ElseIf LastAttribute > 8 Then
            Err.raise -1, "ERROR - Invalid number of parameters in the NoInput function - "&SectionName&" - Function can only handle 5 dimensions while doing period specific close", ""
        End If

        If dim1Prefix <> "P#" Then
            Err.raise -1, "ERROR - Period prefix needs to be fifth parameter in NoInput function, now "&d1&" - "&SectionName, ""
        End If

        If dim2Prefix <> "Y#" Then
            Err.raise -1, "ERROR - Period prefix needs to be fifth parameter in NoInput function, now "&d1&" - "&SectionName, ""
        End If

        DimsInList = Ubound(NoInputList, 1) + 1
        If LastAttribute - 3 <> DimsInList Then
            Err.raise -1, "ERROR - Dimensions specified in the function parameters, does not match the dimension count in the multidimensional array - "&SectionName&" - Update the MultiDimArray or update the dimension prefixes which are in the function parameters", ""
        End If

        If ClosePeriods = "" Then
            Err.raise -1, "ERROR -
        End If

        If ClosePeriods <> "CloseStartDate" and ClosePeriods <> "CloseEndDate" Then
            Err.raise -1, "ERROR -
        End If

        If IsEmpty(NoInputList) = False Then
            Counter = 0
            For x=0 to Ubound(NoInputList,2)
                If LastAttribute = 6 Then
                    Dim1 = NoInputList(0,x)
                    Dim2 = NoInputList(1,x)
                    Dim3 = NoInputList(2,x)
                    PeriodNo = GetPeriodNumber(Dim1)
                ElseIf LastAttribute = 7 Then
                    Dim1 = NoInputList(0,x)
                    Dim2 = NoInputList(1,x)
                    Dim3 = NoInputList(2,x)
                    Dim4 = NoInputList(3,x)
                    PeriodNo = GetPeriodNumber(Dim1)
                ElseIf LastAttribute = 8 Then
                    Dim1 = NoInputList(0,x)
                    Dim2 = NoInputList(1,x)
                    Dim3 = NoInputList(2,x)
                    Dim4 = NoInputList(3,x)
                    Dim5 = NoInputList(4,x)
                    PeriodNo = GetPeriodNumber(Dim1)
                End If

                If ClosePeriods = "CloseStartDate" Then
                    For each YearNoInp in YearsList
                        If CInt(YearNoInp) = CInt(Dim2) Then
                            If Dim1 = "Jan" Then
                                If LastAttribute = 6 Then
                                    If Instr(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                        HS.NoInput(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                        If bWriteNoInputToFile or SectionWTF Then
                                            Redim Preserve WriteToFileSectionList(7,counter)
                                            WriteToFileSectionList(0,Counter) = SectionName
                                            WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                            WriteToFileSectionList(2,Counter) = "."& dim2Prefix & YearNoInp

                                            Counter = Counter + 1
                                        End If
                                    End If
                                ElseIf LastAttribute = 7 Then
                                    If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                        HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                        If bWriteNoInputToFile or SectionWTF Then
                                            Redim Preserve WriteToFileSectionList(7,counter)
                                            WriteToFileSectionList(0,Counter) = SectionName
                                            WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                            WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                            WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                            Counter = Counter + 1
                                        End If
                                    End If
                                ElseIf LastAttribute = 8 Then
                                    If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                        HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                        If bWriteNoInputToFile or SectionWTF Then
                                            Redim Preserve WriteToFileSectionList(7,counter)
                                            WriteToFileSectionList(0,Counter) = SectionName
                                            WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                            WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                            WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                            WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                            Counter = Counter + 1
                                        End If
                                    End If
                                End If
                            Else
                                For p=0 to Ubound(PeriodList)
                                    If p = CInt(PeriodNo)-1 Then
                                        If LastAttribute = 6 Then
                                            If Instr(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                PeriodToClose = PeriodList(p)
                                                HS.NoInput(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)

                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 7 Then
                                            If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                PeriodToClose = PeriodList(p)
                                                HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)

                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 8 Then
                                            If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                PeriodToClose = PeriodList(p)
                                                HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)

                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                                    WriteToFileSectionList(4,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(5,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        End If
                                    ElseIf p > CInt(PeriodNo)-1 Then
                                        If LastAttribute = 6 Then
                                            If Instr(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                PeriodToClose = PeriodList(p)
                                                HS.NoInput(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 7 Then
                                            If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                PeriodToClose = PeriodList(p)
                                                HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 8 Then
                                            If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                PeriodToClose = PeriodList(p)
                                                HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                                    WriteToFileSectionList(4,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(5,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                        ElseIf CInt(YearNoInp) > CInt(Dim2) Then
                            If LastAttribute = 6 Then
                                If Instr(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                    HS.NoInput(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter)
                                        WriteToFileSectionList(0,Counter) = SectionName
                                        WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                        WriteToFileSectionList(2,Counter) = "."& dim2Prefix & YearNoInp

                                        Counter = Counter + 1
                                    End If
                                End If
                            ElseIf LastAttribute = 7 Then
                                If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                    HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter)
                                        WriteToFileSectionList(0,Counter) = SectionName
                                        WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                        WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                        WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                        Counter = Counter + 1
                                    End If
                                End If
                            ElseIf LastAttribute = 8 Then
                                If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                    HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter)
                                        WriteToFileSectionList(0,Counter) = SectionName
                                        WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                        WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                        WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                        WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                        Counter = Counter + 1
                                    End If
                                End If
                            End If
                        End If
                    Next
                ElseIf ClosePeriods = "CloseEndDate" Then
                    For each YearNoInp in YearsList
                        If CInt(YearNoInp) = CInt(Dim2) Then
                            If Dim1 = "Dec" Then
                                If LastAttribute = 6 Then
                                    If Instr(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                        HS.NoInput(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                        If bWriteNoInputToFile or SectionWTF Then
                                            Redim Preserve WriteToFileSectionList(7,counter)
                                            WriteToFileSectionList(0,Counter) = SectionName
                                            WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                            WriteToFileSectionList(2,Counter) = "."& dim2Prefix & YearNoInp

                                            Counter = Counter + 1
                                        End If
                                    End If
                                ElseIf LastAttribute = 7 Then
                                    If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                        HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                        If bWriteNoInputToFile or SectionWTF Then
                                            Redim Preserve WriteToFileSectionList(7,counter)
                                            WriteToFileSectionList(0,Counter) = SectionName
                                            WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                            WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                            WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                            Counter = Counter + 1
                                        End If
                                    End If
                                ElseIf LastAttribute = 8 Then
                                    If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                        HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                        If bWriteNoInputToFile or SectionWTF Then
                                            Redim Preserve WriteToFileSectionList(7,counter)
                                            WriteToFileSectionList(0,Counter) = SectionName
                                            WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                            WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                            WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                            WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                            Counter = Counter + 1
                                        End If
                                    End If
                                End If
                            Else
                                For p=0 to Ubound(PeriodList)
                                    If p = CInt(PeriodNo)-1 Then
                                        PeriodToClose = PeriodList(p)

                                        If LastAttribute = 6 Then
                                            If Instr(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                HS.NoInput(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)

                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 7 Then
                                            If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 8 Then
                                            If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)

                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                                    WriteToFileSectionList(4,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(5,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        End If
                                    ElseIf p < CInt(PeriodNo)-1 Then
                                        PeriodToClose = PeriodList(p)

                                        If LastAttribute = 6 Then
                                            If Instr(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                HS.NoInput(dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 7 Then
                                            If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        ElseIf LastAttribute = 8 Then
                                            If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                                HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim1Prefix&PeriodToClose&"."&dim2Prefix&YearNoInp)
                                                If bWriteNoInputToFile or SectionWTF Then
                                                    Redim Preserve WriteToFileSectionList(7,counter)
                                                    WriteToFileSectionList(0,Counter) = SectionName
                                                    WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                                    WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                                    WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                                    WriteToFileSectionList(4,Counter) = "."& dim1Prefix & PeriodToClose
                                                    WriteToFileSectionList(5,Counter) = "."& dim2Prefix & YearNoInp

                                                    Counter = Counter + 1
                                                End If
                                            End If
                                        End if
                                    End If
                                Next
                            End If
                        ElseIf CInt(YearNoInp) < CInt(Dim2) Then
                            If LastAttribute = 6 Then
                                If Instr(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                    HS.NoInput(dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter)
                                        WriteToFileSectionList(0,Counter) = SectionName
                                        WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                        WriteToFileSectionList(2,Counter) = "."& dim2Prefix & YearNoInp

                                        Counter = Counter + 1
                                    End If
                                End If
                            ElseIf LastAttribute = 7 Then
                                If Instr(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                    HS.NoInput(dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter)
                                        WriteToFileSectionList(0,Counter) = SectionName
                                        WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                        WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                        WriteToFileSectionList(3,Counter) = "."& dim2Prefix & YearNoInp

                                        Counter = Counter + 1
                                    End If
                                End If
                            ElseIf LastAttribute = 8 Then
                                If Instr(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp,"C1#NMAP") = 0 or IncNMAP = True Then
                                    HS.NoInput(dim5Prefix&Dim5&"."&dim4Prefix&Dim4&"."&dim3Prefix&Dim3&"."&dim2Prefix&YearNoInp)

                                    If bWriteNoInputToFile or SectionWTF Then
                                        Redim Preserve WriteToFileSectionList(7,counter)
                                        WriteToFileSectionList(0,Counter) = SectionName
                                        WriteToFileSectionList(1,Counter) = "."& dim3Prefix & Dim3
                                        WriteToFileSectionList(2,Counter) = "."& dim4Prefix & Dim4
                                        WriteToFileSectionList(3,Counter) = "."& dim5Prefix & Dim5
                                        WriteToFileSectionList(4,Counter) = "."& dim2Prefix & YearNoInp

                                        Counter = Counter + 1
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
            Next
        End If
    End If

    CreateNoInputs = WriteToFileSectionList
End Function

Function GetValidAppInfo(strApp)

        ValidAppsToWriteAuditLogToDataBase = array("CARGOHFM","TCARGOPREL","DCARGOPREL")

        If IsItemInList(strApp,ValidAppsToWriteAuditLogToDataBase) = True Then
            GetValidAppInfo = True
        Else
            GetValidAppInfo = False
        End if
End Function

Function ConvertToUTCTime(sTime)
    od = sTime

    Set oShell = CreateObject("WScript.Shell")

    atb = "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation\ActiveTimeBias"
    offsetMin = oShell.RegRead(atb)

    ad = dateadd("n", offsetMin, od)

    sMonth = Month(CDate(ad))
    sDay = Day(CDate(ad))
    sHour = Hour(CDate(ad))
    sMinute = Minute(CDate(ad))
    sSecond = Second(CDate(ad))

    If Len(sSecond) = 1 Then
        sSecond = "0" & sSecond
    End If

    ConvertToUTCTime = sMonth & "/" &sDay & "/" &Year(CDate(ad)) & " " & sHour & ":" & sMinute & ":" &sSecond
End Function

Sub QSort(EntityList, iLb, iUb)
        Dim lbStack(32)
        Dim ubStack(32)
        Dim sp
        Dim iLbx
        Dim iUbx
        Dim m
        Dim p
        Dim i
        Dim j
        Dim t

        lbStack(0) = iLb
        ubStack(0) = iUb
        sp = 0

        Do While sp >= 0
                iLbx = lbStack(sp)
                iUbx = ubStack(sp)
                Do While (iLbx < iUbx)

                        p = iLbx + (iUbx - iLbx) \ 2

                        t = EntityList(iLbx)
                        EntityList(iLbx) = EntityList(p)
                        EntityList(p) = t

                        i = iLbx + 1
                        j = iUbx
                        Do
                                Do While i < j
                                        If EntityList(iLbx) <= EntityList(i) Then Exit Do
                                        i = i + 1
                                Loop

                                Do While j >= i
                                        If EntityList(j) <= EntityList(iLbx) Then Exit Do
                                        j = j - 1
                                Loop

                                If i >= j Then Exit Do

                                t = EntityList(i)
                                EntityList(i) = EntityList(j)
                                EntityList(j) = t

                                j = j - 1
                                i = i + 1
                        Loop

                        t = EntityList(iLbx)
                        EntityList(iLbx) = EntityList(j)
                        EntityList(j) = t
                        m = j

                        If m - iLbx <= iUbx - m Then
                                If m + 1 < iUbx Then
                                        lbStack(sp) = m + 1
                                        ubStack(sp) = iUbx
                                        sp = sp + 1
                                End If
                                iUbx = m - 1
                        Else
                                If m - 1 > iLbx Then
                                        lbStack(sp) = iLbx
                                        ubStack(sp) = m - 1
                                        sp = sp + 1
                                End If
                                iLbx = m + 1
                        End If
                Loop
                sp = sp - 1
        Loop
End Sub

Sub CheckGeneralValidationAccByPassList(GeneralValidationAccByPassList)

    c = 0

    Set DataUnit = HS.OpenDataUnit("A{ValidationAccounts.[Base]}.E#[None].V#[None].C1#CUSTOM1_TOP.C2#CUSTOM2_TOP.C3#ValByPass.C4#[None].I#[ICP None]")

    NumItems = DataUnit.GetNumItems
    For i = 0 To NumItems - 1
        Call DataUnit.GetItem(i, Account, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
        If dData <> 0 Then
            If c = 0 Then
                ReDim GeneralValidationAccByPassList_Help(NumItems)
            End If

            GeneralValidationAccByPassList_Help(c) = Account
            c = c + 1
        End If
    Next
    If c > 0 Then
        Redim Preserve GeneralValidationAccByPassList_Help(c-1)
    End If

    GeneralValidationAccByPassList = GeneralValidationAccByPassList_Help
End Sub

Function GetIsValidCalcFreq(ValAcc,IntCurPeriodNum)

    CalcFreqUD = GetUD(ValAcc, "Account", "AccFreq")

    ValidPeriod = False
    If CalcFreqUD = "" Then
        ValidPeriod = True
    ElseIf CalcFreqUD = "Q" Then
        If IntCurPeriodNum Mod 3 = 0 Then
            ValidPeriod = True
        End If
    ElseIf CalcFreqUD = "A" Then
        If IntCurPeriodNum Mod 12 = 0 Then
            ValidPeriod = True
        End If
    End If

    GetIsValidCalcFreq = ValidPeriod
End Function

Function GetFirstParent(sDimension,sHierarchy,Mbr)
    If sDimension = "Custom1" Then
        sList = HS.Custom1.List(Mbr,"[Ancestors]")
    ElseIf sDimension = "Custom2" Then
        sList = HS.Custom2.List(Mbr,"[Ancestors]")
    ElseIf sDimension = "Custom3" Then
        sList = HS.Custom3.List(Mbr,"[Ancestors]")
    ElseIf sDimension = "Custom4" Then
        sList = HS.Custom4.List(Mbr,"[Ancestors]")
    ElseIf sDimension = "Entity" Then
        sList = HS.Entity.List(Mbr,"[Ancestors]")
    ElseIf sDimension = "Account" Then
        sList = HS.Account.List(Mbr,"[Ancestors]")
    End If

    For each sParent in sList
        If sDimension = "Custom1" And HS.Custom1.IsDescendant(sHierarchy,sParent) = True Then
            sFirstParent =  sParent
        ElseIf sDimension = "Custom2" And HS.Custom2.IsDescendant(sHierarchy,sParent) = True Then
            sFirstParent =  sParent
        ElseIf sDimension = "Custom3" And HS.Custom3.IsDescendant(sHierarchy,sParent) = True Then
            sFirstParent =  sParent
        ElseIf sDimension = "Custom4" And HS.Custom4.IsDescendant(sHierarchy,sParent) = True Then
            sFirstParent =  sParent
        ElseIf sDimension = "Entity" And HS.Entity.IsDescendant(sHierarchy,sParent) = True Then
            sFirstParent =  sParent
        ElseIf sDimension = "Account" And HS.Account.IsDescendant(sHierarchy,sParent) = True Then
            sFirstParent =  sParent
        End If
        If sFirstParent <> "" Then Exit For
    Next

    GetFirstParent = sFirstParent
End Function

Function GetTaxGroupEntity(StrEntity,bIsBase,IntYear,IntCurPeriodNum,TrueScenario)

        TAX_GROUPS = HS.Entity.List("ADD_TAX","[Children]")
        Prefix = ""

    If bIsBase = False Then

        For each TaxGroup in TAX_GROUPS
            TaxGroupStatus = "Active"

            TaxEntUD = GetUD(TaxGroup, "Entity", Prefix & "TaxGroupStart")
            If (Len(TaxEntUD) > 0) Then
                TaxEntStartPeriod = left(TaxEntUD,3)
                TaxEntStartPeriodNo = CInt(GetPeriodNumber(TaxEntStartPeriod))
                TaxEntStartYear = CInt(Right(TaxEntUD,4))
                If CInt(IntYear) > TaxEntStartYear or (CInt(IntYear) = TaxEntStartYear and IntCurPeriodNum >= TaxEntStartPeriodNo) Then TaxGroupStatus = "Active" Else TaxGroupStatus = "NonActive"
            End If

            TaxEntEndUD = GetUD(TaxGroup, "Entity", Prefix & "TaxGroupEnd")
            If (Len(TaxEntEndUD) > 0) Then
                TaxEntEndPeriod = left(TaxEntUD,3)
                TaxEntEndPeriodNo = CInt(GetPeriodNumber(TaxEntStartPeriod))
                TaxEntEndYear = CInt(Right(TaxEntUD,4))
                If CInt(IntYear) < TaxEntEndYear or (CInt(IntYear) = TaxEntEndYear and IntCurPeriodNum <= TaxEntEndPeriodNo) Then TaxGroupStatus = "Active" Else TaxGroupStatus = "NonActive"
            End If

            If TaxGroupStatus = "Active" Then
                EntList = HS.Entity.List(TaxGroup,"[Descendants]")
                For each e in EntList
                    If TrueScenario <> "NORSU_ACTUAL" then
                        If e = StrEntity&"_TAX" Then
                            RecodedMbr = StrEntity&"_TAX"
                        End If
                    Else
                        If e = StrEntity&"_TAX" or e = StrEntity&"_TAX_NORSU" or e = StrEntity&"_TAX" Then
                            RecodedMbr = StrEntity&"_TAX"
                        End If
                    End If
                    If RecodedMbr <> "" Then Exit For
                Next
            End If
            If RecodedMbr <> "" Then Exit For
        Next
        If RecodedMbr <> "" Then
            EntityListToCheck = Array(StrEntity,RecodedMbr)
        Else
            EntityListToCheck = Array(StrEntity)
        End If
    Else
        EntityListToCheck = Array(StrEntity)
    End If

    For each Ent in EntityListToCheck
        If TaxGroupEntity <> "" Then Exit For

        ActiveInTaxGroup = True

        EntInTaxGroupStart = GetUD(Ent, "Entity", Prefix & "sInTaxGroupStart")
        If EntInTaxGroupStart <> "" Then
            EntInTaxGroupStartPeriod = left(EntInTaxGroupStart,3)
            EntInTaxGroupStartPeriodNo = CInt(GetPeriodNumber(EntInTaxGroupStartPeriod))
            EntInTaxGroupStartYear = CInt(Right(EntInTaxGroupStart,4))
            If CInt(IntYear) < EntInTaxGroupStartYear or (CInt(IntYear) = EntInTaxGroupStartYear and IntCurPeriodNum < EntInTaxGroupStartPeriodNo) Then ActiveInTaxGroup = False
        End If

        EntInTaxGroupEnd = GetUD(Ent, "Entity", Prefix & "sInTaxGroupEnd")
        If EntInTaxGroupEnd <> "" Then
            EntInTaxGroupEndPeriod = left(EntInTaxGroupEnd,3)
            EntInTaxGroupEndPeriodNo = CInt(GetPeriodNumber(EntInTaxGroupEndPeriod))
            EntInTaxGroupEndYear = CInt(Right(EntInTaxGroupEnd,4))
            If CInt(IntYear) > EntInTaxGroupEndYear or (CInt(IntYear) = EntInTaxGroupEndYear and IntCurPeriodNum >= EntInTaxGroupEndPeriodNo) Then ActiveInTaxGroup = False
        End If

        If ActiveInTaxGroup = True Then
            For Each TaxGroup in TAX_GROUPS

                TaxEntUD = GetUD(TaxGroup, "Entity", Prefix & "TaxGroupStart")
                TaxEntStartPeriod = left(TaxEntUD,3)
                TaxEntStartPeriodNo = CInt(GetPeriodNumber(TaxEntStartPeriod))
                TaxEntStartYear = CInt(Right(TaxEntUD,4))
                If CInt(IntYear) > TaxEntStartYear or (CInt(IntYear) = TaxEntStartYear and IntCurPeriodNum >= TaxEntStartPeriodNo) Then TaxGroupStatus = "Active" Else TaxGroupStatus = "NonActive"

                TaxEntEndUD = GetUD(TaxGroup, "Entity", Prefix & "TaxGroupEnd")
                If (Len(TaxEntEndUD) > 0) Then
                    TaxEntEndPeriod = left(TaxEntEndUD,3)
                    TaxEntEndPeriodNo = CInt(GetPeriodNumber(TaxEntEndPeriod))
                    TaxEntEndYear = CInt(Right(TaxEntEndUD,4))
                    If CInt(IntYear) < TaxEntEndYear or (CInt(IntYear) = TaxEntEndYear and IntCurPeriodNum < TaxEntEndPeriodNo) Then TaxGroupStatus = "Active" Else TaxGroupStatus = "NonActive"
                End If

                If TaxGroupStatus = "Active" Then
                    If HS.Entity.IsDescendant(TaxGroup,Ent) = True Then
                        TaxGroupEntity = TaxGroup
                        Exit For
                    ElseIf IsItemInList(StrEntity,TAX_GROUPS) = True Then
                        TaxGroupEntity = StrEntity
                        Exit For
                    End If
                End If
            Next
        End If
    Next

    GetTaxGroupEntity = TaxGroupEntity
End Function

Function GetRollForwardInfo(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)

    RollForward = True
    If StrScenario = "FORECAST" Then
        FirstFcstYear = CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)
        If CInt(IntYear) > CInt(FirstFcstYear) Or CInt(Str1stFcstPeriod) = 1 Then
            RollForward = False
        End If
    ElseIf StrScenario = "BUDGET" Or Instr(UCase(StrScenario), "FORECAST_DEC") > 0 Then
        If CInt(IntYear) > 2018 Then
            RollForward = False
        End If
    ElseIf Instr(StrScenario,"FORECAST_") > 0 Then
        FirstFcstYear = CheckFCST_1st_Year(StrScenario,StrCurrFcstYear,Str1stFcstPeriod,IntYear)
        If CInt(IntYear) > CInt(FirstFcstYear) Then
            RollForward = False
        End If
    End if

    GetRollForwardInfo = RollForward
End Function

Function GetPrimaryAccForValidationAcc(sValAcc)
    PrimaryAcc = mid(sValAcc,1,InStrRev(sValAcc,"_")-1)
    GetPrimaryAccForValidationAcc = PrimaryAcc
End Function

Function CheckValidDataPeriodForRollingCalcs(nMonths)

    POV_Year = HS.Year.Member()
    ValidPeriod = False        :    DataPeriods = 0
    If Cint(POV_Year) > CInt(FirstYearWithData) + 1 Then
        ValidPeriod = True
    Else
        POV_PeriodNo = HS.Period.Number()
        For i = FirstYearWithData to POV_Year
            If i = CInt(FirstYearWithData) Then
                DataPeriods = 12 - CInt(FirstperiodWithData) + 1 + DataPeriods
            ElseIf i = CInt(POV_Year) Then
                DataPeriods = CInt(POV_PeriodNo) + DataPeriods
            Else
                DataPeriods = DataPeriods + 12
            End If
        Next
        If DataPeriods >= nMonths Then ValidPeriod = True
    End If

    CheckValidDataPeriodForRollingCalcs = ValidPeriod
End Function

Function RemoveClosed(ByVal original, ByVal dimension, ByVal remBefore)

    If not IsArray(original) Then
        original = Array(original)
    End If

    iListSize = CInt(UBound(original))
    Dim retList()
    ReDim retList(iListSize)
    iNumFound = 0

    iRemBefore = 2014

    If isNumeric(Trim(remBefore)) Then
        iRemBefore = CInt(Trim(remBefore))
    End If

    For Each org in original
        sUDParam = ""

        If UCASE(dimension) = "ICP" Then
            sUDParam = GetUD(org, "Entity", "CloseStartDate")
        Else
            sUDParam = GetUD(org, dimension, "CloseStartDate")
        End If

        If len(sUDParam) > 3 Then
            sUDParam = Right(sUDParam,4)
        End If
        If isNumeric(Trim(sUDParam)) And len(sUDParam) > 3 Then
            iYearClosed = CInt(Trim(sUDParam))
            If iYearClosed > iRemBefore Then
                retList(iNumFound) = org
                iNumFound = iNumFound + 1
            End If

        Else
            retList(iNumFound) = org
            iNumFound = iNumFound + 1
        End If
    Next

    ReDim Preserve retList(iNumFound-1)
    RemoveClosed = retList
End Function

Function SkipCalculationsForClosedEntity(Str1stFcstPeriod,StrCurrFcstYear,IntCurPeriodNum,StrPeriod,IntYear,StrScenario,StrEntity,StrBA,StrValue,bUseActualRules)

    Call CheckCopyFlagValue(GENERAL_ACTIVATION,ENTITY_SPECIFIC_ACTIVATION,CopyActive,ClearActive)
    If ClearActive = True Then
        vSkip = False
    Else
        vSkip = False

        FullEntUD = GetUD(StrEntity, "Entity", "")

        If StrScenario = "ACTUAL" and Instr(FullEntUD,"/ClosedInAct/") > 0 Then vSkip = True

        If Instr(StrScenario,"FORECAST") > 0 Then
            If bUseActualRules = True Then
                If Instr(FullEntUD,"/ClosedInAct/") > 0 Then

                    If CInt(Str1stFcstPeriod) = 1 Then
                        LastActiveYear = StrCurrFcstYear - 1
                        LastActivePeriodNo = 12
                    Else
                        LastActiveYear = StrCurrFcstYear
                        LastActivePeriodNo = Str1stFcstPeriod-1
                    End If

                    If CInt(IntYear) < CInt(LastActiveYear) or (CInt(IntYear) = CInt(LastActiveYear) and CInt(IntCurPeriodNum) < CInt(LastActivePeriodNo)) Then
                        vSkip = True
                    End if
                End If
            End If
        End If

        If vSkip = False Then
            EndUD = GetParamFromTxt("CloseStartDate", FullEntUD)

            If EntUD <> "" Then
                CloseStartYear = CInt(right(EntUD,4))

                If Instr(StrScenario,"STRATEGY") > 0 Then
                    ScenActiveYear = Right(StrScenario,4)
                Else
                    ScenActiveYear = IntYear
                End If

                If Instr(StrScenario,"FORECAST") > 0 and StrScenario <> "BUDGET_FORECAST" Then
                    If StrScenario = "FORECAST_DEC" or StrScenario = "FORECAST_DEC_PREVY" Then
                        YearToKeepClosedEntActive = 3
                    Else
                        YearToKeepClosedEntActive = 2
                    End If
                ElseIf StrScenario = "BUDGET" Then
                    YearToKeepClosedEntActive = 2
                ElseIf Instr(StrScenario,"STRATEGY") > 0 Then
                    YearToKeepClosedEntActive = 5
                Else
                    YearToKeepClosedEntActive = 1
                End If

                SkipStart = CInt(CloseStartYear) + CInt(YearToKeepClosedEntActive)
                If CInt(SkipStart) < Cint(ScenActiveYear) Then vSkip = True
            End If
        End If
    End If

    SkipCalculationsForClosedEntity = vSkip
End Function

Sub CheckIfBase(DimShortName,DimMbrInLoop,ParentBaselist,bIsBase)

    ParentBaselist = ""
    bIsBase = True

    If DimShortName = "E" Then
        If HS.Entity.IsBase("",DimMbrInLoop) = False Then
            bIsBase = False
            ParentBaselist = HS.Entity.List(DimMbrInLoop,"[Base]")
        Else
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        End if
    ElseIf DimShortName = "C1" Then
        If HS.Custom1.IsBase("",DimMbrInLoop) = False Then
            bIsBase = False
            ParentBaselist = HS.Custom1.List(DimMbrInLoop,"[Base]")
        Else
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        End if
    ElseIf DimShortName = "C2" Then
        If HS.Custom2.IsBase("",DimMbrInLoop) = False Then
            bIsBase = False
            ParentBaselist = HS.Custom2.List(DimMbrInLoop,"[Base]")
        Else
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        End if
    ElseIf DimShortName = "C3" Then
        If HS.Custom3.IsBase("",DimMbrInLoop) = False Then
            bIsBase = False
            ParentBaselist = HS.Custom3.List(DimMbrInLoop,"[Base]")
        Else
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        End if
    ElseIf DimShortName = "C4" Then
        If HS.Custom4.IsBase("",DimMbrInLoop) = False Then
            bIsBase = False
            ParentBaselist = HS.Custom4.List(DimMbrInLoop,"[Base]")
        Else
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        End if
    ElseIf DimShortName = "I" Then
        If DimMbrInLoop = "[ICP Top]" Or DimMbrInLoop = "[ICP Entities]" Then
            bIsBase = False
            ParentBaselist = HS.ICP.List(DimMbrInLoop,"[Base]")
        ElseIf DimMbrInLoop = "[ICP None]" Then
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        ElseIF HS.Entity.IsBase("",DimMbrInLoop) = False Then
            bIsBase = False
            ParentBaselist = HS.Entity.List(DimMbrInLoop,"[Base]")
        Else
            bIsBase = True
            ParentBaselist = Array(DimMbrInLoop)
        End if
    End If
End Sub

Function GetAccountDimTopMemberBaseList(Acc,DimShortName)

    If Left(DimShortName, 1) = "C" Then
        TopMember = HS.Account.CustomTop(Acc,"Custom" & Right(DimShortName, 1))
        If DimShortName = "C1" Then
            BaseList = HS.Custom1.List(TopMember,"[Base]")
        ElseIf DimShortName = "C2" Then
            BaseList = HS.Custom2.List(TopMember,"[Base]")
        ElseIf DimShortName = "C3" Then
            BaseList = HS.Custom3.List(TopMember,"[Base]")
        ElseIf DimShortName = "C4" Then
            BaseList = HS.Custom4.List(TopMember,"[Base]")
        End If
    ElseIf DimShortName = "E" Then
        BaseList = HS.Entity.List("","[Base]")
    ElseIf DimShortName = "I" Then
        TopMember = HS.Account.ICPTopMember(Acc)
        If TopMember = "[ICP Top]" Or TopMember = "[ICP Entities]" Then
            BaseList = HS.ICP.List(TopMember,"[Base]")
        ElseIf TopMember = "[ICP None]" Then
            BaseList = Array(TopMember)
        ElseIF HS.Entity.IsBase("",TopMember) = False Then
            BaseList = HS.Entity.List(TopMember,"[Base]")
        Else
            BaseList = Array(TopMember)
        End if
    End If

    GetAccountDimTopMemberBaseList = BaseList
End Function

Function GetSuperGLinfo(EntUD,IntYear,IntCurPeriodNum,StrEntity,TrueScenario)

    SuperGLactive = False

        If Instr(EntUD,"/sGL") > 0 Then

            StartUD = GetUD(StrEntity, "Entity", "sGLstart")

            sP = left(StartUD,3)
            sP_No = CInt(GetPeriodNumber(sP))
            sY = CInt(Right(StartUD,4))
            If CInt(IntYear) > sY or (CInt(IntYear) = sY and IntCurPeriodNum >= sP_No) Then SuperGLactive = True

            If SuperGLactive = True Then
                EndUD = GetUD(StrEntity, "Entity", "sGLEnd")
                If EndUD = "" Then

                Else
                    eP = left(EndUD,3)
                    eP_No = CInt(GetPeriodNumber(eP))
                    eY = CInt(Right(EndUD,4))
                    If CInt(IntYear) < eY or (CInt(IntYear) = eY and IntCurPeriodNum <= eP_No) Then

                    Else
                        SuperGLactive = False
                    End If
                End If
            End If

        End If

    If SuperGLactive = True Then GetSuperGLinfo = True else GetSuperGLinfo = False

End Function

Function IsActiveGL(EntUD,IntYear,IntCurPeriodNum,sScenario)

    IsGL = False
    If Instr(EntUD,"/GL/") > 0 Then
        IsGL = true

        StartUD = GetParamFromTxt("GLstart", EntUD)
        EndUD   = GetParamFromTxt("GLend", EntUD)

        If StartUD <> "" Then
            sP = left(StartUD,3)
            sP_No = CInt(GetPeriodNumber(sP))
            sY = CInt(Right(StartUD,4))
            If CInt(IntYear) > sY or (CInt(IntYear) = sY and IntCurPeriodNum >= sP_No) Then

            Else
                IsGL = False
            End If
        End If

        If IsGL = True and EndUD <> "" Then
            eP = left(EndUD,3)
            eP_No = CInt(GetPeriodNumber(eP))
            eY = CInt(Right(EndUD,4))
            If CInt(IntYear) < eY or (CInt(IntYear) = eY and IntCurPeriodNum <= eP_No) Then

            Else
                IsGL = False
            End If
        End If

    End If

    If sScenario = "NORSU_ACTUAL" Then
        If Instr(EntUD,"/NORSUGL/") > 0 Then
            IsGL = True
        End If
    End If

    IsActiveGL = IsGL

End Function

Sub TBC_EntitiesCopy(StrEntity,StrScenario,StrPeriod,IntYear,IntCurPeriodNum)

    If ucase(StrScenario) = "ACTUAL" Then

        EntUD = GetUD(StrEntity, "Entity", "")
        If InStr(UCASE(EntUD),"/COPY/") > 0 Then

            Activate_TBC_Entities_Copy = HS.GetCell("E#ADMIN_ENTITY.V#EUR.A#Activate_TBC_Entities_Copy.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
            If Activate_TBC_Entities_Copy = 0 Then
                Activate_TBC_Entities_Copy = HS.GetCell("A#Activate_TBC_Entities_Copy.C1#[None].C2#[None].C3#INP.C4#[None].I#[ICP None]")
            End If

            If Activate_TBC_Entities_Copy = 1 Then

                For each copyAcc in HS.Account.List("","[Base]")

                    DoCopy = True
                    If HS.Account.IsCalculated(copyAcc) = TRUE Then
                        DoCopy = False
                    ElseIf HS.Account.IsBase("ACQ_ACCOUNTS",copyAcc) = True Then
                        DoCopy = False
                    End If

                    If PrevAccount <> copyAcc Then
                        AccFreq = GetUD(copyAcc, "Account", "AccFreq")
                        If ucase(AccFreq) = "Q" Then
                            If IntCurPeriodNum = 6 or IntCurPeriodNum = 9 or IntCurPeriodNum = 12 Then
                                DoCopy = True
                                PrevQuarterNo = IntCurPeriodNum - 3
                                CopyPeriodPOV = ".P#" & GetPeriodLabel(PrevQuarterNo)
                            Else
                                DoCopy = False
                                CopyPeriodPOV = ".P#Prior"
                            End If
                        Else
                            CopyPeriodPOV = ".P#Prior"
                        End If
                    End If

                    If DoCopy = True Then

                        Set DataUnit=HS.OpenDataUnit("A#" & copyAcc & CopyPeriodPOV)
                        NumItems = DataUnit.GetNumItems
                        For i = 0 To NumItems - 1
                            Call DataUnit.GetItem(i, StrAccount, StrICP, StrC1, StrC2, StrC3, StrC4, dData)
                            If dData <> 0 Then
                                StrPOv = "A#" & StrAccount & ".I#" & StrICP & ".C1#" & StrC1 & ".C2#" & StrC2 & ".C3#" & StrC3 & ".C4#" & StrC4
                                Call HS.SetDataWithPOV(StrPOv, dData, False)
                            End If
                        Next
                    End If

                     PrevAccount = copyAcc

                Next

                Set MyCellTextUnit = HS.OpenCellTextUnit("P#Prior", "[Default]", "Account", "Ascending")
                NumItems= MyCellTextUnit.GetNumItems
                For i = 0 to NumItems - 1
                    A = MyCellTextUnit.Item(i).Account
                    If HS.Account.IsBase("ACQ_ACCOUNTS",A) = False Then
                        If PrevAccount <> A Then AccFreq = GetUD(A, "Account", "AccFreq")
                        If AccFreq <> "Q" Then
                            sI = MyCellTextUnit.Item(i).ICP
                            sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                            sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                            sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                            sC4 = MyCellTextUnit.Item(i).Custom("Custom4")
                            CellText = MyCellTextUnit.Item(i).CellText
                            HS.SetCellTextWithLabel "A#"&A&".I#"&sI&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&"", "[Default]",CellText
                        End If
                    End If
                    PrevAccount = A
                Next

                If IntCurPeriodNum = 6 or IntCurPeriodNum = 9 or IntCurPeriodNum = 12 Then

                    PrevQuarterNo = IntCurPeriodNum - 3
                    CopyPeriodPOV = "P#" & GetPeriodLabel(PrevQuarterNo)

                    Set MyCellTextUnit = HS.OpenCellTextUnit(CopyPeriodPOV, "[Default]", "Account", "Ascending")
                    NumItems= MyCellTextUnit.GetNumItems
                    For i = 0 to NumItems - 1
                        A = MyCellTextUnit.Item(i).Account
                        If HS.Account.IsBase("ACQ_ACCOUNTS",A) = False Then
                            If PrevAccount <> A Then AccFreq = GetUD(A, "Account", "AccFreq")
                            If AccFreq = "Q" Then
                                sI = MyCellTextUnit.Item(i).ICP
                                sC1 = MyCellTextUnit.Item(i).Custom("Custom1")
                                sC2 = MyCellTextUnit.Item(i).Custom("Custom2")
                                sC3 = MyCellTextUnit.Item(i).Custom("Custom3")
                                sC4 = MyCellTextUnit.Item(i).Custom("Custom4")
                                CellText = MyCellTextUnit.Item(i).CellText
                                HS.SetCellTextWithLabel "A#"&A&".I#"&sI&".C1#"&sC1&".C2#"&sC2&".C3#"&sC3&".C4#"&sC4&"", "[Default]",CellText
                            End If
                        End If
                        PrevAccount = A
                    Next

                End If

            End If
        End If
    End If

End Sub
